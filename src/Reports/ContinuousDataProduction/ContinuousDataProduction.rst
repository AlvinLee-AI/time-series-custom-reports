<?xml version="1.0" encoding="utf-8" standalone="yes"?><root type="PerpetuumSoft.Reporting.DOM.Document" id="1" version="2" Name="ContinuousDataProduction" IsTemplate="true" Title="Continuous Data Production" ImportsString="ContinuousDataProductionNamespace&#xD;&#xA;ReportPluginFramework.Beta&#xD;&#xA;ReportPluginFramework.Beta.ReportData&#xD;&#xA;System.Linq&#xD;&#xA;ReportPluginFramework.Beta.ReportData.TimeSeriesComputedStatistics&#xD;&#xA;ReportPluginFramework.Beta.ReportData.TimeSeriesData&#xD;&#xA;ReportPluginFramework.Beta.ReportData.TimeSeriesDescription&#xD;&#xA;System.Collections.Generic&#xD;&#xA;System.Data&#xD;&#xA;Server.Services.PublishService.ServiceModel.RequestDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.ResponseDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.Dtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.Dtos.FieldVisit&#xD;&#xA;Server.Services.PublishService.ServiceModel.Dtos.FieldVisit.Enum&#xD;&#xA;System.Windows.Forms.DataVisualization.Charting&#xD;&#xA;PerpetuumSoft.Reporting.MSChart&#xD;&#xA;Newtonsoft.Json&#xD;&#xA;System.Net.Http&#xD;&#xA;" DocumentGuid="de9aa4da-796f-483b-b4f4-f9a9044f09fe" MetricUnit="Pixel" DoublePass="true" CommonScript="// Common functions, variables and defaults&#xD;&#xA;//&#xD;&#xA;&#xD;&#xA;public string ReportTitle = &quot;&quot;;&#xD;&#xA;public DateTimeOffset ReportTime = DateTimeOffset.Now;&#xD;&#xA;&#xD;&#xA;public string OutputParameter = &quot;Discharge&quot;;&#xD;&#xA;public string OutputParameterUnitSymbol = &quot;m³/s&quot;;&#xD;&#xA;public string InputParameter = &quot;Stage&quot;;&#xD;&#xA;public string InputParameterUnitSymbol = &quot;m&quot;;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;public List&lt;PointValue&gt; HistoricalFlowPoints = new List&lt;PointValue&gt;();&#xD;&#xA;&#xD;&#xA;public class PointValue&#xD;&#xA;{&#xD;&#xA;  public PointValue() {}&#xD;&#xA;&#xD;&#xA;  public DateTime Date { get; set; }&#xD;&#xA;  public double Value { get; set; }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void InitHistoricalPointsList(string locationIdentifier,&#xD;&#xA;  int httpRepeatCallLimit, int httpCallLimitSize, int httpCallTimeoutInSeconds)&#xD;&#xA;{&#xD;&#xA;  FillHistoricalPointsList(locationIdentifier,&#xD;&#xA;    httpRepeatCallLimit, httpCallLimitSize, httpCallTimeoutInSeconds);&#xD;&#xA;  &#xD;&#xA;  if (HistoricalFlowPoints.Count &gt; 0)&#xD;&#xA;    HistoricalFlowPoints.Sort((x, y) =&gt; x.Date.CompareTo(y.Date));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void FillHistoricalPointsList(string locationIdentifier,&#xD;&#xA;  int httpRepeatCallLimit, int httpCallLimitSize, int httpCallTimeoutInSeconds)&#xD;&#xA;{&#xD;&#xA;  HistoricalFlowPoints.Clear();&#xD;&#xA;  &#xD;&#xA;  try&#xD;&#xA;  {   &#xD;&#xA;    int startIndex = 0;&#xD;&#xA;    string data = GetHttpData(locationIdentifier, startIndex,&#xD;&#xA;      httpRepeatCallLimit, httpCallLimitSize, httpCallTimeoutInSeconds);&#xD;&#xA;    &#xD;&#xA;    while (!string.IsNullOrEmpty(data))&#xD;&#xA;    {&#xD;&#xA;      dynamic dynData = JsonConvert.DeserializeObject(data);&#xD;&#xA;      if (dynData.features.Count == 0) return;&#xD;&#xA;      &#xD;&#xA;      for (int i = 0; i &lt; dynData.features.Count; i++)&#xD;&#xA;      {&#xD;&#xA;        PointValue point = new PointValue();&#xD;&#xA;        point.Date = DateTime.Parse(dynData.features[i].properties.DATE.ToString().Trim());&#xD;&#xA;        &#xD;&#xA;        if ((dynData.features[i].properties.FLOW != null) &amp;&amp;&#xD;&#xA;          !string.IsNullOrEmpty(dynData.features[i].properties.FLOW.ToString()))&#xD;&#xA;        &#xD;&#xA;          point.Value = (double) dynData.features[i].properties.FLOW;&#xD;&#xA;        else&#xD;&#xA;          point.Value = double.NaN;&#xD;&#xA;        &#xD;&#xA;        HistoricalFlowPoints.Add(point);&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      startIndex += httpCallLimitSize;&#xD;&#xA;      data = GetHttpData(locationIdentifier, startIndex,&#xD;&#xA;        httpRepeatCallLimit, httpCallLimitSize, httpCallTimeoutInSeconds);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  catch (Exception ex)&#xD;&#xA;  {&#xD;&#xA;    Log.Error(&quot;Exception processing json in InitHistoricalPointsList: &quot;, ex);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string GetHttpData(string locationIdentifier, int startIndex,&#xD;&#xA;  int httpRepeatCallLimit, int httpCallLimitSize, int httpCallTimeoutInSeconds)&#xD;&#xA;{&#xD;&#xA;  string path = BuildUrlPath(locationIdentifier, startIndex, httpCallLimitSize);&#xD;&#xA;  string data = ContinuousDataProductionNamespace.ReportSpecificFunctions.CallHttpClient(&#xD;&#xA;    path, httpRepeatCallLimit, httpCallTimeoutInSeconds);&#xD;&#xA;&#xD;&#xA;  return data;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string BuildUrlPath(string locationIdentifier, int startIndex, int httpCallLimitSize)&#xD;&#xA;{&#xD;&#xA;  string path = @&quot;http://geo.weather.gc.ca/geomet-beta/features/collections/hydrometric-daily-mean/items?STATION_NUMBER=&quot;;&#xD;&#xA;&#xD;&#xA;  path += System.Net.WebUtility.UrlEncode(locationIdentifier);&#xD;&#xA;  path += &quot;&amp;startindex=&quot; + startIndex.ToString();&#xD;&#xA;  path += &quot;&amp;limit=&quot; + httpCallLimitSize.ToString();&#xD;&#xA;&#xD;&#xA;  return path;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public bool TimeRangeOverlaps(DateTimeOffset start, DateTimeOffset? end, DateTimeOffsetInterval interval)&#xD;&#xA;{&#xD;&#xA;  if (interval.End.HasValue &amp;&amp; (start &gt; interval.End.Value)) return false;&#xD;&#xA;  if (interval.Start.HasValue &amp;&amp; end.HasValue &amp;&amp; (end &lt; interval.Start.Value)) return false;&#xD;&#xA;  return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int NumberOfDaysInLeapYear = 366;&#xD;&#xA;&#xD;&#xA;public double Quartile0 = 0.0;&#xD;&#xA;public double Quartile25 = 0.25;&#xD;&#xA;public double Median = 0.50;&#xD;&#xA;public double Quartile75 = 0.75;&#xD;&#xA;public double Quartile100 = 1.0;&#xD;&#xA;&#xD;&#xA;public double GetQuartileForDay(double quartile, int dayIndex, double[,] yearDayValues)&#xD;&#xA;{&#xD;&#xA;  List&lt;double&gt; validValuesForDay = new List&lt;double&gt;();&#xD;&#xA;&#xD;&#xA;  int minYear = HistoricalFlowPoints[0].Date.Year;&#xD;&#xA;  int maxYear = HistoricalFlowPoints[HistoricalFlowPoints.Count - 1].Date.Year;&#xD;&#xA;  &#xD;&#xA;  int numYears = maxYear - minYear + 1;&#xD;&#xA;&#xD;&#xA;  for (int year = 0; year &lt; numYears; year++)&#xD;&#xA;  {&#xD;&#xA;    double val = yearDayValues[year, dayIndex];&#xD;&#xA;    if (!double.IsNaN(val)) validValuesForDay.Add(yearDayValues[year, dayIndex]);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  double result = GetQuartileFromList(quartile, validValuesForDay);&#xD;&#xA;  &#xD;&#xA;  Log.DebugFormat(&quot;dayIndex = {0}, quartile = {1}, result = {2}&quot;, dayIndex, quartile, result);&#xD;&#xA;  return result;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double GetQuartileFromList(double quartile, List&lt;double&gt; valuesForDay)&#xD;&#xA;{&#xD;&#xA;  int count = valuesForDay.Count; &#xD;&#xA;  if (count &lt; 2) return double.NaN;&#xD;&#xA;  &#xD;&#xA;  valuesForDay.Sort();&#xD;&#xA;  &#xD;&#xA;  double position = (count - 1) * quartile;&#xD;&#xA;  &#xD;&#xA;  int index = (int) Math.Floor(position);&#xD;&#xA;  double remainder = position - index;&#xD;&#xA;  &#xD;&#xA;  if (remainder == 0.0) return valuesForDay[index];&#xD;&#xA;  &#xD;&#xA;  double leftVal = valuesForDay[index];&#xD;&#xA;  double rightVal = valuesForDay[index + 1];&#xD;&#xA;  &#xD;&#xA;  double interpolate = leftVal + ((rightVal - leftVal) * remainder);&#xD;&#xA;  &#xD;&#xA;  return interpolate;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddQuartilePoint(Series series, double timestamp, double lowerValue, double upperValue)&#xD;&#xA;{&#xD;&#xA;  if (!double.IsNaN(lowerValue) &amp;&amp; !double.IsNaN(upperValue))&#xD;&#xA;  {&#xD;&#xA;    double [] yvals = new double[2];&#xD;&#xA;&#xD;&#xA;    yvals[0] = lowerValue;&#xD;&#xA;    yvals[1] = upperValue;&#xD;&#xA;&#xD;&#xA;    DataPoint pt = new DataPoint();&#xD;&#xA;    pt.XValue = timestamp;&#xD;&#xA;    pt.YValues = yvals;&#xD;&#xA;    &#xD;&#xA;    series.Points.Add(pt);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddHistoricalQuartiles(MicrosoftChart microsoftChart1)&#xD;&#xA;{&#xD;&#xA; // Log.Info(&quot;AddHistoricalQuartiles&quot;);&#xD;&#xA;  &#xD;&#xA;  if (HistoricalFlowPoints.Count == 0) return;&#xD;&#xA;  &#xD;&#xA;  int minYear = HistoricalFlowPoints[0].Date.Year;&#xD;&#xA;  int maxYear = HistoricalFlowPoints[HistoricalFlowPoints.Count - 1].Date.Year;&#xD;&#xA;  &#xD;&#xA;  int numYears = maxYear - minYear + 1;&#xD;&#xA;  &#xD;&#xA;//  Log.DebugFormat(&quot;number of historical points = {0}, minYear = {1}, maxYear = {2}, numYears = {3}&quot;, &#xD;&#xA;//    HistoricalFlowPoints.Count, minYear, maxYear, numYears);&#xD;&#xA;  &#xD;&#xA;  double[,] yearDayValues = new double[numYears, NumberOfDaysInLeapYear];&#xD;&#xA;&#xD;&#xA;  for (int year = 0; year &lt; numYears; year++)&#xD;&#xA;    for (int day = 0; day &lt; NumberOfDaysInLeapYear; day++)&#xD;&#xA;      yearDayValues[year, day] = double.NaN;&#xD;&#xA; &#xD;&#xA;  for (int i = 0; i &lt; HistoricalFlowPoints.Count; i++)&#xD;&#xA;  {&#xD;&#xA;    if (double.IsNaN(HistoricalFlowPoints[i].Value)) continue;&#xD;&#xA;&#xD;&#xA;    DateTime dt = HistoricalFlowPoints[i].Date;&#xD;&#xA;    &#xD;&#xA;    int year = dt.Year;&#xD;&#xA;    int dayNumber = dt.DayOfYear;&#xD;&#xA;    &#xD;&#xA;    if (dt &gt;= (new DateTime(year, 3, 1)) &amp;&amp; !DateTime.IsLeapYear(year))&#xD;&#xA;      dayNumber++;&#xD;&#xA;    &#xD;&#xA;    int yearIndex = year - minYear;&#xD;&#xA;//    Log.DebugFormat(&quot;yearIndex = {0}, dayNumber = {1}&quot;, yearIndex, dayNumber - 1);&#xD;&#xA;    &#xD;&#xA;    yearDayValues[yearIndex, dayNumber - 1] = HistoricalFlowPoints[i].Value;&#xD;&#xA;  }&#xD;&#xA; &#xD;&#xA;  DateTime firstOfYear = new DateTime(ReportTime.Year, 1, 1);&#xD;&#xA;  &#xD;&#xA;  Series historicalMinLine = new Series(&quot;Min Line&quot;);&#xD;&#xA;  Series historicalMin = new Series(&quot;Min&quot;);&#xD;&#xA;  Series historicalQuartile25Line = new Series(&quot;Historical 25 Line&quot;);&#xD;&#xA;  Series historicalQuartile25 = new Series(&quot;Historical 25&quot;);&#xD;&#xA;  Series historicalMedianLine = new Series(&quot;Historical Daily Median&quot;);&#xD;&#xA;  Series historicalQuartile75 = new Series(&quot;Historical 75&quot;);&#xD;&#xA;  Series historicalQuartile75Line = new Series(&quot;Historical 75 Line&quot;);&#xD;&#xA;  Series historicalMax = new Series(&quot;Max&quot;);&#xD;&#xA;  Series historicalMaxLine = new Series(&quot;Max Line&quot;);&#xD;&#xA;&#xD;&#xA;  microsoftChart1.Series.Add(historicalMinLine);&#xD;&#xA;  microsoftChart1.Series.Add(historicalMin);&#xD;&#xA;  microsoftChart1.Series.Add(historicalQuartile25Line);&#xD;&#xA;  microsoftChart1.Series.Add(historicalQuartile25);&#xD;&#xA;  microsoftChart1.Series.Add(historicalMedianLine);&#xD;&#xA;  microsoftChart1.Series.Add(historicalQuartile75);&#xD;&#xA;  microsoftChart1.Series.Add(historicalQuartile75Line);&#xD;&#xA;  microsoftChart1.Series.Add(historicalMax);&#xD;&#xA;  microsoftChart1.Series.Add(historicalMaxLine);&#xD;&#xA;&#xD;&#xA;  for (int dayIndex = 0; dayIndex &lt; NumberOfDaysInLeapYear; dayIndex++)&#xD;&#xA;  {&#xD;&#xA;    double timeOnChart = firstOfYear.ToOADate() + dayIndex;&#xD;&#xA;    &#xD;&#xA;    double min = GetQuartileForDay(Quartile0, dayIndex, yearDayValues);&#xD;&#xA;    double quartile25 = GetQuartileForDay(Quartile25, dayIndex, yearDayValues);&#xD;&#xA;&#xD;&#xA;    double median = GetQuartileForDay(Median, dayIndex, yearDayValues);&#xD;&#xA;&#xD;&#xA;    double quartile75 = GetQuartileForDay(Quartile75, dayIndex, yearDayValues);&#xD;&#xA;    double max = GetQuartileForDay(Quartile100, dayIndex, yearDayValues);&#xD;&#xA;      &#xD;&#xA;//   Log.DebugFormat(&quot;min: time = {0}, min = {1}, quartile25 = {2}&quot;, timeOnChart, min, quartile25);&#xD;&#xA;    &#xD;&#xA;    historicalMinLine.Points.Add(new DataPoint(timeOnChart, min));&#xD;&#xA;    AddQuartilePoint(historicalMin, timeOnChart, min, quartile25);&#xD;&#xA;    historicalQuartile25Line.Points.Add(new DataPoint(timeOnChart, quartile25));&#xD;&#xA;    AddQuartilePoint(historicalQuartile25, timeOnChart, quartile25, median);&#xD;&#xA;        &#xD;&#xA;    historicalMedianLine.Points.Add(new DataPoint(timeOnChart, median));&#xD;&#xA;&#xD;&#xA;    AddQuartilePoint(historicalQuartile75, timeOnChart, median, quartile75);&#xD;&#xA;    historicalQuartile75Line.Points.Add(new DataPoint(timeOnChart, quartile75));&#xD;&#xA;    AddQuartilePoint(historicalMax, timeOnChart, quartile75, max);&#xD;&#xA;    historicalMaxLine.Points.Add(new DataPoint(timeOnChart, max));&#xD;&#xA;  }&#xD;&#xA;       &#xD;&#xA;  historicalMinLine.Color = System.Drawing.Color.PaleGoldenrod;&#xD;&#xA;  historicalMin.Color = System.Drawing.Color.FromArgb(90, System.Drawing.Color.PaleGoldenrod);&#xD;&#xA;  historicalMin.ChartType = SeriesChartType.RangeColumn;&#xD;&#xA;  &#xD;&#xA;  historicalQuartile25Line.Color = System.Drawing.Color.PaleGoldenrod;&#xD;&#xA;  historicalQuartile25.Color = System.Drawing.Color.FromArgb(50, System.Drawing.Color.LightGreen);&#xD;&#xA;  historicalQuartile25.ChartType = SeriesChartType.RangeColumn;&#xD;&#xA; &#xD;&#xA;  historicalMedianLine.Color = System.Drawing.Color.FromArgb(100, System.Drawing.Color.Green);&#xD;&#xA;&#xD;&#xA;  historicalQuartile75Line.Color = System.Drawing.Color.LightCoral;&#xD;&#xA;  historicalQuartile75.Color = System.Drawing.Color.FromArgb(50, System.Drawing.Color.LightCoral);&#xD;&#xA;  historicalQuartile75.ChartType = SeriesChartType.RangeColumn;&#xD;&#xA; &#xD;&#xA;  historicalMaxLine.Color = System.Drawing.Color.LightBlue;&#xD;&#xA;  historicalMax.Color = System.Drawing.Color.FromArgb(80, System.Drawing.Color.LightBlue);&#xD;&#xA;  historicalMax.ChartType = SeriesChartType.RangeColumn;&#xD;&#xA;  &#xD;&#xA;  foreach (Series series in microsoftChart1.Series)&#xD;&#xA;  {&#xD;&#xA;    if (series.ChartType == SeriesChartType.RangeColumn)&#xD;&#xA;    {&#xD;&#xA;      series[&quot;PointWidth&quot;] = &quot;1&quot;;&#xD;&#xA;      series[&quot;DrawSideBySide&quot;] = &quot;false&quot;;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {   &#xD;&#xA;      series.ChartType = SeriesChartType.Line;&#xD;&#xA;      series.BorderWidth = 3;&#xD;&#xA;      series.MarkerStyle = MarkerStyle.None;&#xD;&#xA;      series.EmptyPointStyle.BorderWidth = 0;&#xD;&#xA;      series.EmptyPointStyle.MarkerStyle = MarkerStyle.None;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    series.IsVisibleInLegend = false;&#xD;&#xA;    series.XValueType = ChartValueType.DateTime;&#xD;&#xA;    series.XAxisType = AxisType.Primary;&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void DrawDischargeChart(MicrosoftChart microsoftChart1)&#xD;&#xA;{&#xD;&#xA;  Log.DebugFormat(&quot;DrawDischargeChart. Number of historical points: {0}&quot;,  HistoricalFlowPoints.Count);&#xD;&#xA;  &#xD;&#xA;  if (HistoricalFlowPoints.Count &gt; 0)&#xD;&#xA;  {&#xD;&#xA;    Log.DebugFormat(&quot;DrawDischargeChart. Date of first historical: {0}, last historical {1}&quot;, &#xD;&#xA;      HistoricalFlowPoints[0].Date.ToString(&quot;yyyy-MM-dd&quot;), HistoricalFlowPoints[HistoricalFlowPoints.Count - 1].Date.ToString(&quot;yyyy-MM-dd&quot;));&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  microsoftChart1.Series.Clear();&#xD;&#xA;  microsoftChart1.Annotations.Clear();&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.StripLines.Clear();&#xD;&#xA;  &#xD;&#xA;  AddHistoricalQuartiles(microsoftChart1);&#xD;&#xA;  &#xD;&#xA;  DataTable dischargePoints = (DataTable) Engine.Objects[&quot;ReportTables.Discharge&quot;];&#xD;&#xA;  &#xD;&#xA;  Series points = new Series(&quot;Discharge Points&quot;);&#xD;&#xA;  microsoftChart1.Series.Add(points);&#xD;&#xA;  &#xD;&#xA;  points.BorderColor = System.Drawing.Color.Blue;&#xD;&#xA;  points.IsVisibleInLegend = false;&#xD;&#xA;  points.ChartType = SeriesChartType.Line;&#xD;&#xA;  points.Color = System.Drawing.Color.Blue;&#xD;&#xA;  points.MarkerStyle = MarkerStyle.None;&#xD;&#xA;  points.BorderWidth = 5;&#xD;&#xA;  points.XValueType = ChartValueType.DateTime;&#xD;&#xA;  points.XAxisType = AxisType.Primary;&#xD;&#xA;  &#xD;&#xA;  foreach (DataRow row in dischargePoints.Rows)&#xD;&#xA;    points.Points.AddXY((double) row[&quot;DateTime&quot;], (double) row[&quot;Discharge&quot;]);&#xD;&#xA;  &#xD;&#xA;  DataTable dischargeMeasurementsPoints = (DataTable) Engine.Objects[&quot;ReportTables.DischargeMeasurements&quot;];&#xD;&#xA;  &#xD;&#xA;  Series measurementPoints = microsoftChart1.Series.Add(&quot;Discharge Measurement Points&quot;);&#xD;&#xA;  measurementPoints.IsVisibleInLegend = false;&#xD;&#xA;  measurementPoints.ChartType = SeriesChartType.Point;&#xD;&#xA;  measurementPoints.Color = System.Drawing.Color.Yellow;&#xD;&#xA;  measurementPoints.BorderColor = System.Drawing.Color.FromArgb(51, 51, 51);&#xD;&#xA;  measurementPoints.MarkerBorderWidth = 3;&#xD;&#xA;  measurementPoints.MarkerStyle = MarkerStyle.Triangle;&#xD;&#xA;  measurementPoints.MarkerSize = 8;&#xD;&#xA;  measurementPoints.XValueType = ChartValueType.DateTime;&#xD;&#xA;  &#xD;&#xA;  foreach (DataRow row in dischargeMeasurementsPoints.Rows)&#xD;&#xA;    measurementPoints.Points.AddXY((double) row[&quot;DateTime&quot;], (double) row[&quot;Discharge&quot;]);&#xD;&#xA;&#xD;&#xA;  ChartArea chartArea = microsoftChart1.ChartAreas[0];&#xD;&#xA;  chartArea.AxisX.LabelStyle.Format = &quot;MM&quot;;&#xD;&#xA;  chartArea.AxisX.MajorGrid.Enabled = false;&#xD;&#xA;  chartArea.AxisX.Minimum = (new DateTime(ReportTime.Year, 1, 1)).ToOADate();&#xD;&#xA;  chartArea.AxisX.Maximum = ((new DateTime(ReportTime.Year, 1, 1)).AddYears(1)).AddSeconds(-1).ToOADate();&#xD;&#xA;  chartArea.AxisX.MinorTickMark.Enabled = true;&#xD;&#xA;  chartArea.AxisX.MinorTickMark.LineColor = System.Drawing.Color.Silver;&#xD;&#xA;  chartArea.AxisX.MinorTickMark.Interval = 1;&#xD;&#xA;  chartArea.AxisX.MinorTickMark.IntervalType = DateTimeIntervalType.Days;&#xD;&#xA;  &#xD;&#xA;  PerpetuumSoft.Reporting.MSChart.ChartModel.VerticalLineAnnotation vLineRed = new PerpetuumSoft.Reporting.MSChart.ChartModel.VerticalLineAnnotation();&#xD;&#xA;  vLineRed.IsInfinitive = true;&#xD;&#xA;  vLineRed.ClipToChartArea = microsoftChart1.ChartAreas[0].Name;&#xD;&#xA;  vLineRed.X = ReportTime.DateTime.ToOADate();&#xD;&#xA;  vLineRed.AxisX = microsoftChart1.ChartAreas[0].AxisX;&#xD;&#xA;  vLineRed.LineColor = System.Drawing.Color.Red;&#xD;&#xA;  vLineRed.LineWidth = 3;&#xD;&#xA;      &#xD;&#xA;  microsoftChart1.Annotations.Add(vLineRed);&#xD;&#xA;  &#xD;&#xA;  PerpetuumSoft.Reporting.MSChart.ChartModel.StripLine stripYellow = new PerpetuumSoft.Reporting.MSChart.ChartModel.StripLine();&#xD;&#xA;  stripYellow.BackColor = System.Drawing.Color.FromArgb(100, 250, 250, 0);&#xD;&#xA;  stripYellow.Interval = 0;&#xD;&#xA;  stripYellow.IntervalOffset = ReportTime.AddDays(-8).DateTime.ToOADate();&#xD;&#xA;  stripYellow.StripWidth = 8;&#xD;&#xA;      &#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.StripLines.Add(stripYellow);&#xD;&#xA;  &#xD;&#xA;  DataTable eightDaysPoints = (DataTable) Engine.Objects[&quot;ReportTables.Discharge8DaysCorrected&quot;];&#xD;&#xA;  if (eightDaysPoints.Rows.Count &gt; 0)&#xD;&#xA;  {&#xD;&#xA;    double lastDischarge = (double) eightDaysPoints.Rows[eightDaysPoints.Rows.Count - 1][&quot;Value&quot;];&#xD;&#xA;    if (!double.IsNaN(lastDischarge))&#xD;&#xA;    {&#xD;&#xA;      PerpetuumSoft.Reporting.MSChart.ChartModel.TextAnnotation text = new PerpetuumSoft.Reporting.MSChart.ChartModel.TextAnnotation();&#xD;&#xA;      text.Height = 10;&#xD;&#xA;      text.Width = 95;&#xD;&#xA;      text.Alignment = System.Drawing.ContentAlignment.TopRight;&#xD;&#xA;      text.Font = new System.Drawing.Font(&quot;Calibri&quot;, 6);&#xD;&#xA;      text.ForeColor = System.Drawing.Color.FromArgb(51, 51, 51);&#xD;&#xA;      text.Text = &quot;Current value &quot; + lastDischarge.ToString(&quot;F3&quot;) + &quot; &quot; + OutputParameterUnitSymbol;&#xD;&#xA;      text.Y = 0;&#xD;&#xA;      text.X = 0;&#xD;&#xA;         &#xD;&#xA;      microsoftChart1.Annotations.Add(text);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void DrawRatingChart(MicrosoftChart microsoftChart1)&#xD;&#xA;{&#xD;&#xA;  microsoftChart1.Series.Clear();&#xD;&#xA;  microsoftChart1.Annotations.Clear();&#xD;&#xA;  &#xD;&#xA;  DataTable ratingPoints = (DataTable) Engine.Objects[&quot;ReportTables.AdjustedRatingPoints&quot;];&#xD;&#xA;  Series points = microsoftChart1.Series.Add(&quot;Rating Points&quot;);&#xD;&#xA;  points.IsVisibleInLegend = false;&#xD;&#xA;  points.ChartType = SeriesChartType.Line;&#xD;&#xA;  points.Color = System.Drawing.Color.Red;&#xD;&#xA;  points.MarkerStyle = MarkerStyle.None;&#xD;&#xA;  points.BorderWidth = 5;&#xD;&#xA;  &#xD;&#xA;  foreach (DataRow row in ratingPoints.Rows)&#xD;&#xA;    points.Points.AddXY((double) row[&quot;Discharge&quot;], (double) row[&quot;Stage&quot;]);&#xD;&#xA;  &#xD;&#xA;  DataTable measurements = (DataTable) Engine.Objects[&quot;ReportTables.RatingMeasurements&quot;];&#xD;&#xA;  Series ratingMeasurements = microsoftChart1.Series.Add(&quot;Rating Measurements&quot;);&#xD;&#xA;  ratingMeasurements.IsVisibleInLegend = false;&#xD;&#xA;  ratingMeasurements.ChartType = SeriesChartType.Point;&#xD;&#xA;  ratingMeasurements.MarkerStyle = MarkerStyle.Circle;&#xD;&#xA;  ratingMeasurements.Color = System.Drawing.Color.Blue;&#xD;&#xA;  &#xD;&#xA;  foreach (DataRow row in measurements.Rows)&#xD;&#xA;    ratingMeasurements.Points.AddXY((double) row[&quot;Discharge&quot;], (double) row[&quot;Stage&quot;]);&#xD;&#xA;  &#xD;&#xA;  DataTable stagePoints = (DataTable) Engine.Objects[&quot;ReportTables.Stage8DaysCorrected&quot;];&#xD;&#xA;  if (stagePoints.Rows.Count &gt; 0)&#xD;&#xA;  {&#xD;&#xA;    double lastStage = (double) stagePoints.Rows[stagePoints.Rows.Count - 1][&quot;Value&quot;];&#xD;&#xA;    if (!double.IsNaN(lastStage))&#xD;&#xA;    {&#xD;&#xA;      PerpetuumSoft.Reporting.MSChart.ChartModel.HorizontalLineAnnotation hLine = new PerpetuumSoft.Reporting.MSChart.ChartModel.HorizontalLineAnnotation();&#xD;&#xA;      hLine.IsInfinitive = true;&#xD;&#xA;      hLine.ClipToChartArea = microsoftChart1.ChartAreas[0].Name;&#xD;&#xA;      hLine.Y = lastStage;&#xD;&#xA;      hLine.AxisY = microsoftChart1.ChartAreas[0].AxisY;&#xD;&#xA;      hLine.LineColor = System.Drawing.Color.Blue;&#xD;&#xA;      hLine.LineWidth = 4;&#xD;&#xA;      &#xD;&#xA;      microsoftChart1.Annotations.Add(hLine);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.RoundAxisValues();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void Draw8Days(MicrosoftChart microsoftChart1, string parameterName)&#xD;&#xA;{&#xD;&#xA;  microsoftChart1.Series.Clear();&#xD;&#xA;  &#xD;&#xA;  DataTable rawPlotPoints = (DataTable) Engine.Objects[&quot;ReportTables.&quot; + parameterName + &quot;8DaysRaw&quot;];&#xD;&#xA;  Series rawPoints = microsoftChart1.Series.Add(&quot;Raw&quot;);&#xD;&#xA;  rawPoints.ChartType = SeriesChartType.Line;&#xD;&#xA;  rawPoints.Color = System.Drawing.Color.Green;&#xD;&#xA;  rawPoints.MarkerStyle = MarkerStyle.None;&#xD;&#xA;  rawPoints.BorderWidth = 4;&#xD;&#xA;  rawPoints.XValueType = ChartValueType.DateTime;&#xD;&#xA;  &#xD;&#xA;  foreach (DataRow row in rawPlotPoints.Rows)&#xD;&#xA;    rawPoints.Points.AddXY((double) row[&quot;DateTime&quot;], (double) row[&quot;Value&quot;]);&#xD;&#xA;&#xD;&#xA;  DataTable corrPlotPoints = (DataTable) Engine.Objects[&quot;ReportTables.&quot; + parameterName + &quot;8DaysCorrected&quot;];&#xD;&#xA;  Series corrPoints = microsoftChart1.Series.Add(&quot;Corrected&quot;);&#xD;&#xA;  corrPoints.ChartType = SeriesChartType.Line;&#xD;&#xA;  corrPoints.Color = System.Drawing.Color.Blue;&#xD;&#xA;  corrPoints.MarkerStyle = MarkerStyle.None;&#xD;&#xA;  corrPoints.BorderWidth = 4;&#xD;&#xA;  corrPoints.XValueType = ChartValueType.DateTime;&#xD;&#xA;  &#xD;&#xA;  foreach (DataRow row in corrPlotPoints.Rows)&#xD;&#xA;    corrPoints.Points.AddXY((double) row[&quot;DateTime&quot;], (double) row[&quot;Value&quot;]);&#xD;&#xA;  &#xD;&#xA;  DateTimeOffset eightDayPlotEndTime = ReportTime;&#xD;&#xA;  DateTimeOffset eightDayPlotStartTime = new DateTimeOffset(ReportTime.AddDays(-8).Year, &#xD;&#xA;    ReportTime.AddDays(-8).Month, ReportTime.AddDays(-8).Day, 0, 0, 0, ReportTime.Offset);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.LabelStyle.Format = &quot;dd&quot;;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.Minimum = eightDayPlotStartTime.DateTime.ToOADate();&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.Maximum = eightDayPlotEndTime.DateTime.ToOADate();&#xD;&#xA;  &#xD;&#xA;  microsoftChart1.Legends[0].Docking = Docking.Bottom;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisY.IntervalAutoMode = IntervalAutoMode.VariableCount;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisY.IsStartedFromZero = false;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public class CorrectionNoteItem&#xD;&#xA;{&#xD;&#xA;  public DateTime DateAppliedUtc {get; set;}&#xD;&#xA;  public string Type {get; set;}&#xD;&#xA;  public string Comment {get; set;}&#xD;&#xA;  public string SignalType {get; set; }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddCorrectionsAndNotes(IPublishGateway publish, Guid uniqueId, string signalType, List&lt;CorrectionNoteItem&gt; list)&#xD;&#xA;{&#xD;&#xA;  MetadataChangeTransactionListServiceRequest changeList = new MetadataChangeTransactionListServiceRequest();&#xD;&#xA;  changeList.TimeSeriesUniqueId = uniqueId;&#xD;&#xA;  IList&lt;MetadataChangeTransaction&gt; transactions = publish.Get(changeList).MetadataChangeTransactions;&#xD;&#xA;  foreach (MetadataChangeTransaction transaction in transactions)&#xD;&#xA;  {&#xD;&#xA;    if (transaction.CorrectionOperations != null)&#xD;&#xA;    {&#xD;&#xA;      foreach (CorrectionOperation operation in transaction.CorrectionOperations)&#xD;&#xA;        list.Add(new CorrectionNoteItem&#xD;&#xA;          {&#xD;&#xA;            DateAppliedUtc = operation.DateAppliedUtc,&#xD;&#xA;            Type = operation.Type.ToString(),&#xD;&#xA;            Comment = operation.Comments,&#xD;&#xA;            SignalType = signalType}&#xD;&#xA;          );&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if (transaction.NoteOperations != null)&#xD;&#xA;    {&#xD;&#xA;      foreach (NoteOperation operation in transaction.NoteOperations)&#xD;&#xA;        list.Add(new CorrectionNoteItem&#xD;&#xA;          {&#xD;&#xA;            DateAppliedUtc = operation.DateAppliedUtc,&#xD;&#xA;            Type = &quot;Note&quot;,&#xD;&#xA;            Comment = operation.NoteText,&#xD;&#xA;            SignalType = signalType}&#xD;&#xA;          );&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}" ScriptLanguage="CSharp" GridStep="18.75" GenerateScript="if (Engine.IsSecondPass) return;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;Log.Debug(&quot;Begin Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  RunFileReportRequest runReportRequest = (RunFileReportRequest) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;RunReportRequest&quot;];&#xD;&#xA;  IPublishGateway publish = runReportRequest.Publish;&#xD;&#xA;  ReportTitle = (string) dataSet.Tables[&quot;ReportSettings&quot;].Rows[0][&quot;ReportTitle&quot;];&#xD;&#xA;  Guid timeSeriesUniqueId = (Guid) dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;UniqueId&quot;];&#xD;&#xA;  &#xD;&#xA;  string dllName = (string) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;];&#xD;&#xA;  Log.DebugFormat(&quot;{0} - Document GenerateScript input = {1}&quot;, dllName, timeSeriesUniqueId);&#xD;&#xA;  &#xD;&#xA;  Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  ///////////////////////////////////////////////////////////////&#xD;&#xA;    &#xD;&#xA;  OutputParameter = dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;Parameter&quot;].ToString();&#xD;&#xA;  &#xD;&#xA;  // The unit symbol doesn't have superscript '3' so use default set in CommonScript instead&#xD;&#xA;  //  OutputParameterUnitSymbol = dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;UnitSymbol&quot;].ToString();&#xD;&#xA;  &#xD;&#xA;  double tableIncrement = common.GetParameterDouble(&quot;TableIncrement&quot;, 0.1);&#xD;&#xA;  int httpRepeatCallLimit = common.GetParameterInt(&quot;HttpRepeatCallLimit&quot;, 5);&#xD;&#xA;  int httpCallLimitSize = common.GetParameterInt(&quot;HttpCallLimitSize&quot;, 500);&#xD;&#xA;  int httpCallTimeoutInSeconds = common.GetParameterInt(&quot;HttpCallTimeoutInSeconds&quot;, 30);&#xD;&#xA;  &#xD;&#xA;  TimeSpan timezone = TimeSpan.FromHours(common.GetTimeSeriesDescription(timeSeriesUniqueId).UtcOffset);&#xD;&#xA;  DateTimeOffsetInterval selectedInterval = (DateTimeOffsetInterval) GetData(&quot;ReportTables.ReportData.SelectedInterval&quot;);&#xD;&#xA;  &#xD;&#xA;  if (selectedInterval.End.HasValue) &#xD;&#xA;    ReportTime = selectedInterval.End.Value.ToOffset(timezone);&#xD;&#xA;  else &#xD;&#xA;    ReportTime = DateTimeOffset.Now.ToOffset(timezone);&#xD;&#xA;  &#xD;&#xA;  string locationIdentifier = common.GetTimeSeriesDescription(timeSeriesUniqueId).LocationIdentifier;&#xD;&#xA;  &#xD;&#xA;  int numHistoricalPoints = (int) dataSet.Tables[&quot;ReportSettings&quot;].Rows[0][&quot;NumberOfHistoricalPoints&quot;];&#xD;&#xA;  Log.InfoFormat(&quot;Number of historical points expected = {0}&quot;, numHistoricalPoints);&#xD;&#xA;   &#xD;&#xA;  if (numHistoricalPoints &gt; 0)&#xD;&#xA;  {&#xD;&#xA;    InitHistoricalPointsList(locationIdentifier, httpRepeatCallLimit, httpCallLimitSize, httpCallTimeoutInSeconds);&#xD;&#xA;  &#xD;&#xA;    if (HistoricalFlowPoints.Count != numHistoricalPoints)&#xD;&#xA;    {&#xD;&#xA;      Log.InfoFormat(&quot;Number of historical points retrieved {0} does not match number expected {1} therefore do not calculate Historical Quartiles&quot;, &#xD;&#xA;        HistoricalFlowPoints.Count, numHistoricalPoints);&#xD;&#xA;      &#xD;&#xA;      HistoricalFlowPoints.Clear();&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;Corrections&quot;)) dataSet.Tables.Remove(&quot;Corrections&quot;);&#xD;&#xA;  System.Data.DataTable correctionsTable = dataSet.Tables.Add(&quot;Corrections&quot;);&#xD;&#xA;  &#xD;&#xA;  correctionsTable.Columns.Add(&quot;Applied&quot;, typeof(string));&#xD;&#xA;  correctionsTable.Columns.Add(&quot;Type&quot;, typeof(string));&#xD;&#xA;  correctionsTable.Columns.Add(&quot;SignalType&quot;, typeof(string));&#xD;&#xA;  correctionsTable.Columns.Add(&quot;Comment&quot;, typeof(string));&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;RatingMeasurements&quot;)) dataSet.Tables.Remove(&quot;RatingMeasurements&quot;);&#xD;&#xA;  System.Data.DataTable ratingMeasurementsTable = dataSet.Tables.Add(&quot;RatingMeasurements&quot;);&#xD;&#xA;  &#xD;&#xA;  ratingMeasurementsTable.Columns.Add(&quot;Stage&quot;, typeof(double));&#xD;&#xA;  ratingMeasurementsTable.Columns.Add(&quot;Discharge&quot;, typeof(double));&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;AdjustedRatingPoints&quot;)) dataSet.Tables.Remove(&quot;AdjustedRatingPoints&quot;);&#xD;&#xA;  System.Data.DataTable adjustedRatingPoints = dataSet.Tables.Add(&quot;AdjustedRatingPoints&quot;);&#xD;&#xA;  &#xD;&#xA;  adjustedRatingPoints.Columns.Add(&quot;Stage&quot;, typeof(double));&#xD;&#xA;  adjustedRatingPoints.Columns.Add(&quot;Discharge&quot;, typeof(double));&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;Discharge&quot;)) dataSet.Tables.Remove(&quot;Discharge&quot;);&#xD;&#xA;  System.Data.DataTable dischargePoints = dataSet.Tables.Add(&quot;Discharge&quot;);&#xD;&#xA;  &#xD;&#xA;  dischargePoints.Columns.Add(&quot;DateTime&quot;, typeof(double));&#xD;&#xA;  dischargePoints.Columns.Add(&quot;Discharge&quot;, typeof(double));&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;DischargeMeasurements&quot;)) dataSet.Tables.Remove(&quot;DischargeMeasurements&quot;);&#xD;&#xA;  System.Data.DataTable dischargeMeasurementPoints = dataSet.Tables.Add(&quot;DischargeMeasurements&quot;);&#xD;&#xA;  &#xD;&#xA;  dischargeMeasurementPoints.Columns.Add(&quot;DateTime&quot;, typeof(double));&#xD;&#xA;  dischargeMeasurementPoints.Columns.Add(&quot;Discharge&quot;, typeof(double));&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;Stage8DaysCorrected&quot;)) dataSet.Tables.Remove(&quot;Stage8DaysCorrected&quot;);&#xD;&#xA;  System.Data.DataTable stage8DaysCorrected = dataSet.Tables.Add(&quot;Stage8DaysCorrected&quot;);&#xD;&#xA;  &#xD;&#xA;  stage8DaysCorrected.Columns.Add(&quot;DateTime&quot;, typeof(double));&#xD;&#xA;  stage8DaysCorrected.Columns.Add(&quot;Value&quot;, typeof(double));&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;Stage8DaysRaw&quot;)) dataSet.Tables.Remove(&quot;Stage8DaysRaw&quot;);&#xD;&#xA;  System.Data.DataTable stage8DaysRaw = dataSet.Tables.Add(&quot;Stage8DaysRaw&quot;);&#xD;&#xA;  &#xD;&#xA;  stage8DaysRaw.Columns.Add(&quot;DateTime&quot;, typeof(double));&#xD;&#xA;  stage8DaysRaw.Columns.Add(&quot;Value&quot;, typeof(double));&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;Discharge8DaysCorrected&quot;)) dataSet.Tables.Remove(&quot;Discharge8DaysCorrected&quot;);&#xD;&#xA;  System.Data.DataTable discharge8DaysCorrected = dataSet.Tables.Add(&quot;Discharge8DaysCorrected&quot;);&#xD;&#xA;  &#xD;&#xA;  discharge8DaysCorrected.Columns.Add(&quot;DateTime&quot;, typeof(double));&#xD;&#xA;  discharge8DaysCorrected.Columns.Add(&quot;Value&quot;, typeof(double));&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;Discharge8DaysRaw&quot;)) dataSet.Tables.Remove(&quot;Discharge8DaysRaw&quot;);&#xD;&#xA;  System.Data.DataTable discharge8DaysRaw = dataSet.Tables.Add(&quot;Discharge8DaysRaw&quot;);&#xD;&#xA;  &#xD;&#xA;  discharge8DaysRaw.Columns.Add(&quot;DateTime&quot;, typeof(double));&#xD;&#xA;  discharge8DaysRaw.Columns.Add(&quot;Value&quot;, typeof(double));&#xD;&#xA;  &#xD;&#xA;  DateTimeOffset firstOfYear = new DateTimeOffset(ReportTime.Year, 1, 1, 0, 0, 0, timezone);&#xD;&#xA;  DateTimeOffset endTime = ReportTime.ToOffset(timezone);&#xD;&#xA;  List &lt; TimeAlignedPoint &gt; dischargeTimeAlisgnedPoints = common.GetTimeAlignedPoints(new List&lt;Guid&gt;{timeSeriesUniqueId}, firstOfYear, endTime);&#xD;&#xA;  &#xD;&#xA;  foreach (TimeAlignedPoint timeAlignedPoint in dischargeTimeAlisgnedPoints)&#xD;&#xA;  {&#xD;&#xA;    DataRow row = dischargePoints.NewRow();&#xD;&#xA;    row[&quot;DateTime&quot;] = timeAlignedPoint.Timestamp.DateTime.ToOADate();&#xD;&#xA;    row[&quot;Discharge&quot;] = (timeAlignedPoint.NumericValue1.HasValue) ? timeAlignedPoint.NumericValue1.Value : double.NaN;&#xD;&#xA;    dischargePoints.Rows.Add(row);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  UpchainProcessorListByTimeSeriesServiceRequest upRequest = new UpchainProcessorListByTimeSeriesServiceRequest();&#xD;&#xA;  upRequest.TimeSeriesUniqueId = timeSeriesUniqueId;&#xD;&#xA;  ProcessorListServiceResponse upResponse = publish.Get(upRequest);&#xD;&#xA;  &#xD;&#xA;  string ratingModelIdentifier = &quot;&quot;;&#xD;&#xA;  Guid inputStage = Guid.Empty;&#xD;&#xA;  &#xD;&#xA;  foreach (Processor processor in upResponse.Processors)&#xD;&#xA;  {&#xD;&#xA;    if (string.IsNullOrEmpty(processor.InputRatingModelIdentifier))&#xD;&#xA;      continue;&#xD;&#xA;    &#xD;&#xA;    if (processor.InputTimeSeriesUniqueIds.Count == 0)&#xD;&#xA;      continue;&#xD;&#xA;    &#xD;&#xA;    inputStage = processor.InputTimeSeriesUniqueIds[0];&#xD;&#xA;    ratingModelIdentifier = processor.InputRatingModelIdentifier;&#xD;&#xA;    break;&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  if (string.IsNullOrEmpty(ratingModelIdentifier))&#xD;&#xA;    return;&#xD;&#xA;  &#xD;&#xA;  InputParameter = common.GetTimeSeriesDescription(inputStage).Parameter;&#xD;&#xA;  InputParameterUnitSymbol = common.GetUnitSymbol(common.GetTimeSeriesDescription(inputStage).Unit);&#xD;&#xA;  &#xD;&#xA;  DateTimeOffset eightDayPlotEndTime = ReportTime;&#xD;&#xA;  DateTimeOffset eightDayPlotStartTime = new DateTimeOffset(ReportTime.AddDays(-8).Year, &#xD;&#xA;    ReportTime.AddDays(-8).Month, ReportTime.AddDays(-8).Day, 0, 0, 0, ReportTime.Offset);&#xD;&#xA;&#xD;&#xA;  var correctedStagePoints = common.GetTimeSeriesPoints(inputStage, eightDayPlotStartTime, eightDayPlotEndTime);&#xD;&#xA;  foreach (var point in correctedStagePoints)&#xD;&#xA;  {&#xD;&#xA;    DataRow row = stage8DaysCorrected.NewRow();&#xD;&#xA;    row[&quot;DateTime&quot;] = point.Timestamp.DateTime.ToOADate();&#xD;&#xA;    row[&quot;Value&quot;] = (point.Value.HasValue) ? point.Value.Value : double.NaN;&#xD;&#xA;    stage8DaysCorrected.Rows.Add(row);&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  var correctedDischargePoints = common.GetTimeSeriesPoints(timeSeriesUniqueId, eightDayPlotStartTime, eightDayPlotEndTime);&#xD;&#xA;  foreach (var point in correctedDischargePoints)&#xD;&#xA;  {&#xD;&#xA;    DataRow row = discharge8DaysCorrected.NewRow();&#xD;&#xA;    row[&quot;DateTime&quot;] = point.Timestamp.DateTime.ToOADate();&#xD;&#xA;    row[&quot;Value&quot;] = (point.Value.HasValue) ? point.Value.Value : double.NaN;&#xD;&#xA;    discharge8DaysCorrected.Rows.Add(row);&#xD;&#xA;  }  &#xD;&#xA;  &#xD;&#xA;  TimeSeriesPointsRequest request = new TimeSeriesPointsRequest();&#xD;&#xA;  request.TimeSeriesUniqueId = timeSeriesUniqueId;&#xD;&#xA;  request.QueryFromTime = eightDayPlotStartTime;&#xD;&#xA;  request.QueryToTime = eightDayPlotEndTime;&#xD;&#xA;  request.TimeSeriesDataType = TimeSeriesDataType.Raw;&#xD;&#xA;  request.IncludeGapMarkers = true;&#xD;&#xA;&#xD;&#xA;  var rawDischargePoints = runReportRequest.ReportData.GetTimeSeriesPoints(request).Points;&#xD;&#xA;  &#xD;&#xA;  foreach (var point in rawDischargePoints)&#xD;&#xA;  {&#xD;&#xA;    DataRow row = discharge8DaysRaw.NewRow();&#xD;&#xA;    row[&quot;DateTime&quot;] = point.Timestamp.DateTime.ToOADate();&#xD;&#xA;    row[&quot;Value&quot;] = (point.Value.HasValue) ? point.Value.Value : double.NaN;&#xD;&#xA;    discharge8DaysRaw.Rows.Add(row);&#xD;&#xA;  }  &#xD;&#xA;  &#xD;&#xA;  request.TimeSeriesUniqueId = inputStage;&#xD;&#xA;  var rawStagePoints = runReportRequest.ReportData.GetTimeSeriesPoints(request).Points;&#xD;&#xA;  &#xD;&#xA;  foreach (var point in rawStagePoints)&#xD;&#xA;  {&#xD;&#xA;    DataRow row = stage8DaysRaw.NewRow();&#xD;&#xA;    row[&quot;DateTime&quot;] = point.Timestamp.DateTime.ToOADate();&#xD;&#xA;    row[&quot;Value&quot;] = (point.Value.HasValue) ? point.Value.Value : double.NaN;&#xD;&#xA;    stage8DaysRaw.Rows.Add(row);&#xD;&#xA;  }  &#xD;&#xA; &#xD;&#xA;  List&lt;CorrectionNoteItem&gt; correctionNoteList = new List&lt;CorrectionNoteItem&gt;();&#xD;&#xA;&#xD;&#xA;  AddCorrectionsAndNotes(publish, timeSeriesUniqueId, &quot;Q&quot;, correctionNoteList);&#xD;&#xA;  AddCorrectionsAndNotes(publish, inputStage, &quot;HG&quot;, correctionNoteList);&#xD;&#xA;  &#xD;&#xA;  correctionNoteList.Sort((x, y) =&gt; y.DateAppliedUtc.CompareTo(x.DateAppliedUtc));&#xD;&#xA;  &#xD;&#xA;  int numberOfCorrectionsToShow = 8;&#xD;&#xA;  for(int i = 0; i &lt; numberOfCorrectionsToShow; i++)&#xD;&#xA;    correctionsTable.Rows.Add(correctionsTable.NewRow());&#xD;&#xA;&#xD;&#xA;  int correctionRow = 0;&#xD;&#xA;  DateTimeOffsetInterval correctionDateTimeInterval = new DateTimeOffsetInterval(null, ReportTime);&#xD;&#xA;&#xD;&#xA;  foreach(CorrectionNoteItem item in correctionNoteList)&#xD;&#xA;  {&#xD;&#xA;    DateTimeOffset correctionAppliedTime = item.DateAppliedUtc;&#xD;&#xA;    if (!TimeRangeOverlaps(correctionAppliedTime, correctionAppliedTime, correctionDateTimeInterval))&#xD;&#xA;      continue;&#xD;&#xA;    &#xD;&#xA;    if (correctionRow &gt;= numberOfCorrectionsToShow)&#xD;&#xA;      break;&#xD;&#xA;    &#xD;&#xA;    DataRow row = correctionsTable.Rows[correctionRow];&#xD;&#xA;    row[&quot;SignalType&quot;] = item.SignalType;&#xD;&#xA;    row[&quot;Applied&quot;] = correctionAppliedTime.ToString(&quot;yyyy-MM-dd&quot;);&#xD;&#xA;    row[&quot;Type&quot;] = item.Type;&#xD;&#xA;    row[&quot;Comment&quot;] = item.Comment;&#xD;&#xA;    correctionRow++;&#xD;&#xA;  }&#xD;&#xA;    &#xD;&#xA;  FieldVisitDataByLocationServiceRequest fdRequest = new FieldVisitDataByLocationServiceRequest();&#xD;&#xA;  fdRequest.LocationIdentifier = locationIdentifier;&#xD;&#xA;  fdRequest.Activities = new List&lt;ActivityType&gt; {ActivityType.DischargeSummary};&#xD;&#xA;  FieldVisitDataByLocationServiceResponse fdResponse = publish.Get(fdRequest);&#xD;&#xA;  List&lt;FieldVisit&gt; fieldVisitData = fdResponse.FieldVisitData;&#xD;&#xA;  &#xD;&#xA;  try&#xD;&#xA;  {&#xD;&#xA;    fieldVisitData.Sort((x, y) =&gt; y.StartTime.Value.CompareTo(x.StartTime.Value));&#xD;&#xA;  }&#xD;&#xA;  catch {}&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;  DateTimeOffsetInterval dischargeChartInterval = new DateTimeOffsetInterval(ReportTime.AddYears(-1).AddDays(-1), ReportTime);&#xD;&#xA;  foreach (FieldVisit fieldVisit in fieldVisitData)&#xD;&#xA;  {&#xD;&#xA;    if (!TimeRangeOverlaps(fieldVisit.StartTime.Value, fieldVisit.StartTime.Value, dischargeChartInterval))&#xD;&#xA;      continue; &#xD;&#xA;    &#xD;&#xA;    if (fieldVisit.DischargeActivities == null) continue;&#xD;&#xA;       &#xD;&#xA;    foreach (DischargeActivity dischargeActivity in fieldVisit.DischargeActivities)&#xD;&#xA;    {&#xD;&#xA;      if (dischargeActivity.DischargeSummary == null) continue;&#xD;&#xA;      &#xD;&#xA;      DischargeSummary dischargeSummary = dischargeActivity.DischargeSummary;&#xD;&#xA;&#xD;&#xA;      if (!dischargeSummary.Publish || !dischargeSummary.IsValid) continue;&#xD;&#xA;&#xD;&#xA;      if (dischargeSummary.Discharge.Numeric.HasValue)&#xD;&#xA;      {&#xD;&#xA;        DataRow row = dischargeMeasurementPoints.NewRow();&#xD;&#xA;        row[&quot;DateTime&quot;] = dischargeSummary.MeasurementTime.DateTime.ToOADate();&#xD;&#xA;        row[&quot;Discharge&quot;] = dischargeSummary.Discharge.Numeric;&#xD;&#xA;        dischargeMeasurementPoints.Rows.Add(row);&#xD;&#xA;      }   &#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  try&#xD;&#xA;  {&#xD;&#xA;    RatingCurveListServiceRequest ratingCurveListRequest = new RatingCurveListServiceRequest();&#xD;&#xA;    ratingCurveListRequest.RatingModelIdentifier = ratingModelIdentifier;&#xD;&#xA;    ratingCurveListRequest.QueryFrom = ReportTime;&#xD;&#xA;    ratingCurveListRequest.QueryTo = ReportTime;&#xD;&#xA;    &#xD;&#xA;    RatingCurveListServiceResponse ratingCurveResponse = publish.Get(ratingCurveListRequest);&#xD;&#xA;  &#xD;&#xA;    if (ratingCurveResponse.RatingCurves.Count &gt; 0)&#xD;&#xA;    {&#xD;&#xA;  &#xD;&#xA;      RatingCurve curve = ratingCurveResponse.RatingCurves[0];&#xD;&#xA;      PeriodOfApplicability curvePeriod = null;&#xD;&#xA;      foreach (PeriodOfApplicability period in curve.PeriodsOfApplicability)&#xD;&#xA;      {&#xD;&#xA;        if (period.StartTime &lt;= ReportTime &amp;&amp; period.EndTime &gt;= ReportTime)&#xD;&#xA;        {&#xD;&#xA;          curvePeriod = period;&#xD;&#xA;          break;&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      Log.DebugFormat(&quot;curveperiod start = {0}, curvePeriod end = {1}&quot;, curvePeriod.StartTime, curvePeriod.EndTime);&#xD;&#xA;  &#xD;&#xA;      DateTimeOffsetInterval curveInterval = new DateTimeOffsetInterval(curvePeriod.StartTime, &#xD;&#xA;        (curvePeriod.EndTime &lt; DateTimeOffset.MaxValue) ? (DateTimeOffset?) curvePeriod.EndTime : null);&#xD;&#xA;  &#xD;&#xA;      foreach (FieldVisit fieldVisit in fieldVisitData)&#xD;&#xA;      {&#xD;&#xA;        if (!TimeRangeOverlaps(fieldVisit.StartTime.Value, fieldVisit.StartTime.Value, curveInterval))&#xD;&#xA;          continue; &#xD;&#xA;    &#xD;&#xA;        if (fieldVisit.DischargeActivities == null) continue;&#xD;&#xA;       &#xD;&#xA;        foreach (DischargeActivity dischargeActivity in fieldVisit.DischargeActivities)&#xD;&#xA;        {&#xD;&#xA;          if (dischargeActivity.DischargeSummary == null) continue;&#xD;&#xA;      &#xD;&#xA;          DischargeSummary dischargeSummary = dischargeActivity.DischargeSummary;&#xD;&#xA;      &#xD;&#xA;          if (!dischargeSummary.Publish || !dischargeSummary.IsValid) continue;&#xD;&#xA;      &#xD;&#xA;          if (dischargeSummary.Discharge.Numeric.HasValue &amp;&amp; dischargeSummary.MeanGageHeight.Numeric.HasValue)&#xD;&#xA;          {&#xD;&#xA;            DataRow row = ratingMeasurementsTable.NewRow();&#xD;&#xA;            row[&quot;Stage&quot;] = dischargeSummary.MeanGageHeight.Numeric;&#xD;&#xA;            row[&quot;Discharge&quot;] = dischargeSummary.Discharge.Numeric;&#xD;&#xA;            ratingMeasurementsTable.Rows.Add(row);&#xD;&#xA;          }   &#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      EffectiveRatingCurveServiceRequest effectiveRequest = new EffectiveRatingCurveServiceRequest();&#xD;&#xA;      effectiveRequest.RatingModelIdentifier = ratingModelIdentifier;&#xD;&#xA;      effectiveRequest.StepSize = tableIncrement;    &#xD;&#xA;      effectiveRequest.EffectiveTime = ReportTime;&#xD;&#xA;        &#xD;&#xA;      if (curve.Type == RatingCurveType.StandardEquation)&#xD;&#xA;      {&#xD;&#xA;        effectiveRequest.StartValue = 0.0;&#xD;&#xA;        effectiveRequest.EndValue = 100.0 * tableIncrement;&#xD;&#xA;      }&#xD;&#xA;  &#xD;&#xA;      EffectiveRatingCurveServiceResponse response = publish.Get(effectiveRequest);&#xD;&#xA;    &#xD;&#xA;      string effectiveRatingCurveId = response.ExpandedRatingCurve.Id;&#xD;&#xA;      if (curve.Id != effectiveRatingCurveId)&#xD;&#xA;        Log.InfoFormat(&quot;Mismatched rating curve Id, curve = {0}, effectiveCurve = {1}, effectiveTime = {2}&quot;, &#xD;&#xA;          curve.Id, effectiveRatingCurveId, ReportTime);&#xD;&#xA;      List&lt;RatingPoint&gt; basePoints = response.ExpandedRatingCurve.BaseRatingTable;&#xD;&#xA;      List&lt;RatingPoint&gt; adjustedPoints = response.ExpandedRatingCurve.AdjustedRatingTable;&#xD;&#xA;    &#xD;&#xA;      foreach(RatingPoint point in adjustedPoints)&#xD;&#xA;      {&#xD;&#xA;        if (point.InputValue.HasValue &amp;&amp; point.OutputValue.HasValue)&#xD;&#xA;        {&#xD;&#xA;          DataRow row = adjustedRatingPoints.NewRow();&#xD;&#xA;          row[&quot;Stage&quot;] = point.InputValue.Value;&#xD;&#xA;          row[&quot;Discharge&quot;] = point.OutputValue.Value;&#xD;&#xA;          adjustedRatingPoints.Rows.Add(row);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  catch {}&#xD;&#xA;  &#xD;&#xA;  Log.Debug(&quot;End Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception exp)&#xD;&#xA;{&#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  string dllName = (string) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;];&#xD;&#xA;  Log.Error(&quot;Document GenerateScript - &quot; + dllName, exp);&#xD;&#xA;  Log.Info(GetData(&quot;ReportTables.RunReportRequest.ReportInputInformation&quot;));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;"><Parameters type="PerpetuumSoft.Reporting.DOM.ParameterCollection" id="2" /><PageContent type="PerpetuumSoft.Reporting.DOM.Wrappers.ContentParametersDictionary" id="3" /><Pages type="PerpetuumSoft.Reporting.DOM.PageCollection" id="4"><Item type="PerpetuumSoft.Reporting.DOM.Page" id="5" Margins="75; 75; 150; 150" Size="3300;2550" StyleName="Normal" Name="page1" Location="0;0" PaperKind="Letter" Orientation="Landscape"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="6" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="7"><Item type="PerpetuumSoft.Reporting.DOM.PageHeader" id="8" StyleName="PageHeader" Location="0;75" Name="pageHeader" Size="3300;581.25"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="9" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="10"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="11" Location="112.5;0" Size="3037.5;112.5" Name="textBoxPageHeader1" ExportToCsv="false" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="12" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="13"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="14" Expression="GetData(&quot;ReportTables.ReportData.PageHeader1&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="15" value="Aquatic Informatics Data Management Software" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="16" Size="12" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="17" Location="112.5;75" Size="3037.5;75" Name="textBoxPageHeader2" StyleName="PageHeader" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="18" Color="0, 131, 215" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="19"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="20" Expression="GetData(&quot;ReportTables.ReportData.PageHeader2&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="21" value="Faster Analysis. Better Decisions." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="22" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Picture" id="23" Location="150;0" Size="859.375;250" SizeMode="Uniform" Name="logo" StyleName="PageHeader" GenerateScript="var encodedImage = GetData(&quot;ReportTables.OrganizationIcon.EncodedImage&quot;) as string;&#xD;&#xA;var bytes = Convert.FromBase64String(encodedImage);&#xD;&#xA;&#xD;&#xA;using (var memoryStream = new System.IO.MemoryStream(bytes))&#xD;&#xA;{&#xD;&#xA;  logo.Image = new System.Drawing.Bitmap(&#xD;&#xA;    System.Drawing.Image.FromStream(memoryStream));&#xD;&#xA;}" ExportAsPictureInXaml="false"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="24"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="25" Expression="GetData(&quot;ReportTables.OrganizationIcon.SupportUrl&quot;)" PropertyName="Hyperlink" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="26" Location="0;281.25" Size="3300;118.11023712158203" Name="textBoxPageHeaderLine" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="27" TopLine="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="28" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="29" Location="150;300" Size="1500;75" Name="reportTitle" StyleName="PageHeader" GenerateScript="reportTitle.Document.Title = ReportTitle;" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="30" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="31"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="32" Expression="ReportTitle" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="33" value="Wind Rose" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="34" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="35" Location="150;356.25" Size="1500;56.25" Name="textBoxSubTitle" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="36" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="37"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="38" Expression="GetData(&quot;ReportTables.ReportData.ReportSubTitle&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="39" value="Title" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="40" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="41" Location="2418.75;300" Size="731.25;75" Name="textBoxPageNumber" StyleName="PageNumber" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="42" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="43"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="44" Expression="Now.ToString(&quot;MMM d, yyyy&quot;) + &quot; | &quot; + PageNumber.ToString() + &quot; of &quot; + PageCount.ToString()" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="45" value="DISCLAIMER: The accuracy and reliability of this data is not guaranteed. Aquatic Informatics Inc. accepts no liability for its use in any way. It is the responsibility of the reader to establish the suitability of the information provided in this report for any purpose. No warranty expressed or implied is made regarding the accuracy, completeness, currency, relevance or suitability for any particular purpose of the information provided in this report." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="46" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="47" Location="1668.75;356.25" Size="1481.25;56.25" Name="textBoxPeriodSelected" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="48" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="49"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="50" Expression="GetData(&quot;ReportTables.ReportData.PeriodSelectedInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="51" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="52" Location="0;431.25" Size="3300;103.125" Name="textBoxGrayBackground" ExportAsPictureInXaml="false" TextAlign="TopLeft"><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="53" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="54" All="1 Solid 204, 204, 204" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="55" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="56" Location="150;431.25" Size="2606.25;56.25" Name="textBoxInformation1" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="57" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="58"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="59" Expression="&quot;Source Data: &quot; + GetData(&quot;ReportTables.SourceData.TimeSeriesInformation&quot;).ToString()" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="60" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="61" Location="150;468.75" Size="2606.25;56.25" Name="textBoxInformation2" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="62" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="63"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="64" Expression="GetData(&quot;ReportTables.SourceData.TimeSeriesTimeRangeInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="65" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="66" Location="2737.5;431.25" Size="393.75;56.25" Name="textBoxUnitInformation" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="67" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="68"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="69" Expression="&quot;Units: &quot; + OutputParameterUnitSymbol" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="70" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="71" Location="0;712.5" Size="3300;150" Name="detail4"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="72" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="73"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="74" Location="1800;93.75" Size="1350;56.25" Name="textBox1" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="75" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="76"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="77" Expression="&quot;Last 8 Corrections and Notes&quot;" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="78" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="79" Location="150;93.75" Size="1631.25;56.25" Name="textBox3" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="80" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="81"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="82" Expression="OutputParameter + &quot; (&quot; + OutputParameterUnitSymbol + &quot;) since start of &quot; + ReportTime.ToString(&quot;yyyy&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="83" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="84" Location="806.25;18.75" Size="1631.25;56.25" Name="textBox15" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="85" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="86"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="87" Expression="GetData(&quot;ReportTables.SourceDataLocation.LocationIdentifier&quot;) + &quot; &quot; +&#xD;&#xA;GetData(&quot;ReportTables.SourceDataLocation.LocationName&quot;) + &quot; &quot; +&#xD;&#xA;ReportTime.ToString(&quot;yyyy-MM-dd&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="88" Strikeout="Off" Italic="Off" Bold="On" FamilyName="Calibri" Underline="Off" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="89" /></Item><Item type="PerpetuumSoft.Reporting.DOM.SideBySide" id="90" CanGrow="true" CanShrink="true" Location="0;937.5" Name="sideBySide1" Size="3300;993.75"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="91" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="92"><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="93" Location="0;393.75" CanGrow="true" Size="3300;543.75" Name="detail2"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="94" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="95"><Item type="PerpetuumSoft.Reporting.MSChart.MicrosoftChart" id="96" Location="150;0" BorderlineColor="Silver" BorderlineDashStyle="Solid" Size="1631.25;506.25" BorderlineWidth="3" GenerateScript="// Chart GenerateScript&#xD;&#xA;//&#xD;&#xA;DrawDischargeChart(microsoftChart1);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" Name="microsoftChart1"><ChartAreas type="System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection" id="97"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea" id="98" Name="ChartArea1" BackImage=""><InnerPlotPosition type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="99" /><Area3DStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea3DStyle" id="100" /><CursorY type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="101" /><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="102" /><AxisX2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="103" Name="Secondary X axis"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="104" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="105" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="106" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="107" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="108" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="109" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="110" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="111" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="112" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="113" /></AxisX2><AxisY2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="114" Name="Secondary Y (Value) axis"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="115" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="116" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="117" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="118" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="119" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="120" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="121" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="122" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="123" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="124" /></AxisY2><AxisX type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="125" Name="X axis" LabelAutoFitMaxFontSize="8" TitleForeColor="51, 51, 51" LineColor="51, 51, 51" TitleFont="Calibri, 8pt" IsStartedFromZero="false"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="126" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="127" Enabled="true" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="51, 51, 51" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="128" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="129" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="130" ForeColor="51, 51, 51" Font="Calibri, 8pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="131" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="132" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="133" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="134" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="135" /></AxisX><AxisY type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="136" Name="Y (Value) axis" LabelAutoFitMaxFontSize="8" TitleForeColor="51, 51, 51" LineColor="51, 51, 51" TitleFont="Calibri, 8pt"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="137" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="51, 51, 51" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="138" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="51, 51, 51" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="139" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="140" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="141" ForeColor="51, 51, 51" Font="Calibri, 8pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="142" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="Silver" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="143" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="144" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="145" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="146" /></AxisY><CursorX type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="147" /></Item></ChartAreas><BorderSkin type="PerpetuumSoft.Reporting.MSChart.ChartModel.BorderSkin" id="148" BackHatchStyle="None" BackImageAlignment="TopLeft" BorderDashStyle="NotSet" BackImageWrapMode="Tile" BackGradientStyle="None" SkinStyle="None" BackImage="" /><Legends type="System.Windows.Forms.DataVisualization.Charting.LegendCollection" id="149"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Legend" id="150" IsTextAutoFit="false" Docking="Top" BackImage="" Name="Legend1"><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="151" /><CellColumns type="System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection" id="152" /><CustomItems type="System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" id="153" /></Item></Legends><Titles type="System.Windows.Forms.DataVisualization.Charting.TitleCollection" id="154" /><PaletteCustomColors type="System.Drawing.Color[]" id="155" elementtype="System.Drawing.Color" length="0" /><Images type="System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection" id="156" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="157" /><Series type="System.Windows.Forms.DataVisualization.Charting.SeriesCollection" id="158" /><Annotations type="System.Windows.Forms.DataVisualization.Charting.AnnotationCollection" id="159" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="160" /></Item><Item type="PerpetuumSoft.Reporting.DOM.DataBand" id="161" Location="0;56.25" CanGrow="true" Size="3300;281.25" Name="dataBand1" CanShrink="true" ColumnsGap="0" DataSource="ReportTables.Corrections"><Sort type="PerpetuumSoft.Reporting.DOM.DataBandSortCollection" id="162" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="163"><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="164" Location="0;168.75" CanGrow="true" Size="3300;56.25" CanShrink="true" Name="detail1"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="165" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="166"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="167" Location="1800;0" Size="243.75;56.25" Name="textBox2" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="168" Color="51, 51, 51" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="169" All="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="170"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="171" Expression="dataBand1[&quot;Applied&quot;]" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="172" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="173" Location="2043.75;0" Size="281.25;56.25" Name="textBox4" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="174" Color="51, 51, 51" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="169" All="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="175"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="176" Expression="dataBand1[&quot;Type&quot;]" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="177" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="178" Location="2325;0" Size="112.5;56.25" Name="textBox5" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="179" Color="51, 51, 51" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="169" All="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="180"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="181" Expression="dataBand1[&quot;SignalType&quot;]" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="182" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="183" Location="2437.5;0" Size="712.5;56.25" Margins="0; 0; 18.75; 0" Name="textBox6" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="184" Color="51, 51, 51" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="169" All="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="185"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="186" Expression="dataBand1[&quot;Comment&quot;]" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="187" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="188" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Header" id="189" Location="0;56.25" Size="3300;56.25" Name="header1" StyleName="Header1"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="190" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="191"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="192" Location="1800;0" Size="1350;56.25" Name="textBox11" ExportAsPictureInXaml="false" TextAlign="TopLeft"><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="193" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="54" All="1 Solid 204, 204, 204" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="194" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="195" Location="1800;0" Size="243.75;56.25" Name="textBox7" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="196" Color="51, 51, 51" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="169" All="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="197"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="198" Expression="&quot;Applied&quot;" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="199" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="200" Location="2043.75;0" Size="281.25;56.25" Name="textBox8" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="201" Color="51, 51, 51" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="169" All="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="202"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="203" Expression="&quot;Type&quot;" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="204" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="205" Location="2325;0" Size="112.5;56.25" Name="textBox9" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="206" Color="51, 51, 51" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="169" All="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="207"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="208" Expression="&quot;Data&quot;" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="209" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="210" Location="2437.5;0" Size="712.5;56.25" Name="textBox10" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="211" Color="51, 51, 51" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="169" All="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="212"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="213" Expression="&quot;Comment&quot;" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="214" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="215" /></Item></Controls><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="216" /><Totals type="PerpetuumSoft.Reporting.DOM.DataBandTotalCollection" id="217" /><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="218" /></Item></Controls></Item><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="219" Location="0;1987.5" Size="3300;937.5" Name="detail3"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="220" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="221"><Item type="PerpetuumSoft.Reporting.MSChart.MicrosoftChart" id="222" Location="150;56.25" BorderlineColor="Silver" BorderlineDashStyle="Solid" Size="1631.25;862.5" BorderlineWidth="3" GenerateScript="// Chart GenerateScript&#xD;&#xA;//&#xD;&#xA;DrawRatingChart(microsoftChart2);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" Name="microsoftChart2"><ChartAreas type="System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection" id="223"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea" id="224" Name="ChartArea1" BackImage=""><InnerPlotPosition type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="225" /><Area3DStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea3DStyle" id="226" /><CursorY type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="227" /><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="228" /><AxisX2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="229" Name="Secondary X axis"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="230" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="231" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="232" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="233" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="234" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="235" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="236" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="237" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="238" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="239" /></AxisX2><AxisY2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="240" Name="Secondary Y (Value) axis"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="241" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="242" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="243" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="244" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="245" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="246" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="247" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="248" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="249" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="250" /></AxisY2><AxisX type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="251" Name="X axis" LabelAutoFitMaxFontSize="8" TitleForeColor="51, 51, 51" LineColor="51, 51, 51" TitleFont="Calibri, 8pt" IsStartedFromZero="false"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="252" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="253" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="254" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="255" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="256" ForeColor="51, 51, 51" Font="Calibri, 8pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="257" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="258" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="259" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="260" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="261" /></AxisX><AxisY type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="262" Name="Y (Value) axis" LabelAutoFitMaxFontSize="8" TitleForeColor="51, 51, 51" LineColor="51, 51, 51" TitleFont="Calibri, 8pt" IsStartedFromZero="false"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="263" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="264" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="265" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="266" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="267" ForeColor="51, 51, 51" Font="Calibri, 8pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="268" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="269" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="270" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="271" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="272" /></AxisY><CursorX type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="273" /></Item></ChartAreas><BorderSkin type="PerpetuumSoft.Reporting.MSChart.ChartModel.BorderSkin" id="274" BackHatchStyle="None" BackImageAlignment="TopLeft" BorderDashStyle="NotSet" BackImageWrapMode="Tile" BackGradientStyle="None" SkinStyle="None" BackImage="" /><Legends type="System.Windows.Forms.DataVisualization.Charting.LegendCollection" id="275"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Legend" id="276" IsTextAutoFit="false" Docking="Top" BackImage="" Name="Legend1"><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="277" /><CellColumns type="System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection" id="278" /><CustomItems type="System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" id="279" /></Item></Legends><Titles type="System.Windows.Forms.DataVisualization.Charting.TitleCollection" id="280" /><PaletteCustomColors type="System.Drawing.Color[]" id="281" elementtype="System.Drawing.Color" length="0" /><Images type="System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection" id="282" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="283" /><Series type="System.Windows.Forms.DataVisualization.Charting.SeriesCollection" id="284" /><Annotations type="System.Windows.Forms.DataVisualization.Charting.AnnotationCollection" id="285" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="286" Location="150;0" Size="1631.25;56.25" Name="textBox12" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="287" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="288"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="289" Expression="&quot;Rating (&quot; + InputParameter + &quot;(&quot; + InputParameterUnitSymbol + &quot;) against &quot; + OutputParameter + &quot;(&quot; + OutputParameterUnitSymbol + &quot;))&quot;" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="290" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.MSChart.MicrosoftChart" id="291" Location="1800;56.25" BorderlineColor="Silver" BorderlineDashStyle="Solid" Size="1350;393.75" BorderlineWidth="3" GenerateScript="// Chart GenerateScript&#xD;&#xA;//&#xD;&#xA;Draw8Days(microsoftChart3, &quot;Stage&quot;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" Name="microsoftChart3"><ChartAreas type="System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection" id="292"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea" id="293" Name="ChartArea1" BackImage=""><InnerPlotPosition type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="294" /><Area3DStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea3DStyle" id="295" /><CursorY type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="296" /><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="297" /><AxisX2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="298" Name="Secondary X axis"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="299" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="300" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="301" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="302" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="303" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="304" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="305" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="306" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="307" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="308" /></AxisX2><AxisY2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="309" Name="Secondary Y (Value) axis"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="310" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="311" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="312" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="313" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="314" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="315" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="316" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="317" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="318" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="319" /></AxisY2><AxisX type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="320" Name="X axis" LabelAutoFitMaxFontSize="8" TitleForeColor="51, 51, 51" LineColor="51, 51, 51" TitleFont="Calibri, 8pt" IsStartedFromZero="false"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="321" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="322" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="323" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="324" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="325" ForeColor="51, 51, 51" Font="Calibri, 8pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="326" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="327" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="328" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="329" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="330" /></AxisX><AxisY type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="331" Name="Y (Value) axis" LabelAutoFitMaxFontSize="8" TitleForeColor="51, 51, 51" LineColor="51, 51, 51" TitleFont="Calibri, 8pt"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="332" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="333" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="334" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="335" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="336" ForeColor="51, 51, 51" Font="Calibri, 8pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="337" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="338" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="339" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="340" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="341" /></AxisY><CursorX type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="342" /></Item></ChartAreas><BorderSkin type="PerpetuumSoft.Reporting.MSChart.ChartModel.BorderSkin" id="343" BackHatchStyle="None" BackImageAlignment="TopLeft" BorderDashStyle="NotSet" BackImageWrapMode="Tile" BackGradientStyle="None" SkinStyle="None" BackImage="" /><Legends type="System.Windows.Forms.DataVisualization.Charting.LegendCollection" id="344"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Legend" id="345" IsTextAutoFit="false" Font="Calibri, 7.25pt" BackImage="" ForeColor="51, 51, 51" Name="Legend1"><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="346" /><CellColumns type="System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection" id="347" /><CustomItems type="System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" id="348" /></Item></Legends><Titles type="System.Windows.Forms.DataVisualization.Charting.TitleCollection" id="349" /><PaletteCustomColors type="System.Drawing.Color[]" id="350" elementtype="System.Drawing.Color" length="0" /><Images type="System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection" id="351" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="352" /><Series type="System.Windows.Forms.DataVisualization.Charting.SeriesCollection" id="353" /><Annotations type="System.Windows.Forms.DataVisualization.Charting.AnnotationCollection" id="354" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="355" Location="1800;0" Size="1350;56.25" Name="textBox13" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="356" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="357"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="358" Expression="InputParameter + &quot; (&quot; + InputParameterUnitSymbol + &quot;) last 8 days&quot;" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="359" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="360" Location="1800;468.75" Size="1350;56.25" Name="textBox14" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="361" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="362"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="363" Expression="OutputParameter + &quot; (&quot; + OutputParameterUnitSymbol + &quot;) last 8 days&quot;" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="364" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.MSChart.MicrosoftChart" id="365" Location="1800;525" BorderlineColor="Silver" BorderlineDashStyle="Solid" Size="1350;393.75" BorderlineWidth="3" GenerateScript="// Chart GenerateScript&#xD;&#xA;//&#xD;&#xA;Draw8Days(microsoftChart4, &quot;Discharge&quot;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" Name="microsoftChart4"><ChartAreas type="System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection" id="366"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea" id="367" Name="ChartArea1" BackImage=""><InnerPlotPosition type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="368" /><Area3DStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea3DStyle" id="369" /><CursorY type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="370" /><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="371" /><AxisX2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="372" Name="Secondary X axis"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="373" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="374" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="375" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="376" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="377" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="378" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="379" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="380" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="381" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="382" /></AxisX2><AxisY2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="383" Name="Secondary Y (Value) axis"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="384" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="385" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="386" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="387" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="388" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="389" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="390" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="391" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="392" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="393" /></AxisY2><AxisX type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="394" Name="X axis" LabelAutoFitMaxFontSize="8" TitleForeColor="51, 51, 51" LineColor="51, 51, 51" TitleFont="Calibri, 8pt" IsStartedFromZero="false"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="395" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="396" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="397" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="398" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="399" ForeColor="51, 51, 51" Font="Calibri, 8pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="400" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="401" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="402" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="403" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="404" /></AxisX><AxisY type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="405" Name="Y (Value) axis" LabelAutoFitMaxFontSize="8" TitleForeColor="51, 51, 51" LineColor="51, 51, 51" TitleFont="Calibri, 8pt"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="406" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="407" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="408" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="409" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="410" ForeColor="51, 51, 51" Font="Calibri, 8pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="411" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="412" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="413" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="414" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="415" /></AxisY><CursorX type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="416" /></Item></ChartAreas><BorderSkin type="PerpetuumSoft.Reporting.MSChart.ChartModel.BorderSkin" id="417" BackHatchStyle="None" BackImageAlignment="TopLeft" BorderDashStyle="NotSet" BackImageWrapMode="Tile" BackGradientStyle="None" SkinStyle="None" BackImage="" /><Legends type="System.Windows.Forms.DataVisualization.Charting.LegendCollection" id="418"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Legend" id="419" IsTextAutoFit="false" Font="Calibri, 7.25pt" BackImage="" ForeColor="51, 51, 51" Name="Legend1"><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="420" /><CellColumns type="System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection" id="421" /><CustomItems type="System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" id="422" /></Item></Legends><Titles type="System.Windows.Forms.DataVisualization.Charting.TitleCollection" id="423" /><PaletteCustomColors type="System.Drawing.Color[]" id="424" elementtype="System.Drawing.Color" length="0" /><Images type="System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection" id="425" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="426" /><Series type="System.Windows.Forms.DataVisualization.Charting.SeriesCollection" id="427" /><Annotations type="System.Windows.Forms.DataVisualization.Charting.AnnotationCollection" id="428" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="429" /></Item><Item type="PerpetuumSoft.Reporting.DOM.PageFooter" id="430" StyleName="PageFooter" Location="0;3000" Name="pageFooter" Size="3300;150"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="431" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="432"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="433" Location="0;0" Size="3300;29.528125762939453" Name="textBoxPageFooterLine" ExportAsPictureInXaml="false"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="434" Color="110, 112, 110" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="27" TopLine="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="435" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="436" Location="168.75;0" Size="2981.25;131.25" CanGrow="true" Name="textBoxPageFooter1" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="BottomLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="437" Color="110, 112, 110" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="438"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="439" Expression="GetData(&quot;ReportTables.ReportData.FooterDisclaimer&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="440" value="DISCLAIMER - AQUARIUS is the leading software suite to acquire, process, model, and publish water data. Environmental monitoring agencies worldwide trust AQUARIUS to produce accurate water information in real-time. A modern design delivers the latest water science in an intuitive experience." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="441" Size="7" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Picture" id="442" Location="2681.25;18.75" Size="487.5;131.25" Name="logo2" Visible="false" ExportAsPictureInXaml="false"><Image type="System.Drawing.Bitmap" id="443"></Image><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="444" /></Item></Controls></Item></Controls></Item></Pages><DataSources type="PerpetuumSoft.Reporting.Data.DocumentDataSourceCollection" id="445" /><StyleSheet type="PerpetuumSoft.Reporting.DOM.StyleSheet" id="446"><Styles type="PerpetuumSoft.Reporting.DOM.StyleCollection" id="447"><Item type="PerpetuumSoft.Reporting.DOM.Style" id="448" Name="HeaderFooter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="449" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="450" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="451" Name="HeaderFooter1"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="452" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="453" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="454" Name="HeaderFooter2"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="455" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="456" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="457" Name="HeaderFooter3"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="458" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="459" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="460" Name="Even"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="461" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="462" Size="9" FamilyName="Calibri" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="463" Name="Odd"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="464" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="465" Size="9" FamilyName="Calibri" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="466" Color="Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="467" Name="Normal"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="468" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="469" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="470" Name="TableHeader"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="471" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="472" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="473" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="169" All="1 Solid Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="474" Name="TableCell"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="475" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="476" Size="8" FamilyName="Calibri" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="169" All="1 Solid Silver" /></Item></Styles></StyleSheet></root>