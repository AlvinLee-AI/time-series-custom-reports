<?xml version="1.0" encoding="utf-8" standalone="yes"?><root type="PerpetuumSoft.Reporting.DOM.Document" id="1" version="2" Name="USGSReservoir" IsTemplate="true" Title="USGS Reservoir" ImportsString="USGSReservoirNamespace&#xD;&#xA;ReportPluginFramework.Properties&#xD;&#xA;ReportPluginFramework&#xD;&#xA;ReportPluginFramework.ReportData&#xD;&#xA;System.Linq&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesComputedStatistics&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesData&#xD;&#xA;System.Collections.Generic&#xD;&#xA;System.Data&#xD;&#xA;Server.Services.PublishService.ServiceModel.Dtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.RequestDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.ResponseDtos&#xD;&#xA;Server.BusinessObjects.Reporting" DocumentGuid="52b99bec-d788-4326-8bf5-e90a16499652" DoublePass="true" CommonScript="// Common functions, variables and defaults&#xD;&#xA;//&#xD;&#xA;&#xD;&#xA;public string RatingModelIdentifier = &quot;&quot;;&#xD;&#xA;public string StageUnit = &quot;&quot;;&#xD;&#xA;public string ReportTitle = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;public Guid TimeSeriesUniqueId;&#xD;&#xA;&#xD;&#xA;public string ReportPeriod = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;public bool StageFormatType = true;&#xD;&#xA;public int StageFormatPlaces = 2;&#xD;&#xA;public bool TotalStorageFormatType = false;&#xD;&#xA;public int TotalStorageFormatPlaces = 3;&#xD;&#xA;public string MissingStr = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;public bool MIN = true;&#xD;&#xA;public bool MAX = false;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;public int [] GetInstIndex(List&lt;ReportPluginFramework.ReportData.TimeSeriesData.TimeSeriesPoint&gt; inputPoints,&#xD;&#xA;  bool extrema, DateTimeOffset theStartTime, DateTimeOffset [] binEnds)&#xD;&#xA;{&#xD;&#xA;  int[] indexOfExtrema = new int[binEnds.Length];&#xD;&#xA;  for (int i = 0; i &lt; binEnds.Length; i++) indexOfExtrema[i] = -1;&#xD;&#xA;&#xD;&#xA;  if (inputPoints.Count == 0) return indexOfExtrema;&#xD;&#xA;  &#xD;&#xA;  int j = 0;&#xD;&#xA;  &#xD;&#xA;  while ((j &lt; inputPoints.Count) &amp;&amp; (inputPoints[j].Timestamp &lt; theStartTime)) j++;&#xD;&#xA;  &#xD;&#xA;  if (j &gt;= inputPoints.Count) return indexOfExtrema;&#xD;&#xA;  &#xD;&#xA;  for (int i = 0; i &lt; binEnds.Length; i++)&#xD;&#xA;  {&#xD;&#xA;    int currentIndex = -1;&#xD;&#xA;    double currentVal = double.NaN;&#xD;&#xA;    &#xD;&#xA;    for (; j &lt; inputPoints.Count; j++)&#xD;&#xA;    {&#xD;&#xA;      ReportPluginFramework.ReportData.TimeSeriesData.TimeSeriesPoint inputPoint = inputPoints[j];&#xD;&#xA;      &#xD;&#xA;      if (inputPoint.Timestamp &gt; binEnds[i])&#xD;&#xA;        break;&#xD;&#xA;        &#xD;&#xA;      if ((inputPoint.Value.HasValue) &amp;&amp; &#xD;&#xA;        (double.IsNaN(currentVal) || &#xD;&#xA;        ((extrema == MIN) &amp;&amp; (inputPoint.Value.Value &lt; currentVal)) || &#xD;&#xA;        ((extrema == MAX) &amp;&amp; (inputPoint.Value.Value &gt; currentVal))))&#xD;&#xA;      {&#xD;&#xA;        currentIndex = j;&#xD;&#xA;        currentVal = inputPoint.Value.Value;&#xD;&#xA;      }     &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if (currentIndex &gt;= 0) indexOfExtrema[i] = currentIndex;   &#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return indexOfExtrema;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public int [] GetDailyInstIndex(List&lt;ReportPluginFramework.ReportData.TimeSeriesData.TimeSeriesPoint&gt; inputPoints,&#xD;&#xA;  bool extrema, DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{&#xD;&#xA;  DateTimeOffset [] midnights = GetDayEnds(theStartTime, theEndTime);&#xD;&#xA;  return GetInstIndex(inputPoints, extrema, theStartTime, midnights);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double[] GetEffectiveShiftsVector(int [] indexOfDailyExtrema, List&lt;EffectiveShift&gt; effectiveShifts)&#xD;&#xA;{&#xD;&#xA;  int numberOfDays = indexOfDailyExtrema.Length;  &#xD;&#xA;  double [] shifts = new double [numberOfDays];&#xD;&#xA;  for (int i = 0; i &lt; numberOfDays; i++) shifts[i] = double.NaN;&#xD;&#xA;&#xD;&#xA;  for (int i = 0; i &lt; numberOfDays; i++) &#xD;&#xA;  {&#xD;&#xA;    int j = indexOfDailyExtrema[i];&#xD;&#xA;    &#xD;&#xA;    if ((j &gt;= 0) &amp;&amp; (j &lt; effectiveShifts.Count) &amp;&amp; effectiveShifts[j].Value.HasValue)&#xD;&#xA;      shifts[i] = effectiveShifts[j].Value.Value;    &#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return shifts;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double[] GetCorrectionsVector(int [] indexOfDailyExtrema,&#xD;&#xA;  List&lt;ReportPluginFramework.ReportData.TimeSeriesData.TimeSeriesPoint&gt; corrPoints, &#xD;&#xA;  List&lt;ReportPluginFramework.ReportData.TimeSeriesData.TimeSeriesPoint&gt; rawPoints)&#xD;&#xA;{&#xD;&#xA;  int numberOfDays = indexOfDailyExtrema.Length;  &#xD;&#xA;  double [] corrections = new double [numberOfDays];&#xD;&#xA;  for (int i = 0; i &lt; numberOfDays; i++) corrections[i] = double.NaN;&#xD;&#xA;&#xD;&#xA;  int k = 0;&#xD;&#xA;  int rawLen = rawPoints.Count;&#xD;&#xA;  &#xD;&#xA;  for (int i = 0; i &lt; numberOfDays; i++)&#xD;&#xA;  {&#xD;&#xA;    int j = indexOfDailyExtrema[i];&#xD;&#xA;    &#xD;&#xA;    if (j &gt;= 0)&#xD;&#xA;    {&#xD;&#xA;      double corrValue = (corrPoints[j].Value.HasValue) ? corrPoints[j].Value.Value : double.NaN;&#xD;&#xA;      DateTimeOffset corrTime = corrPoints[j].Timestamp;&#xD;&#xA;      &#xD;&#xA;      while ((k &lt; rawLen) &amp;&amp; (rawPoints[k].Timestamp &lt; corrTime)) k++;&#xD;&#xA;      if ((k &lt; rawLen) &amp;&amp; (rawPoints[k].Timestamp == corrTime))&#xD;&#xA;      {&#xD;&#xA;        double rawValue = (rawPoints[k].Value.HasValue) ? rawPoints[k].Value.Value : double.NaN;&#xD;&#xA;      &#xD;&#xA;        if (!double.IsNaN(corrValue) &amp;&amp; !double.IsNaN(rawValue))&#xD;&#xA;          corrections[i] = corrValue - rawValue;&#xD;&#xA;        k++;&#xD;&#xA;      }&#xD;&#xA;    }    &#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return corrections;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double [] GetYearlyAverages(List&lt;TimeAlignedPoint&gt; inputPoints, &#xD;&#xA;  DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{&#xD;&#xA;  DateTimeOffset [] yearEnds = GetYearEnds(theStartTime, theEndTime);&#xD;&#xA;  return GetAverages(inputPoints, theStartTime, yearEnds);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double [] GetMonthlyAverages(List&lt;TimeAlignedPoint&gt; inputPoints, &#xD;&#xA;  DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{&#xD;&#xA;  DateTimeOffset [] monthEnds = GetMonthEnds(theStartTime, theEndTime);&#xD;&#xA;  return GetAverages(inputPoints, theStartTime, monthEnds);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double [] GetDailyAverages(List&lt;TimeAlignedPoint&gt; inputPoints, &#xD;&#xA;  DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{&#xD;&#xA;  DateTimeOffset [] midnights = GetDayEnds(theStartTime, theEndTime);&#xD;&#xA;  return GetAverages(inputPoints, theStartTime, midnights);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double [] GetAverages(List&lt;TimeAlignedPoint&gt; inputPoints, &#xD;&#xA;  DateTimeOffset theStartTime, DateTimeOffset[] binEnds)&#xD;&#xA;{&#xD;&#xA;  double[] averages = new double[binEnds.Length];&#xD;&#xA;  for (int i = 0; i &lt; averages.Length; i++) averages[i] = double.NaN;&#xD;&#xA;&#xD;&#xA;  if (inputPoints.Count == 0) return averages;&#xD;&#xA;  &#xD;&#xA;  int j = 0;&#xD;&#xA;  while ((j &lt; inputPoints.Count) &amp;&amp; (inputPoints[j].Timestamp &lt; theStartTime)) j++;&#xD;&#xA;  if (j &gt;= inputPoints.Count) return averages;&#xD;&#xA;  &#xD;&#xA;  for (int i = 0; i &lt; binEnds.Length; i++)&#xD;&#xA;  {   &#xD;&#xA;    double currentTotal = 0.0;&#xD;&#xA;    int currentCount = 0;&#xD;&#xA;    &#xD;&#xA;    for (; j &lt; inputPoints.Count; j++)&#xD;&#xA;    {&#xD;&#xA;      TimeAlignedPoint inputPoint = inputPoints[j];&#xD;&#xA;      &#xD;&#xA;      if (inputPoint.Timestamp &gt; binEnds[i]) &#xD;&#xA;        break;&#xD;&#xA;      &#xD;&#xA;      if ((inputPoint.NumericValue1.HasValue) &amp;&amp; !double.IsNaN(inputPoint.NumericValue1.Value))&#xD;&#xA;      {&#xD;&#xA;        currentCount++;&#xD;&#xA;        currentTotal += inputPoint.NumericValue1.Value;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    if (currentCount &gt; 0) averages[i] = currentTotal / currentCount;  &#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return averages;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double [] GetMidnightMonthlyAverages(List&lt;TimeAlignedPoint&gt; points, &#xD;&#xA;  DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{&#xD;&#xA;  double [] midnightValues = GetMidnights(points, theStartTime, theEndTime);&#xD;&#xA;  DateTimeOffset [] midnightDateTimeOffsets = GetDayEnds(theStartTime, theEndTime);&#xD;&#xA;  &#xD;&#xA;  DateTimeOffset [] monthEnds = GetMonthEnds(theStartTime, theEndTime);&#xD;&#xA;  &#xD;&#xA;  return GetMidnightAverages(midnightValues, midnightDateTimeOffsets, theStartTime, monthEnds);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double [] GetMidnightYearlyAverages(List&lt;TimeAlignedPoint&gt; points, &#xD;&#xA;  DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{&#xD;&#xA;  double [] midnightValues = GetMidnights(points, theStartTime, theEndTime);&#xD;&#xA;  DateTimeOffset [] midnightDateTimeOffsets = GetDayEnds(theStartTime, theEndTime);&#xD;&#xA;  &#xD;&#xA;  DateTimeOffset [] yearEnds = GetYearEnds(theStartTime, theEndTime);&#xD;&#xA;  &#xD;&#xA;  return GetMidnightAverages(midnightValues, midnightDateTimeOffsets, theStartTime, yearEnds);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double [] GetMidnightAverages(double [] midnightValues, DateTimeOffset [] midnightDateTimeOffsets, &#xD;&#xA;  DateTimeOffset theStartTime, DateTimeOffset[] binEnds)&#xD;&#xA;{&#xD;&#xA;  double[] averages = new double[binEnds.Length];&#xD;&#xA;  for (int i = 0; i &lt; averages.Length; i++) averages[i] = double.NaN;&#xD;&#xA;&#xD;&#xA;  if (midnightValues.Length == 0) return averages;&#xD;&#xA;    &#xD;&#xA;  int j = 0;&#xD;&#xA;  for (int i = 0; i &lt; binEnds.Length; i++)&#xD;&#xA;  {   &#xD;&#xA;    double currentTotal = 0.0;&#xD;&#xA;    int currentCount = 0;&#xD;&#xA;    &#xD;&#xA;    for (; j &lt; midnightValues.Length; j++)&#xD;&#xA;    {&#xD;&#xA;      double midnightValue = midnightValues[j];&#xD;&#xA;      &#xD;&#xA;      if (midnightDateTimeOffsets[j] &gt; binEnds[i]) &#xD;&#xA;        break;&#xD;&#xA;        &#xD;&#xA;      if (!double.IsNaN(midnightValue))&#xD;&#xA;      {&#xD;&#xA;        currentCount++;&#xD;&#xA;        currentTotal += midnightValue;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    if (currentCount &gt; 0) averages[i] = currentTotal / currentCount;  &#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return averages;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;public List&lt;DateTime&gt; Groups = new List&lt;DateTime&gt;();&#xD;&#xA;&#xD;&#xA;public void addGroupTableRows(System.Data.DataTable groupByTable, DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{&#xD;&#xA;  Groups.Clear();&#xD;&#xA;  &#xD;&#xA;  DateTimeOffset time = theStartTime;&#xD;&#xA;  int groupNum = 1;&#xD;&#xA;  while (time &lt; theEndTime)&#xD;&#xA;  {&#xD;&#xA;    System.Data.DataRow row = groupByTable.NewRow();&#xD;&#xA;&#xD;&#xA;    DateTime dt = new DateTime(time.Year, time.Month, 1);&#xD;&#xA;    Groups.Add(dt);&#xD;&#xA;&#xD;&#xA;    row[&quot;GroupBy&quot;] = groupNum++;&#xD;&#xA;    row[&quot;TimeStamp&quot;] = dt;&#xD;&#xA;    groupByTable.Rows.Add(row);&#xD;&#xA;&#xD;&#xA;    time = time.AddMonths(1);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public int GetGroupNumber(DateTimeOffset dateTimeOffset)&#xD;&#xA;{&#xD;&#xA;  DateTime dt = new DateTime(dateTimeOffset.Year, dateTimeOffset.Month, dateTimeOffset.Day);&#xD;&#xA;&#xD;&#xA;  int len = Groups.Count;&#xD;&#xA;  for (int i = 0; i &lt; len; i++)&#xD;&#xA;  {&#xD;&#xA;    if (dt &lt; Groups[i])&#xD;&#xA;      return i;&#xD;&#xA;  }&#xD;&#xA;  return len;&#xD;&#xA;}&#xD;&#xA;public string Format100Value(double value)&#xD;&#xA;{ &#xD;&#xA;  if (double.IsNaN(value)) return MissingStr;&#xD;&#xA;  &#xD;&#xA;  return FormatDoubleValue(value * 100.0, true, 0);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string FormatPointValue(TimeAlignedPoint point,&#xD;&#xA;  bool fix, int places)&#xD;&#xA;{  &#xD;&#xA;  if (!point.NumericValue1.HasValue) return MissingStr;&#xD;&#xA;  &#xD;&#xA;  return FormatDoubleValue(point.NumericValue1.Value, fix, places);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string FormatDoubleValue(double pointValue, bool fix, int places)&#xD;&#xA;{&#xD;&#xA;  return Common.FormatDoubleValue(pointValue, fix, places, MissingStr);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string GetMonthDay(DateTimeOffset time)&#xD;&#xA;{&#xD;&#xA;  if (time == DateTimeOffset.MinValue) return &quot;&quot;;&#xD;&#xA;&#xD;&#xA;  string strDate = time.ToString(&quot;MM-dd&quot;);&#xD;&#xA;  string strHour = time.ToString(&quot;HH:mm&quot;);&#xD;&#xA;  if (!string.IsNullOrEmpty(strHour) &amp;&amp; (strHour == &quot;00:00&quot;))&#xD;&#xA;  {&#xD;&#xA;    strDate = time.AddDays(-1).ToString(&quot;MM-dd&quot;);&#xD;&#xA;  }&#xD;&#xA;  return strDate;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string GetTimeAs24Hours(DateTimeOffset thisDay, DateTimeOffset time)&#xD;&#xA;{&#xD;&#xA;  if (time == DateTimeOffset.MinValue) return &quot;&quot;;&#xD;&#xA;  &#xD;&#xA;  if (thisDay == time)&#xD;&#xA;    return &quot;00:00&quot;;&#xD;&#xA;  &#xD;&#xA;  string strHour = time.ToString(&quot;HH:mm&quot;);&#xD;&#xA;  if (!string.IsNullOrEmpty(strHour) &amp;&amp; (strHour == &quot;00:00&quot;))&#xD;&#xA;  {&#xD;&#xA;    strHour = &quot;24:00&quot;;&#xD;&#xA;  }&#xD;&#xA;  return strHour;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string GetTimeAs24Hours(DateTimeOffset time)&#xD;&#xA;{&#xD;&#xA;  if (time == DateTimeOffset.MinValue) return &quot;&quot;;&#xD;&#xA;  &#xD;&#xA;  string strHour = time.ToString(&quot;HH:mm&quot;);&#xD;&#xA;  if (!string.IsNullOrEmpty(strHour) &amp;&amp; (strHour == &quot;00:00&quot;))&#xD;&#xA;  {&#xD;&#xA;    strHour = &quot;24:00&quot;;&#xD;&#xA;  }&#xD;&#xA;  return strHour;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string GetMonthDayYear24Hours(DateTimeOffset time)&#xD;&#xA;{&#xD;&#xA;  if (time == DateTimeOffset.MinValue) return &quot;&quot;;&#xD;&#xA;&#xD;&#xA;  string strDate = time.ToString(&quot;yyyy-MM-dd HH:mm&quot;);&#xD;&#xA;  string strHour = time.ToString(&quot;HH:mm&quot;);&#xD;&#xA;  if (!string.IsNullOrEmpty(strHour) &amp;&amp; (strHour == &quot;00:00&quot;))&#xD;&#xA;  {&#xD;&#xA;    strDate = time.AddDays(-1).ToString(&quot;yyyy-MM-dd&quot;);&#xD;&#xA;    strDate += &quot; 24:00&quot;;&#xD;&#xA;  }&#xD;&#xA;  return strDate;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;double [] GetMidnights(List&lt;TimeAlignedPoint&gt; points, &#xD;&#xA;  DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{&#xD;&#xA;  DateTimeOffset [] midnights = GetDayEnds(theStartTime, theEndTime);&#xD;&#xA;  &#xD;&#xA;  return interpolateValues(points, midnights);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;double [] GetHourlys(List&lt;TimeAlignedPoint&gt; points, &#xD;&#xA;  DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{&#xD;&#xA;  DateTimeOffset [] hourlys = GetHourlys(theStartTime, theEndTime);&#xD;&#xA;&#xD;&#xA;  return interpolateValues(points, hourlys);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;DateTimeOffset [] GetHourlys(DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{ &#xD;&#xA;  List&lt;DateTimeOffset&gt; hourlys = new List&lt;DateTimeOffset&gt;();&#xD;&#xA;  DateTimeOffset time = theStartTime.AddHours(1);&#xD;&#xA;  while (time &lt;= theEndTime.AddHours(1))&#xD;&#xA;  {&#xD;&#xA;    hourlys.Add(time);&#xD;&#xA;    time = time.AddHours(1);&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return hourlys.ToArray();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;double [] interpolateValues(List&lt;TimeAlignedPoint&gt; points, DateTimeOffset [] theTimes)&#xD;&#xA;{&#xD;&#xA;  double [] interpolatedValues = new double[theTimes.Length];&#xD;&#xA;  for (int i = 0; i &lt; interpolatedValues.Length; i++) interpolatedValues[i] = double.NaN;&#xD;&#xA;  &#xD;&#xA;  int numPoints = points.Count;&#xD;&#xA;  &#xD;&#xA;  int j = 0;&#xD;&#xA;  for (int i = 0; i &lt; interpolatedValues.Length; i++)&#xD;&#xA;  {&#xD;&#xA;    while ((j &lt; points.Count) &amp;&amp; (points[j].Timestamp &lt; theTimes[i])) j++;&#xD;&#xA;    if (j &gt;= points.Count) &#xD;&#xA;      break;&#xD;&#xA;    &#xD;&#xA;    if (j &gt; 0)&#xD;&#xA;    {&#xD;&#xA;      j--;&#xD;&#xA;      if ((points[j].Timestamp &lt;= theTimes[i]) &amp;&amp; (points[j + 1].Timestamp &gt;= theTimes[i]))&#xD;&#xA;      {&#xD;&#xA;        interpolatedValues[i] = calcInterpolatedPointValue(points[j], points[j + 1], theTimes[i]);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return interpolatedValues;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;DateTimeOffset [] GetDayEnds(DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{  &#xD;&#xA;  List&lt;DateTimeOffset&gt; midnights = new List&lt;DateTimeOffset&gt;();&#xD;&#xA;  DateTimeOffset time = theStartTime.AddDays(1);&#xD;&#xA;  while (time &lt;= theEndTime.AddDays(1))&#xD;&#xA;  {&#xD;&#xA;    midnights.Add(time);&#xD;&#xA;    time = time.AddDays(1);&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return midnights.ToArray();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;DateTimeOffset [] GetMonthEnds(DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{  &#xD;&#xA;  List&lt;DateTimeOffset&gt; times = new List&lt;DateTimeOffset&gt;();&#xD;&#xA;  DateTimeOffset time = theStartTime.AddMonths(1);&#xD;&#xA;  while (time &lt;= theEndTime.AddDays(1))&#xD;&#xA;  {&#xD;&#xA;    times.Add(time);&#xD;&#xA;    time = time.AddMonths(1);&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return times.ToArray();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;DateTimeOffset [] GetYearEnds(DateTimeOffset theStartTime, DateTimeOffset theEndTime)&#xD;&#xA;{ &#xD;&#xA;  List&lt;DateTimeOffset&gt; times = new List&lt;DateTimeOffset&gt;();&#xD;&#xA;  DateTimeOffset time = theStartTime.AddYears(1);&#xD;&#xA;  while (time &lt;= theEndTime.AddDays(1))&#xD;&#xA;  {&#xD;&#xA;    times.Add(time);&#xD;&#xA;    time = time.AddYears(1);&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return times.ToArray();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;double calcInterpolatedPointValue(TimeAlignedPoint point1, TimeAlignedPoint point2, DateTimeOffset theX)&#xD;&#xA;{&#xD;&#xA;  double y1 = double.NaN;&#xD;&#xA;  double y2 = double.NaN;&#xD;&#xA;  &#xD;&#xA;  if (goodValuePoint(point1)) y1 = point1.NumericValue1.Value;&#xD;&#xA;  if (goodValuePoint(point2)) y2 = point2.NumericValue1.Value;&#xD;&#xA;  &#xD;&#xA;  return calcInterpolatedValue(point1.Timestamp, y1, point2.Timestamp, y2, theX);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;bool goodValuePoint(TimeAlignedPoint point)&#xD;&#xA;{&#xD;&#xA;  return point.NumericValue1.HasValue; // possible enhancement to check grade code&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;double calcInterpolatedValue(DateTimeOffset x1, double y1, DateTimeOffset x2, double y2, DateTimeOffset theX)&#xD;&#xA;{&#xD;&#xA;//  Log.DebugFormat(&quot;start interpolate: x1 = {0}, y1 = {1}, x2 = {2}, y2 = {3}, theX = {4}&quot;,&#xD;&#xA;//    x1, y1, x2, y2, theX);&#xD;&#xA;  &#xD;&#xA;  if ((x1 &lt;= theX) &amp;&amp; (theX &lt;= x2))&#xD;&#xA;  {&#xD;&#xA;    if (x1 == theX)&#xD;&#xA;      return y1;&#xD;&#xA;    &#xD;&#xA;    if (x2 == theX)&#xD;&#xA;      return y2;&#xD;&#xA;    &#xD;&#xA;    if (!double.IsNaN(y1) &amp;&amp; !double.IsNaN(y2))&#xD;&#xA;    {&#xD;&#xA;      double timeFraction = ((double) (theX - x1).Ticks) / ((double) (x2 - x1).Ticks);&#xD;&#xA;      &#xD;&#xA;      double calc = y1 + ((y2 - y1) * timeFraction);&#xD;&#xA;//      Log.DebugFormat(&quot;find interpolated calc: x1 = {0}, y1 = {1}, x2 = {2}, y2 = {3}, theX = {4}, calc = {5}&quot;,&#xD;&#xA;//        x1, y1, x2, y2, theX, calc);&#xD;&#xA;      return calc;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return double.NaN;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" ScriptLanguage="CSharp" GridStep="29.527559055118111" GenerateScript="if (Engine.IsSecondPass) return;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;Log.Debug(&quot;Begin Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;  RunFileReportRequest runReportRequest = (RunFileReportRequest) GetData(&quot;ReportTables.RunReportRequest.RunReportRequest&quot;);&#xD;&#xA;&#xD;&#xA;  Common common = new Common(runReportRequest);&#xD;&#xA;   &#xD;&#xA;  Guid TimeSeriesUniqueId = (Guid) GetData(&quot;ReportTables.SourceData.UniqueId&quot;);&#xD;&#xA;  &#xD;&#xA;  string dllName = GetData(&quot;ReportTables.RunReportRequest.DllName&quot;).ToString();&#xD;&#xA;  Log.DebugFormat(&quot;{0} - Document GenerateScript input = {1}&quot;, dllName, TimeSeriesUniqueId);&#xD;&#xA;  &#xD;&#xA;  DateTimeOffsetInterval timeseriesTimeRange = (DateTimeOffsetInterval) GetData(&quot;ReportTables.SourceData.TimeSeriesInterval&quot;);&#xD;&#xA;  string TimeSeriesRange = common.TimeSeriesRangeString(timeseriesTimeRange);&#xD;&#xA;  &#xD;&#xA;  ReportTitle = &quot;USGS Reservoir&quot;;&#xD;&#xA;&#xD;&#xA;  DateTimeOffsetInterval periodSelected = (DateTimeOffsetInterval) GetData(&quot;ReportTables.ReportData.SelectedInterval&quot;);&#xD;&#xA;  TimeSpan tsOffset = (TimeSpan) GetData(&quot;ReportTables.SourceData.UtcOffset&quot;);&#xD;&#xA;&#xD;&#xA;  GroupByHandler groupByHandler = new GroupByHandler(common);&#xD;&#xA;  DateTimeOffsetInterval adjustedInterval = groupByHandler.AdjustIntervalToGroupBy(periodSelected, timeseriesTimeRange, &quot;WaterYear&quot;, tsOffset);  &#xD;&#xA;  ReportPeriod = common.TimeRangeString(adjustedInterval);&#xD;&#xA;&#xD;&#xA;  Log.DebugFormat(&#xD;&#xA;    &quot;RunRequest Interval = {0}, PeriodSelected = {1}, TimeSeries Range = {2}, Report Period = {3}&quot;,&#xD;&#xA;    common.TimeRangeString(runReportRequest.Interval), common.TimeSeriesRangeString(periodSelected), &#xD;&#xA;    common.TimeSeriesRangeString(timeseriesTimeRange), ReportPeriod);&#xD;&#xA;  &#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;RatingPeriodTable&quot;)) dataSet.Tables.Remove(&quot;RatingPeriodTable&quot;);&#xD;&#xA;  System.Data.DataTable ratingPeriodTable = dataSet.Tables.Add(&quot;RatingPeriodTable&quot;);&#xD;&#xA;  &#xD;&#xA;  ratingPeriodTable.Columns.Add(&quot;StartDate&quot;, typeof(DateTimeOffset));&#xD;&#xA;  ratingPeriodTable.Columns.Add(&quot;EndDate&quot;, typeof(DateTimeOffset));&#xD;&#xA;  ratingPeriodTable.Columns.Add(&quot;RatingCurveName&quot;, typeof(string));&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;ReportMetaData&quot;)) dataSet.Tables.Remove(&quot;ReportMetaData&quot;);&#xD;&#xA;  System.Data.DataTable reportMetaData = dataSet.Tables.Add(&quot;ReportMetaData&quot;);&#xD;&#xA;  &#xD;&#xA;  reportMetaData.Columns.Add(&quot;StartDate&quot;, typeof(DateTimeOffset));&#xD;&#xA;  reportMetaData.Columns.Add(&quot;EndDate&quot;, typeof(DateTimeOffset));&#xD;&#xA;  &#xD;&#xA;  System.Data.DataRow reportMetaDataRow = reportMetaData.NewRow();&#xD;&#xA;  if (adjustedInterval.Start.HasValue) reportMetaDataRow[&quot;StartDate&quot;] = adjustedInterval.Start.Value;&#xD;&#xA;  if (adjustedInterval.End.HasValue) reportMetaDataRow[&quot;EndDate&quot;] = adjustedInterval.End.Value;&#xD;&#xA;  reportMetaData.Rows.Add(reportMetaDataRow);&#xD;&#xA;&#xD;&#xA;  System.Data.DataTable groupByTable;&#xD;&#xA;  System.Data.DataTable tableData;&#xD;&#xA;  DataTable reservoirMonthTable;&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;GroupBy&quot;))&#xD;&#xA;  {&#xD;&#xA;    tableData = dataSet.Tables[&quot;TableData&quot;];&#xD;&#xA;    tableData.Rows.Clear();&#xD;&#xA;    &#xD;&#xA;    reservoirMonthTable = dataSet.Tables[&quot;TableDataSummary&quot;];&#xD;&#xA;    reservoirMonthTable.Rows.Clear();&#xD;&#xA;    &#xD;&#xA;    groupByTable = dataSet.Tables[&quot;GroupBy&quot;];&#xD;&#xA;    groupByTable.Rows.Clear();&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    groupByTable = dataSet.Tables.Add(&quot;GroupBy&quot;);&#xD;&#xA;    groupByTable.Columns.Add(&quot;GroupBy&quot;, typeof(int));&#xD;&#xA;    groupByTable.Columns.Add(&quot;TimeStamp&quot;, typeof(DateTime));&#xD;&#xA;    &#xD;&#xA;    tableData = dataSet.Tables.Add(&quot;TableData&quot;);&#xD;&#xA;    tableData.Columns.Add(&quot;GroupBy&quot;, typeof(int));&#xD;&#xA;    tableData.Columns.Add(&quot;Date&quot;, typeof(DateTime));&#xD;&#xA;&#xD;&#xA;    tableData.Columns.Add(&quot;Stage_Max&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Stage_Min&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Stage_Avg&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;    tableData.Columns.Add(&quot;Discharge_Midnight&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Discharge_Max_Min&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;    tableData.Columns.Add(&quot;Adjust_Shift_Time&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Adjust_Datum_Time&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Adjust_GCorr_Time&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Adjust_Avg&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Adjust_Shift&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;    tableData.Columns.Add(&quot;Hour_Stage_Label&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;    tableData.Columns.Add(&quot;Hour1_Stage_Value&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Hour2_Stage_Value&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Hour3_Stage_Value&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Hour4_Stage_Value&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Hour5_Stage_Value&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Hour6_Stage_Value&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Hour7_Stage_Value&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Hour8_Stage_Value&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Hour9_Stage_Value&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Hour10_Stage_Value&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Hour11_Stage_Value&quot;, typeof(string));&#xD;&#xA;    tableData.Columns.Add(&quot;Hour12_Stage_Value&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    reservoirMonthTable = dataSet.Tables.Add(&quot;TableDataSummary&quot;);&#xD;&#xA;    reservoirMonthTable.Columns.Add(&quot;GroupBy&quot;, typeof(int));&#xD;&#xA;    reservoirMonthTable.Columns.Add(&quot;Date&quot;, typeof(DateTime));&#xD;&#xA;&#xD;&#xA;    reservoirMonthTable.Columns.Add(&quot;Label&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;    reservoirMonthTable.Columns.Add(&quot;Stage_Max_Time&quot;, typeof(string));&#xD;&#xA;    reservoirMonthTable.Columns.Add(&quot;Stage_Min_Time&quot;, typeof(string));&#xD;&#xA;    reservoirMonthTable.Columns.Add(&quot;Stage_Avg&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;    reservoirMonthTable.Columns.Add(&quot;Discharge_Avg&quot;, typeof(string));&#xD;&#xA;    reservoirMonthTable.Columns.Add(&quot;Discharge_Max_Min&quot;, typeof(string));&#xD;&#xA;    reservoirMonthTable.Columns.Add(&quot;Discharge_Max_Min_Time&quot;, typeof(string));&#xD;&#xA;&#xD;&#xA;    dataSet.Relations.Add(&quot;GroupByTableData&quot;, dataSet.Tables[&quot;GroupBy&quot;].Columns[&quot;GroupBy&quot;], dataSet.Tables[&quot;TableData&quot;].Columns[&quot;GroupBy&quot;]);&#xD;&#xA;    dataSet.Relations.Add(&quot;GroupByTableDataSummary&quot;, dataSet.Tables[&quot;GroupBy&quot;].Columns[&quot;GroupBy&quot;], dataSet.Tables[&quot;TableDataSummary&quot;].Columns[&quot;GroupBy&quot;]);&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  StageFormatPlaces = common.GetParameterInt(&quot;StageFormatPlaces&quot;, StageFormatPlaces);&#xD;&#xA;  TotalStorageFormatPlaces = common.GetParameterInt(&quot;TotalStorageFormatPlaces&quot;, TotalStorageFormatPlaces);&#xD;&#xA;  string stageFormatTypeString = common.GetParameterString(&quot;StageFormatType&quot;, (StageFormatType == true) ? &quot;Fixed&quot; : &quot;SigFigs&quot;);&#xD;&#xA;  string TotalStorageFormatTypeString = common.GetParameterString(&quot;TotalStorageFormatType&quot;, (TotalStorageFormatType == true) ? &quot;Fixed&quot; : &quot;SigFigs&quot;);&#xD;&#xA;  StageFormatType = (stageFormatTypeString == &quot;Fixed&quot;) ? true : false;&#xD;&#xA;  TotalStorageFormatType = (TotalStorageFormatTypeString == &quot;Fixed&quot;) ? true : false;&#xD;&#xA;  &#xD;&#xA;  PublishGatewayAdapter publish = (PublishGatewayAdapter) GetData(&quot;ReportTables.RunReportRequest.Publish&quot;);&#xD;&#xA;  &#xD;&#xA;  UpchainProcessorListByTimeSeriesServiceRequest upRequest = new UpchainProcessorListByTimeSeriesServiceRequest();&#xD;&#xA;  upRequest.TimeSeriesUniqueId = TimeSeriesUniqueId;&#xD;&#xA;  ProcessorListServiceResponse upResponse = publish.Get(upRequest);&#xD;&#xA;  &#xD;&#xA;  foreach (Processor processor in upResponse.Processors)&#xD;&#xA;  {&#xD;&#xA;    if (string.IsNullOrEmpty(processor.InputRatingModelIdentifier))&#xD;&#xA;      continue;&#xD;&#xA;    &#xD;&#xA;    if (processor.InputTimeSeriesUniqueIds.Count == 0)&#xD;&#xA;      continue;&#xD;&#xA;    &#xD;&#xA;    Guid inputGuid = processor.InputTimeSeriesUniqueIds[0];&#xD;&#xA;    StageUnit = common.GetUnitSymbol(common.GetTimeSeriesDescription(inputGuid).Unit);&#xD;&#xA;&#xD;&#xA;    string ratingModelIdentifier = processor.InputRatingModelIdentifier;&#xD;&#xA;         &#xD;&#xA;    RatingModelEffectiveShiftsServiceRequest rmedr = new RatingModelEffectiveShiftsServiceRequest();&#xD;&#xA;    rmedr.RatingModelIdentifier = ratingModelIdentifier;&#xD;&#xA;    rmedr.TimeSeriesUniqueId = inputGuid;&#xD;&#xA;    &#xD;&#xA;    rmedr.QueryFrom = adjustedInterval.Start.Value;&#xD;&#xA;    rmedr.QueryTo = adjustedInterval.End.Value.AddHours(1);&#xD;&#xA;    &#xD;&#xA;    List&lt;EffectiveShift&gt; effectiveShifts = publish.Get(rmedr).EffectiveShifts;&#xD;&#xA;    &#xD;&#xA;    try&#xD;&#xA;    {&#xD;&#xA;      RatingCurveListServiceRequest ratingCurveListRequest = new RatingCurveListServiceRequest();&#xD;&#xA;&#xD;&#xA;      ratingCurveListRequest.RatingModelIdentifier = ratingModelIdentifier;&#xD;&#xA;      ratingCurveListRequest.QueryFrom = adjustedInterval.Start;&#xD;&#xA;      ratingCurveListRequest.QueryTo = adjustedInterval.End;&#xD;&#xA;&#xD;&#xA;      RatingCurveListServiceResponse ratingCurveResponse = publish.Get(ratingCurveListRequest);&#xD;&#xA;      &#xD;&#xA;      List&lt;RatingCurve&gt; ratingCurvesList = new List&lt;RatingCurve&gt;(ratingCurveResponse.RatingCurves);&#xD;&#xA;        &#xD;&#xA;      List&lt;RatingCurve&gt; curvesWithNoPeriod = new List&lt;RatingCurve&gt;();&#xD;&#xA;      foreach (RatingCurve curve in ratingCurvesList) if (curve.PeriodsOfApplicability.Count &lt; 1) curvesWithNoPeriod.Add(curve);&#xD;&#xA;      foreach (RatingCurve curve in curvesWithNoPeriod) ratingCurvesList.Remove(curve);&#xD;&#xA;    &#xD;&#xA;      ratingCurvesList.Sort((x, y) =&gt; x.PeriodsOfApplicability[0].StartTime.CompareTo(y.PeriodsOfApplicability[0].StartTime));&#xD;&#xA;   &#xD;&#xA;      foreach (RatingCurve curve in ratingCurvesList)&#xD;&#xA;      {&#xD;&#xA;        string ratingId = curve.Id;&#xD;&#xA;        foreach (PeriodOfApplicability period in curve.PeriodsOfApplicability)&#xD;&#xA;        {&#xD;&#xA;          System.Data.DataRow curveRow = ratingPeriodTable.NewRow();&#xD;&#xA;          curveRow[&quot;RatingCurveName&quot;] = ratingId;&#xD;&#xA;          curveRow[&quot;StartDate&quot;] = period.StartTime;&#xD;&#xA;          curveRow[&quot;EndDate&quot;] = period.EndTime;&#xD;&#xA;          ratingPeriodTable.Rows.Add(curveRow);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    } catch {}&#xD;&#xA;    &#xD;&#xA;    addGroupTableRows(groupByTable, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    &#xD;&#xA;    List &lt; TimeAlignedPoint &gt; stagePoints = common.GetTimeAlignedPoints(new List&lt;Guid&gt;{inputGuid},&#xD;&#xA;    adjustedInterval.Start.Value.AddHours(-12), adjustedInterval.End.Value.AddHours(12));&#xD;&#xA;    &#xD;&#xA;    double [] hourlyLevels = GetHourlys(stagePoints, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    &#xD;&#xA;    double [] stageDailyAverages = GetDailyAverages(stagePoints, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    double [] stageMonthlyAverages = GetMonthlyAverages(stagePoints, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    double [] stageYearlyAverages = GetYearlyAverages(stagePoints, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    &#xD;&#xA;    List&lt;TimeAlignedPoint&gt; dischargePoints = common.GetTimeAlignedPoints(new List&lt;Guid&gt;{TimeSeriesUniqueId}, &#xD;&#xA;      adjustedInterval.Start.Value.AddHours(-12), adjustedInterval.End.Value.AddHours(12));&#xD;&#xA;    &#xD;&#xA;    double [] midnightValues = GetMidnights(dischargePoints, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    double [] midnightMonthlyAverages = GetMidnightMonthlyAverages(dischargePoints, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    double [] midnightYearlyAverages = GetMidnightYearlyAverages(dischargePoints, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;            &#xD;&#xA;    TimeSeriesPointsRequest rawPointsRequest = new TimeSeriesPointsRequest();&#xD;&#xA;    rawPointsRequest.TimeSeriesUniqueId = inputGuid;&#xD;&#xA;    rawPointsRequest.QueryFromTime = adjustedInterval.Start.Value;&#xD;&#xA;    rawPointsRequest.QueryToTime = adjustedInterval.End.Value.AddHours(1);&#xD;&#xA;    rawPointsRequest.TimeSeriesDataType = TimeSeriesDataType.Raw;&#xD;&#xA;    rawPointsRequest.IncludeGapMarkers = true;&#xD;&#xA;&#xD;&#xA;    var rawStagePoints = runReportRequest.ReportData.GetTimeSeriesPoints(rawPointsRequest).Points;&#xD;&#xA;    &#xD;&#xA;    TimeSeriesPointsRequest corrPointsRequest = new TimeSeriesPointsRequest();&#xD;&#xA;    corrPointsRequest.TimeSeriesUniqueId = inputGuid;&#xD;&#xA;    corrPointsRequest.QueryFromTime = adjustedInterval.Start.Value;&#xD;&#xA;    corrPointsRequest.QueryToTime = adjustedInterval.End.Value.AddHours(1);&#xD;&#xA;    corrPointsRequest.TimeSeriesDataType = TimeSeriesDataType.Corrected;&#xD;&#xA;    corrPointsRequest.IncludeGapMarkers = true;&#xD;&#xA;&#xD;&#xA;    var corrStagePoints = runReportRequest.ReportData.GetTimeSeriesPoints(corrPointsRequest).Points;&#xD;&#xA;    &#xD;&#xA;    TimeAlignedPoint[] stage_inst_min_daily = common.GetInstMinMaxPoints(inputGuid, &quot;Daily&quot;, MIN, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    TimeAlignedPoint[] stage_inst_max_daily = common.GetInstMinMaxPoints(inputGuid, &quot;Daily&quot;, MAX, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    &#xD;&#xA;    TimeAlignedPoint[] stage_inst_min_monthly = common.GetInstMinMaxPoints(inputGuid, &quot;Monthly&quot;, MIN, adjustedInterval.Start.Value, adjustedInterval.End.Value);   &#xD;&#xA;    TimeAlignedPoint[] stage_inst_max_monthly = common.GetInstMinMaxPoints(inputGuid, &quot;Monthly&quot;, MAX, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    &#xD;&#xA;    TimeAlignedPoint[] stage_inst_min_yearly = common.GetInstMinMaxPoints(inputGuid, &quot;Yearly&quot;, MIN, adjustedInterval.Start.Value, adjustedInterval.End.Value);   &#xD;&#xA;    TimeAlignedPoint[] stage_inst_max_yearly = common.GetInstMinMaxPoints(inputGuid, &quot;Yearly&quot;, MAX, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;        &#xD;&#xA;    TimeAlignedPoint[] discharge_inst_min_daily = common.GetInstMinMaxPoints(TimeSeriesUniqueId, &quot;Daily&quot;, MIN, adjustedInterval.Start.Value, adjustedInterval.End.Value);  &#xD;&#xA;    TimeAlignedPoint[] discharge_inst_max_daily = common.GetInstMinMaxPoints(TimeSeriesUniqueId, &quot;Daily&quot;, MAX, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    &#xD;&#xA;    TimeAlignedPoint[] discharge_inst_min_monthly = common.GetInstMinMaxPoints(TimeSeriesUniqueId, &quot;Monthly&quot;, MIN, adjustedInterval.Start.Value, adjustedInterval.End.Value);   &#xD;&#xA;    TimeAlignedPoint[] discharge_inst_max_monthly = common.GetInstMinMaxPoints(TimeSeriesUniqueId, &quot;Monthly&quot;, MAX, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    &#xD;&#xA;    TimeAlignedPoint[] discharge_inst_min_yearly = common.GetInstMinMaxPoints(TimeSeriesUniqueId, &quot;Yearly&quot;, MIN, adjustedInterval.Start.Value, adjustedInterval.End.Value);   &#xD;&#xA;    TimeAlignedPoint[] discharge_inst_max_yearly = common.GetInstMinMaxPoints(TimeSeriesUniqueId, &quot;Yearly&quot;, MAX, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;      &#xD;&#xA;    int [] instMinIndexesStage = GetDailyInstIndex(corrStagePoints, MIN, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    int [] instMaxIndexesStage = GetDailyInstIndex(corrStagePoints, MAX, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;&#xD;&#xA;    double[] correctionsVectorMin = GetCorrectionsVector(instMinIndexesStage, corrStagePoints, rawStagePoints);&#xD;&#xA;    double[] correctionsVectorMax = GetCorrectionsVector(instMaxIndexesStage, corrStagePoints, rawStagePoints);&#xD;&#xA;   &#xD;&#xA;    double[] effectiveShiftsVectorMin = GetEffectiveShiftsVector(instMinIndexesStage, effectiveShifts);&#xD;&#xA;    double[] effectiveShiftsVectorMax = GetEffectiveShiftsVector(instMaxIndexesStage, effectiveShifts);&#xD;&#xA;    &#xD;&#xA;    DateTimeOffset theTime = adjustedInterval.Start.Value;&#xD;&#xA;    for (int i = 0; i &lt; stage_inst_max_monthly.Length; i++)&#xD;&#xA;    {&#xD;&#xA;      DateTimeOffset dt = theTime;&#xD;&#xA;      &#xD;&#xA;      theTime = theTime.AddMonths(1);&#xD;&#xA;      &#xD;&#xA;      DataRow row1 = reservoirMonthTable.NewRow();&#xD;&#xA;      DataRow row2 = reservoirMonthTable.NewRow();&#xD;&#xA;      DataRow row3 = reservoirMonthTable.NewRow();&#xD;&#xA;     &#xD;&#xA;      reservoirMonthTable.Rows.Add(row1);&#xD;&#xA;      reservoirMonthTable.Rows.Add(row2);&#xD;&#xA;      reservoirMonthTable.Rows.Add(row3);&#xD;&#xA;      &#xD;&#xA;      row1[&quot;GroupBy&quot;] = GetGroupNumber(dt);&#xD;&#xA;      row2[&quot;GroupBy&quot;] = row1[&quot;GroupBy&quot;];&#xD;&#xA;      row3[&quot;GroupBy&quot;] = row1[&quot;GroupBy&quot;];&#xD;&#xA;      &#xD;&#xA;      row1[&quot;Date&quot;] = new DateTime(dt.Year, dt.Month, dt.Day);&#xD;&#xA;      row1[&quot;Label&quot;] = dt.ToString(&quot;MMM&quot;);&#xD;&#xA;      &#xD;&#xA;      row1[&quot;Stage_Max_Time&quot;] = FormatPointValue(stage_inst_max_monthly[i], StageFormatType, StageFormatPlaces);&#xD;&#xA;      row2[&quot;Stage_Max_Time&quot;] = GetMonthDay(stage_inst_max_monthly[i].Timestamp);&#xD;&#xA;      row3[&quot;Stage_Max_Time&quot;] = GetTimeAs24Hours(stage_inst_max_monthly[i].Timestamp);&#xD;&#xA;      &#xD;&#xA;      row1[&quot;Stage_Min_Time&quot;] = FormatPointValue(stage_inst_min_monthly[i], StageFormatType, StageFormatPlaces);&#xD;&#xA;      row2[&quot;Stage_Min_Time&quot;] = GetMonthDay(stage_inst_min_monthly[i].Timestamp);&#xD;&#xA;      row3[&quot;Stage_Min_Time&quot;] = GetTimeAs24Hours(stage_inst_min_monthly[i].Timestamp);&#xD;&#xA;     &#xD;&#xA;      row1[&quot;Stage_Avg&quot;] = FormatDoubleValue(stageMonthlyAverages[i], StageFormatType, StageFormatPlaces);&#xD;&#xA;      row1[&quot;Discharge_Avg&quot;] = FormatDoubleValue(midnightMonthlyAverages[i], TotalStorageFormatType, TotalStorageFormatPlaces);&#xD;&#xA;      &#xD;&#xA;      row1[&quot;Discharge_Max_Min&quot;] = FormatPointValue(discharge_inst_max_monthly[i], TotalStorageFormatType, TotalStorageFormatPlaces);&#xD;&#xA;      row2[&quot;Discharge_Max_Min&quot;] = FormatPointValue(discharge_inst_min_monthly[i], TotalStorageFormatType, TotalStorageFormatPlaces);&#xD;&#xA;      &#xD;&#xA;      row1[&quot;Discharge_Max_Min_Time&quot;] = GetMonthDayYear24Hours(discharge_inst_max_monthly[i].Timestamp);&#xD;&#xA;      row2[&quot;Discharge_Max_Min_Time&quot;] = GetMonthDayYear24Hours(discharge_inst_min_monthly[i].Timestamp);&#xD;&#xA;      &#xD;&#xA;      if (dt.Month == 9)&#xD;&#xA;      {&#xD;&#xA;        // September is water-year end, add water-year values&#xD;&#xA;        row1 = reservoirMonthTable.NewRow();&#xD;&#xA;        row2 = reservoirMonthTable.NewRow();&#xD;&#xA;        row3 = reservoirMonthTable.NewRow();&#xD;&#xA;     &#xD;&#xA;        reservoirMonthTable.Rows.Add(row1);&#xD;&#xA;        reservoirMonthTable.Rows.Add(row2);&#xD;&#xA;        reservoirMonthTable.Rows.Add(row3);&#xD;&#xA;      &#xD;&#xA;        row1[&quot;GroupBy&quot;] = GetGroupNumber(dt);&#xD;&#xA;        row2[&quot;GroupBy&quot;] = row1[&quot;GroupBy&quot;];&#xD;&#xA;        row3[&quot;GroupBy&quot;] = row1[&quot;GroupBy&quot;];&#xD;&#xA;      &#xD;&#xA;        row1[&quot;Date&quot;] = new DateTime(dt.Year, dt.Month, dt.Day);&#xD;&#xA;        row1[&quot;Label&quot;] = &quot;Year&quot;;&#xD;&#xA;        &#xD;&#xA;        int yearIndex = (int) Math.Floor((double) i / 12.0);&#xD;&#xA;        &#xD;&#xA;        row1[&quot;Stage_Max_Time&quot;] = FormatPointValue(stage_inst_max_yearly[yearIndex], StageFormatType, StageFormatPlaces);&#xD;&#xA;        row2[&quot;Stage_Max_Time&quot;] = GetMonthDay(stage_inst_max_yearly[yearIndex].Timestamp);&#xD;&#xA;        row3[&quot;Stage_Max_Time&quot;] = GetTimeAs24Hours(stage_inst_max_yearly[yearIndex].Timestamp);&#xD;&#xA;      &#xD;&#xA;        row1[&quot;Stage_Min_Time&quot;] = FormatPointValue(stage_inst_min_yearly[yearIndex], StageFormatType, StageFormatPlaces);&#xD;&#xA;        row2[&quot;Stage_Min_Time&quot;] = GetMonthDay(stage_inst_min_yearly[yearIndex].Timestamp);&#xD;&#xA;        row3[&quot;Stage_Min_Time&quot;] = GetTimeAs24Hours(stage_inst_min_yearly[yearIndex].Timestamp);&#xD;&#xA;     &#xD;&#xA;        row1[&quot;Stage_Avg&quot;] = FormatDoubleValue(stageYearlyAverages[yearIndex], StageFormatType, StageFormatPlaces);&#xD;&#xA;        row1[&quot;Discharge_Avg&quot;] = FormatDoubleValue(midnightYearlyAverages[yearIndex], TotalStorageFormatType, TotalStorageFormatPlaces);&#xD;&#xA;        &#xD;&#xA;        row1[&quot;Discharge_Max_Min&quot;] = FormatPointValue(discharge_inst_max_yearly[yearIndex], TotalStorageFormatType, TotalStorageFormatPlaces);&#xD;&#xA;        row2[&quot;Discharge_Max_Min&quot;] = FormatPointValue(discharge_inst_min_yearly[yearIndex], TotalStorageFormatType, TotalStorageFormatPlaces);&#xD;&#xA;      &#xD;&#xA;        row1[&quot;Discharge_Max_Min_Time&quot;] = GetMonthDayYear24Hours(discharge_inst_max_yearly[yearIndex].Timestamp);&#xD;&#xA;        row2[&quot;Discharge_Max_Min_Time&quot;] = GetMonthDayYear24Hours(discharge_inst_min_yearly[yearIndex].Timestamp);&#xD;&#xA;      &#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    theTime = adjustedInterval.Start.Value;&#xD;&#xA;    for (int i = 0; i &lt; stageDailyAverages.Length; i++)&#xD;&#xA;    {&#xD;&#xA;      DateTimeOffset dt = theTime;&#xD;&#xA;      &#xD;&#xA;      theTime = theTime.AddDays(1);&#xD;&#xA;      &#xD;&#xA;      System.Data.DataRow row1 = tableData.NewRow();&#xD;&#xA;      System.Data.DataRow row2 = tableData.NewRow();&#xD;&#xA;      System.Data.DataRow row3 = tableData.NewRow();&#xD;&#xA;      &#xD;&#xA;      tableData.Rows.Add(row1);&#xD;&#xA;      tableData.Rows.Add(row2);&#xD;&#xA;      tableData.Rows.Add(row3);&#xD;&#xA;      &#xD;&#xA;      row1[&quot;GroupBy&quot;] = GetGroupNumber(dt);&#xD;&#xA;      row2[&quot;GroupBy&quot;] = row1[&quot;GroupBy&quot;];&#xD;&#xA;      row3[&quot;GroupBy&quot;] = row1[&quot;GroupBy&quot;];&#xD;&#xA;      &#xD;&#xA;      row1[&quot;Date&quot;] = new DateTime(dt.Year, dt.Month, dt.Day);&#xD;&#xA;      row1[&quot;Stage_Max&quot;] = FormatPointValue(stage_inst_max_daily[i], StageFormatType, StageFormatPlaces);&#xD;&#xA;      row2[&quot;Stage_Max&quot;] = GetTimeAs24Hours(dt, stage_inst_max_daily[i].Timestamp);&#xD;&#xA;      &#xD;&#xA;      row1[&quot;Stage_Min&quot;] = FormatPointValue(stage_inst_min_daily[i], StageFormatType, StageFormatPlaces);&#xD;&#xA;      row2[&quot;Stage_Min&quot;] = GetTimeAs24Hours(dt, stage_inst_min_daily[i].Timestamp);&#xD;&#xA;      &#xD;&#xA;      row1[&quot;Stage_Avg&quot;] = FormatDoubleValue(stageDailyAverages[i], StageFormatType, StageFormatPlaces);&#xD;&#xA;      &#xD;&#xA;      double correctionMax = correctionsVectorMax[i];&#xD;&#xA;      if (correctionMax != 0.0)&#xD;&#xA;        row1[&quot;Adjust_GCorr_Time&quot;] = FormatDoubleValue(correctionMax, StageFormatType, StageFormatPlaces);&#xD;&#xA;      &#xD;&#xA;      double correctionMin = correctionsVectorMin[i];&#xD;&#xA;      if (correctionMin != 0.0)&#xD;&#xA;        row2[&quot;Adjust_GCorr_Time&quot;] = FormatDoubleValue(correctionMin, StageFormatType, StageFormatPlaces);&#xD;&#xA;&#xD;&#xA;      row1[&quot;Discharge_Max_Min&quot;] = FormatPointValue(discharge_inst_max_daily[i], TotalStorageFormatType, TotalStorageFormatPlaces);&#xD;&#xA;      row2[&quot;Discharge_Max_Min&quot;] = FormatPointValue(discharge_inst_min_daily[i], TotalStorageFormatType, TotalStorageFormatPlaces);&#xD;&#xA;&#xD;&#xA;      row1[&quot;Discharge_Midnight&quot;] = FormatDoubleValue(midnightValues[i], TotalStorageFormatType, TotalStorageFormatPlaces);&#xD;&#xA;      &#xD;&#xA;      double effectiveShiftMax = effectiveShiftsVectorMax[i];&#xD;&#xA;      if (effectiveShiftMax != 0.0)&#xD;&#xA;        row1[&quot;Adjust_Shift_Time&quot;] = FormatDoubleValue(effectiveShiftMax, StageFormatType, StageFormatPlaces);&#xD;&#xA;      &#xD;&#xA;      double effectiveShiftMin = effectiveShiftsVectorMin[i];&#xD;&#xA;      if (effectiveShiftMin != 0.0)&#xD;&#xA;        row2[&quot;Adjust_Shift_Time&quot;] = FormatDoubleValue(effectiveShiftMin, StageFormatType, StageFormatPlaces);&#xD;&#xA;      &#xD;&#xA;      row1[&quot;Hour_Stage_Label&quot;] = &quot;AM&quot;;&#xD;&#xA;      row2[&quot;Hour_Stage_Label&quot;] = &quot;PM&quot;;&#xD;&#xA;      &#xD;&#xA;      int dayIndx = 24 * i; // find the index into this day of the hourly aggregate&#xD;&#xA;      for (int j = 0; j &lt; 12; j++)&#xD;&#xA;      {&#xD;&#xA;        row1[13 + j] = Format100Value(hourlyLevels[dayIndx + j]);&#xD;&#xA;        row2[13 + j] = Format100Value(hourlyLevels[dayIndx + 12 + j]);&#xD;&#xA;      }      &#xD;&#xA;    }   &#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  Log.Debug(&quot;End Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception exp)&#xD;&#xA;{&#xD;&#xA;  string dllName = GetData(&quot;ReportTables.RunReportRequest.DllName&quot;).ToString();&#xD;&#xA;  Log.Error(&quot;Document GenerateScript - &quot; + dllName, exp);&#xD;&#xA;  Log.Info(GetData(&quot;ReportTables.RunReportRequest.ReportInputInformation&quot;));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;"><Parameters type="PerpetuumSoft.Reporting.DOM.ParameterCollection" id="2" /><PageContent type="PerpetuumSoft.Reporting.DOM.Wrappers.ContentParametersDictionary" id="3" /><Pages type="PerpetuumSoft.Reporting.DOM.PageCollection" id="4"><Item type="PerpetuumSoft.Reporting.DOM.Page" id="5" Margins="118.110236220472; 118.110236220472; 88.5826771653543; 118.110236220472" Size="3300;2550" StyleName="Normal" Name="page1" Location="0;0" PaperKind="Letter" Orientation="Landscape"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="6" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="7"><Item type="PerpetuumSoft.Reporting.DOM.PageHeader" id="8" StyleName="PageHeader" Location="0;118.11023712158203" Name="pageHeader1" Size="3300;295.27560424804687"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="9" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="10"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="11" Location="88.582679748535156;0" Size="1003.93701171875;118.11023712158203" Name="textBox53" Text="USGS Reservoir Report" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="12" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="13" /><RawValue type="System.String" id="14" value="USGS Reservoir Report" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="15" Size="18" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="16" Location="88.582679748535156;118.1102294921875" Size="177.16535949707031;59.055118560791016" Name="textBox54" Text="Location:" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="17" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="18" /><RawValue type="System.String" id="19" value="Location:" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="20" Size="9.75" Strikeout="Off" Italic="Off" Bold="On" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="21" Location="265.74801635742187;118.1102294921875" Size="236.22047424316406;59.055118560791016" Name="textBox61" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="22"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="23" Expression="GetData(&quot;ReportTables.SourceDataLocation.LocationIdentifier&quot;)" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="24" Location="679.13385009765625;118.1102294921875" Size="856.2991943359375;59.055118560791016" Name="textBox62" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="25"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="26" Expression="GetData(&quot;ReportTables.SourceDataLocation.LocationName&quot;)" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="27" Location="2834.645751953125;118.11023712158203" Size="354.33071899414063;59.055118560791016" Name="textBox57" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="28"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="29" Expression="GetData(&quot;ReportTables.SourceDataLocation.LocationType&quot;)" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="30" Location="2716.535400390625;118.11023712158203" Size="118.11023712158203;59.055118560791016" Name="textBox64" Text="Type:" ExportAsPictureInXaml="false"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="31" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="32" /><RawValue type="System.String" id="33" value="Type:" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="34" Size="9.75" Strikeout="Off" Italic="Off" Bold="On" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="35" Location="501.96844482421875;118.1102294921875" Size="177.16535949707031;59.055118560791016" Name="textBox65" Text="Name:" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="36" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="37" /><RawValue type="System.String" id="38" value="Name:" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="39" Size="9.75" Strikeout="Off" Italic="Off" Bold="On" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="40" Location="2066.928955078125;118.11023712158203" Size="177.16535949707031;59.055118560791016" Name="textBox60" Text="Latitude:" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="41" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="42" /><RawValue type="System.String" id="43" value="Latitude:" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="44" Size="9.75" Strikeout="Off" Italic="Off" Bold="On" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="45" Location="2244.09423828125;118.11023712158203" Size="118.11023712158203;59.055118560791016" Name="textBox58" StyleName="PageHeader" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="46"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="47" Expression="GetData(&quot;ReportTables.SourceDataLocation.Latitude&quot;)" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="48" Location="2362.20458984375;118.11023712158203" Size="236.22047424316406;59.055118560791016" Name="textBox63" Text="Longitude:" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="49" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="50" /><RawValue type="System.String" id="51" value="Longitude:" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="52" Size="9.75" Strikeout="Off" Italic="Off" Bold="On" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="53" Location="2598.42529296875;118.11023712158203" Size="118.11023712158203;59.055118560791016" Name="textBox59" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="54"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="55" Expression="GetData(&quot;ReportTables.SourceDataLocation.Longitude&quot;)" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="56" Location="1771.6534423828125;118.11023712158203" Size="295.27560424804687;59.055118560791016" Name="textBox67" StyleName="PageHeader" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="57"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="58" Expression="GetData(&quot;ReportTables.SourceDataLocation.UtcOffsetString&quot;)" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="59" Location="1535.4329833984375;118.11023712158203" Size="236.22047424316406;59.055118560791016" Name="textBox68" Text="Timezone:" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="60" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="61" /><RawValue type="System.String" id="62" value="Timezone:" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="63" Size="9.75" Strikeout="Off" Italic="Off" Bold="On" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="64" Location="1535.4329833984375;-1.8022192307398655E-06" Size="1653.5433349609375;118.11023712158203" Name="textBox32" Text="Primary Computation of Instantaneous Midnight Contents" ExportAsPictureInXaml="false" TextAlign="BottomLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="65" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="66" /><RawValue type="System.String" id="67" value="Primary Computation of Instantaneous Midnight Contents" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="68" Size="14" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="69" Location="88.5826644897461;177.16535949707031" Size="354.33071899414063;59.055118560791016" Name="textBox72" Text="Data for Period:" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="70" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="71" /><RawValue type="System.String" id="72" value="Data for Period:" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="73" Size="9.75" Strikeout="Off" Italic="Off" Bold="On" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="74" Location="442.91336059570312;177.16535949707031" Size="236.22047424316406;59.055118560791016" Name="textBox70" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFormat type="PerpetuumSoft.Framework.Text.TextFormat" id="75" FormatMask="yyyy/MM/dd" UseCultureSettings="true" FormatStyle="Custom" FormatStringMask="yyyy/MM/dd" UseGroupSeparator="true" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="76"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="77" Expression="GetData(&quot;ReportTables.ReportMetaData.StartDate&quot;)" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="78" Location="679.13385009765625;177.16535949707031" Size="59.055118560791016;59.055118560791016" Name="textBox73" Text="to" ExportAsPictureInXaml="false"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="79" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="80" /><RawValue type="System.String" id="81" value="to" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="82" Size="9.75" Strikeout="Off" Italic="Off" Bold="On" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="83" Location="738.18896484375;177.16535949707031" Size="295.27560424804687;59.055118560791016" Name="textBox71" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFormat type="PerpetuumSoft.Framework.Text.TextFormat" id="84" FormatMask="yyyy/MM/dd" UseCultureSettings="true" FormatStyle="Custom" FormatStringMask="yyyy/MM/dd" UseGroupSeparator="true" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="85"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="86" Expression="GetData(&quot;ReportTables.ReportMetaData.EndDate&quot;)" PropertyName="Value" /></DataBindings></Item></Controls></Item><Item type="PerpetuumSoft.Reporting.DOM.DataBand" id="87" Location="0;767.716552734375" Size="3300;885.8267822265625" Name="dataBand1" ColumnsGap="0" ColumnsCount="1" DataSource="ReportTables.GroupBy"><Sort type="PerpetuumSoft.Reporting.DOM.DataBandSortCollection" id="88" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="89"><Item type="PerpetuumSoft.Reporting.DOM.DataBand" id="90" Location="0;59.055118560791016" Size="3300;413.38583374023437" Name="dataBand1_1" ColumnsGap="0" DataSource="ReportTables.GroupBy.GroupByTableData"><Sort type="PerpetuumSoft.Reporting.DOM.DataBandSortCollection" id="91" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="92"><Item type="PerpetuumSoft.Reporting.DOM.Header" id="93" Location="0;59.055118560791016" CanGrow="true" Size="3300;177.16535949707031" CanShrink="true" Name="header1_1" StyleName="HeaderFooter3" RepeatEveryPage="true"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="94" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="95"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="96" Location="236.22044372558594;0" Size="295.27560424804687;59.055118560791016" Name="header1_1_DataSet_GroupBy_GroupByTableData_Date" Text="GAGE HEIGHTS" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="97" /><RawValue type="System.String" id="98" value="GAGE HEIGHTS" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="99" Location="531.49603271484375;0" Size="177.16535949707031;59.055118560791016" Name="header1_1_DataSet_GroupBy_GroupByTableData_Stage_Time" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="100"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="101" Expression="&quot;(&quot; + StageUnit + &quot;)&quot;" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="102" Location="708.66143798828125;0" Size="206.69291687011719;59.055118560791016" Name="header1_1_DataSet_GroupBy_GroupByTableData_Discharge_Value" Text="CONTENTS" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="103" /><RawValue type="System.String" id="104" value="CONTENTS" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="105" Location="915.35430908203125;0" Size="177.16535949707031;59.055118560791016" Name="header1_1_DataSet_GroupBy_GroupByTableData_Discharge_Final" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="106"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="107" Expression="&quot;(&quot; + GetData(&quot;ReportTables.SourceData.UnitSymbol&quot;) + &quot;)&quot;" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="108" Location="561.02362060546875;59.055118560791016" Size="177.16535949707031;59.055118560791016" Name="textBox4" Text="Eqiv" ExportAsPictureInXaml="false" TextAlign="BottomCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="109" /><RawValue type="System.String" id="110" value="Eqiv" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="111" Location="915.35430908203125;59.055118560791016" Size="177.16535949707031;59.055118560791016" Margins="0; 0; 47.244094488189; 0" Name="textBox7" Text="Max" ExportAsPictureInXaml="false" TextAlign="BottomLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="112" /><RawValue type="System.String" id="113" value="Max" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="114" Location="738.18896484375;118.11023712158203" Size="177.16535949707031;59.055118560791016" Name="textBox8" Text="  - - - " ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="115" /><RawValue type="System.String" id="116" value="  - - - " /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="117" Location="1417.3228759765625;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox10" Text="  1" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="118" /><RawValue type="System.String" id="119" value="  1" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="120" Location="1564.9605712890625;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox11" Text="  2" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="121" /><RawValue type="System.String" id="122" value="  2" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="123" Location="1712.598388671875;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox12" Text="  3" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="124" /><RawValue type="System.String" id="125" value="  3" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="126" Location="1860.236083984375;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox13" Text="  4" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="127" /><RawValue type="System.String" id="128" value="  4" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="129" Location="2007.8740234375;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox14" Text="  5" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="130" /><RawValue type="System.String" id="131" value="  5" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="132" Location="2155.51171875;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox15" Text="  6" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="133" /><RawValue type="System.String" id="134" value="  6" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="135" Location="2303.1494140625;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox16" Text="  7" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="136" /><RawValue type="System.String" id="137" value="  7" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="138" Location="2598.425048828125;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox17" Text="  9" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="139" /><RawValue type="System.String" id="140" value="  9" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="141" Location="88.582679748535156;118.11023712158203" Size="118.11023712158203;59.055118560791016" Name="textBox19" Text="Date" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="142" /><RawValue type="System.String" id="143" value="Date" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="144" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="145" Location="561.02362060546875;118.11023712158203" Size="177.16535949707031;59.055118560791016" Name="textBox21" Text="Mean" ExportAsPictureInXaml="false" TextAlign="BottomCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="146" /><RawValue type="System.String" id="147" value="Mean" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="148" Location="738.18896484375;59.055118560791016" Size="177.16535949707031;59.055118560791016" Name="textBox22" Text="Midnight" ExportAsPictureInXaml="false" TextAlign="BottomCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="149" /><RawValue type="System.String" id="150" value="Midnight" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="151" Location="915.35430908203125;118.11023712158203" Size="177.16535949707031;59.055118560791016" Margins="0; 0; 47.244094488189; 0" Name="textBox24" Text="Min" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="152" /><RawValue type="System.String" id="153" value="Min" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="154" Location="236.22047424316406;59.055118560791016" Size="147.63780212402344;59.055118560791016" Name="textBox1" Text="Max" ExportAsPictureInXaml="false" TextAlign="BottomCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="155" /><RawValue type="System.String" id="113" value="Max" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="156" Location="383.8582763671875;59.055118560791016" Size="177.16535949707031;59.055118560791016" Name="textBox18" Text="Min" ExportAsPictureInXaml="false" TextAlign="BottomCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="157" /><RawValue type="System.String" id="153" value="Min" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="158" Location="206.69291687011719;118.11023712158203" Size="177.16535949707031;59.055118560791016" Name="textBox2" Text="[Time]" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="159" /><RawValue type="System.String" id="160" value="[Time]" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="161" Location="383.8582763671875;118.11023712158203" Size="177.16535949707031;59.055118560791016" Name="textBox3" Text="[Time]" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="162" /><RawValue type="System.String" id="160" value="[Time]" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="163" Location="1594.488037109375;59.055118560791016" Size="1594.4881591796875;59.055118560791016" Margins="0; 0; 23.6220472440945; 0" Name="textBox20" Text="STAGE IN HUNDREDTHS OF FEET, AT INDICATED HOURS&#xD;&#xA;" ExportAsPictureInXaml="false" TextAlign="BottomCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="164" /><RawValue type="System.String" id="165" value="STAGE IN HUNDREDTHS OF FEET, AT INDICATED HOURS&#xD;&#xA;" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="166" Location="2746.06298828125;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox6" Text="  10" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="167" /><RawValue type="System.String" id="168" value="  10" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="169" Location="2450.787353515625;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox9" Text="  8" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="170" /><RawValue type="System.String" id="171" value="  8" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="172" Location="2893.70068359375;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox29" Text="  11" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="173" /><RawValue type="System.String" id="174" value="  11" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="175" Location="3041.33837890625;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox30" Text="  12" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="176" /><RawValue type="System.String" id="177" value="  12" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="178" Location="1092.5196533203125;59.055118560791016" Size="147.63780212402344;59.055118560791016" Name="textBox33" Text="GCorr" ExportAsPictureInXaml="false" TextAlign="BottomCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="179" /><RawValue type="System.String" id="180" value="GCorr" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="181" Location="1092.5196533203125;118.11023712158203" Size="147.63780212402344;59.055118560791016" Name="textBox34" Text="[Time]" ExportAsPictureInXaml="false" TextAlign="MiddleCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="182" /><RawValue type="System.String" id="160" value="[Time]" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="183" Location="1092.5196533203125;0" Size="324.80316162109375;59.055118560791016" Margins="0; 0; 23.6220472440945; 0" Name="textBox35" Text="ADJUSTMENTS" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="184" /><RawValue type="System.String" id="185" value="ADJUSTMENTS" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="186" Location="1240.157470703125;59.055118560791016" Size="147.63780212402344;59.055118560791016" Name="textBox47" Text="Shift" ExportAsPictureInXaml="false" TextAlign="BottomCenter"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="187" /><RawValue type="System.String" id="188" value="Shift" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="189" Location="88.582679748535156;59.055118560791016" Size="147.63780212402344;59.055118560791016" Name="textBox5" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFormat type="PerpetuumSoft.Framework.Text.TextFormat" id="190" FormatMask="yyyy" UseCultureSettings="true" FormatStyle="Custom" FormatStringMask="yyyy" UseGroupSeparator="true" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="191"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="192" Expression="GetData(&quot;ReportTables.GroupBy.TimeStamp&quot;)" PropertyName="Value" /></DataBindings></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="193" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="194" Location="0;295.27560424804687" CanGrow="true" Size="3300;59.055118560791016" CanShrink="true" Name="detail1_1"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="195" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="196"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="197" Location="88.582679748535156;0" Size="118.11023712158203;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Date" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFormat type="PerpetuumSoft.Framework.Text.TextFormat" id="198" FormatMask="MM-dd" UseCultureSettings="true" FormatStyle="Custom" FormatStringMask="MM-dd" UseGroupSeparator="true" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="199"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="200" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="201" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Date&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="202" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="203" Location="177.16539001464844;0" Size="177.16535949707031;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Stage_Time" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFormat type="PerpetuumSoft.Framework.Text.TextFormat" id="204" FormatMask="HH:mm" UseCultureSettings="true" FormatStyle="Custom" FormatStringMask="HH:mm" UseGroupSeparator="true" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="205"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="206" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="207" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Stage_Max&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="208" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="209" Location="354.33074951171875;0" Size="177.16535949707031;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Stage_Value" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="210"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="211" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="212" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Stage_Min&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="213" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="214" Location="531.49609375;0" Size="177.16535949707031;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Stage_Value_Corr" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="215"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="216" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="217" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Stage_Avg&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="218" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="219" Location="708.66143798828125;0" Size="177.16535949707031;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Discharge_Time" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFormat type="PerpetuumSoft.Framework.Text.TextFormat" id="220" FormatMask="HH:mm" UseCultureSettings="true" FormatStyle="Custom" FormatStringMask="HH:mm" UseGroupSeparator="true" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="221"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="222" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="223" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Discharge_Midnight&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="224" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="225" Location="885.8267822265625;0" Size="177.16535949707031;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Discharge_Value" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="226"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="227" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="228" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Discharge_Max_Min&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="229" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="230" Location="1062.9921875;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Discharge_Final" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="231"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="232" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="233" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Adjust_GCorr_Time&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="234" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="235" Location="1358.2677001953125;0" Size="59.055118560791016;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Hour0_Stage_Value" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="236"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="237" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="238" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour_Stage_Label&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="239" Size="7" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="240" Location="1417.3228759765625;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Hour1_Stage_Value" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="241"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="242" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="243" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour1_Stage_Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="244" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="245" Location="1564.9610595703125;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Hour2_Stage_Value" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="246"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="247" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="248" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour2_Stage_Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="249" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="250" Location="1712.5987548828125;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Hour3_Stage_Value" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="251"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="252" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="253" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour3_Stage_Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="254" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="255" Location="1860.2362060546875;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Hour4_Stage_Value" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="256"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="257" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="258" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour4_Stage_Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="259" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="260" Location="2007.87451171875;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Hour5_Stage_Value" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="261"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="262" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="263" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour5_Stage_Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="264" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="265" Location="2155.511962890625;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Hour6_Stage_Value" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="266"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="267" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="268" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour6_Stage_Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="269" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="270" Location="2303.14990234375;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="detail1_1_DataSet_GroupBy_GroupByTableData_Hour7_Stage_Value" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="271"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="272" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="273" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour7_Stage_Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="274" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="275" Location="2450.787841796875;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox23" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="276"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="277" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="278" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour8_Stage_Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="279" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="280" Location="2598.42529296875;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox25" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="281"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="282" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="283" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour9_Stage_Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="284" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="285" Location="2746.0634765625;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox27" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="286"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="287" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="288" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour10_Stage_Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="289" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="290" Location="2893.700927734375;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox28" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="291"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="292" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="293" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour11_Stage_Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="294" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="295" Location="3041.338623046875;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox31" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="296"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="297" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="298" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Hour12_Stage_Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="299" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="300" Location="1210.6300048828125;0" Size="147.63780212402344;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox46" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="301"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="302" Expression="((dataBand1_1.LineNumber-1) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="303" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableData.Adjust_Shift_Time&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="304" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="305" /></Item></Controls><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="306" /><Totals type="PerpetuumSoft.Reporting.DOM.DataBandTotalCollection" id="307" /><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="308" /></Item><Item type="PerpetuumSoft.Reporting.DOM.DataBand" id="309" Location="0;531.49603271484375" Size="3300;295.27560424804687" NewPageAfter="true" Name="dataBand3" ColumnsGap="0" StyleName="Normal" DataSource="ReportTables.GroupBy.GroupByTableDataSummary"><Sort type="PerpetuumSoft.Reporting.DOM.DataBandSortCollection" id="310" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="311"><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="312" Location="0;177.16535949707031" CanGrow="true" Size="3300;59.055118560791016" CanShrink="true" Name="detail1"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="313" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="314"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="315" Location="88.582679748535156;0" Size="88.582679748535156;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox36" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="316"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="317" Expression="(((1.0/3.0)*(dataBand3.LineNumber-1)) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="318" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableDataSummary.Label&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="319" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="320" Location="354.33071899414063;0" Size="177.16535949707031;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox40" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="321"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="322" Expression="(((1.0/3.0)*(dataBand3.LineNumber-1)) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="323" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableDataSummary.Stage_Min_Time&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="324" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="325" Location="885.8267822265625;0" Size="177.16535949707031;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox42" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="326"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="327" Expression="(((1.0/3.0)*(dataBand3.LineNumber-1)) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="328" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableDataSummary.Discharge_Max_Min&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="329" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="330" Location="1062.9920654296875;0" Size="472.44094848632812;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox43" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="331"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="332" Expression="(((1.0/3.0)*(dataBand3.LineNumber-1)) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="333" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableDataSummary.Discharge_Max_Min_Time&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="334" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="335" Location="708.66143798828125;0" Size="177.16535949707031;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox37" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="336"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="337" Expression="(((1.0/3.0)*(dataBand3.LineNumber-1)) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="338" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableDataSummary.Discharge_Avg&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="339" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="340" Location="1535.43310546875;0" Size="1653.5433349609375;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox41" GrowToBottom="true" ExportAsPictureInXaml="false"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="341"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="342" Expression="(((1.0/3.0)*(dataBand3.LineNumber-1)) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="343" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="344" Location="531.49603271484375;0" Size="177.16535949707031;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox44" GrowToBottom="true" ExportAsPictureInXaml="false"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="345"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="346" Expression="(((1.0/3.0)*(dataBand3.LineNumber-1)) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="347" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="348" Location="177.16535949707031;0" Size="177.16535949707031;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox38" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="349"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="350" Expression="(((1.0/3.0)*(dataBand3.LineNumber-1)) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="351" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableDataSummary.Stage_Max_Time&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="352" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="353" Location="531.49603271484375;0" Size="177.16535949707031;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox26" GrowToBottom="true" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="354"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="355" Expression="(((1.0/3.0)*(dataBand3.LineNumber-1)) % 3) &lt; 1 ? new SolidFill(System.Drawing.Color.FromArgb(232,232,232)) : null" PropertyName="Fill" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="356" Expression="GetData(&quot;ReportTables.GroupBy.GroupByTableDataSummary.Stage_Avg&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="357" Size="7.5" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="358" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Header" id="359" Location="0;59.055118560791016" Size="3300;59.055118560791016" Name="header1" StyleName="Header1"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="360" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="361"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="362" Location="118.11023712158203;0" Size="236.22047424316406;59.055118560791016" Name="textBox39" ExportAsPictureInXaml="false"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="363" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="364" /></Item></Controls><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="365" /><Totals type="PerpetuumSoft.Reporting.DOM.DataBandTotalCollection" id="366" /><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="367" /></Item></Controls><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="368" /><Totals type="PerpetuumSoft.Reporting.DOM.DataBandTotalCollection" id="369" /><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="370" /></Item><Item type="PerpetuumSoft.Reporting.DOM.DataBand" id="371" Location="0;472.44094848632812" Size="3300;177.16535949707031" Name="dataBand2" ColumnsGap="0" StyleName="Normal" DataSource="ReportTables.RatingPeriodTable"><Sort type="PerpetuumSoft.Reporting.DOM.DataBandSortCollection" id="372" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="373"><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="374" Location="0;59.055118560791016" Size="3300;59.055118560791016" Name="detail2"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="375" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="376"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="377" Location="2598.42529296875;0" Size="177.16535949707031;59.055118560791016" Name="textBox55" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="378"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="379" Expression="GetData(&quot;ReportTables.RatingPeriodTable.RatingCurveName&quot;)" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="380" Location="2775.590576171875;0" Size="413.38583374023437;59.055118560791016" Name="textBox56" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFormat type="PerpetuumSoft.Framework.Text.TextFormat" id="381" FormatMask="yyyy/MM/dd HH:mm:ss" UseCultureSettings="true" FormatStyle="Custom" FormatStringMask="yyyy/MM/dd HH:mm:ss" UseGroupSeparator="true" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="382"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="383" Expression="GetData(&quot;ReportTables.RatingPeriodTable.StartDate&quot;)" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="384" Location="2303.149658203125;0" Size="295.27560424804687;59.055118560791016" Name="textBox52" Text="Rating Curve:" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="385" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="386" /><RawValue type="System.String" id="387" value="Rating Curve:" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="388" Size="9.75" Strikeout="Off" Italic="Off" Bold="On" FamilyName="Calibri" Underline="Off" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="389" /></Item></Controls><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="390" /><Totals type="PerpetuumSoft.Reporting.DOM.DataBandTotalCollection" id="391" /><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="392" /></Item><Item type="PerpetuumSoft.Reporting.DOM.PageFooter" id="393" StyleName="PageFooter" Location="0;1771.653564453125" Name="pageFooter" Size="3300;236.22047424316406"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="394" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="395"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="396" Location="88.582794189453125;177.16535949707031" Size="354.33071899414063;59.055118560791016" Name="textBoxDateProcessedLabel" Text="Date Processed: " ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="397" Color="110, 112, 110" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="398" /><RawValue type="System.String" id="399" value="Date Processed: " /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="400" Size="11" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="401" Location="442.91342163085937;177.16535949707031" Size="413.38583374023437;59.055118560791016" Name="textBoxDateProcessed" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="402" Color="110, 112, 110" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="403"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="404" Expression="Now.ToString(&quot;yyyy-MM-dd HH:mm&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="405" Size="11" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="406" Location="88.582733154296875;118.1102294921875" Size="1358.2677001953125;59.055118560791016" CanShrink="true" CanGrow="true" Name="pageNumber" StyleName="PageNumber" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="407" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="408"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="409" Expression="&quot;Page &quot; + PageNumber.ToString() + &quot; &quot; + Resources.Of + &quot; &quot; + PageCount.ToString()" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="410" Size="11" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item></Controls></Item></Pages><DataSources type="PerpetuumSoft.Reporting.Data.DocumentDataSourceCollection" id="411" /><StyleSheet type="PerpetuumSoft.Reporting.DOM.StyleSheet" id="412"><Styles type="PerpetuumSoft.Reporting.DOM.StyleCollection" id="413"><Item type="PerpetuumSoft.Reporting.DOM.Style" id="414" Name="HeaderFooter"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="415" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="416" Name="HeaderFooter1"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="417" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="418" Name="HeaderFooter2"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="419" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="420" Name="HeaderFooter3"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="421" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="422" Name="Even"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="423" Size="9" FamilyName="Calibri" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="424" Name="Odd"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="425" Size="9" FamilyName="Calibri" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="426" Color="Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="427" Name="Normal"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="428" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Styles></StyleSheet></root>