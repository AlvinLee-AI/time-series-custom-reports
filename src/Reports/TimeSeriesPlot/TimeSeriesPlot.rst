<?xml version="1.0" encoding="utf-8" standalone="yes"?><root type="PerpetuumSoft.Reporting.DOM.Document" id="1" version="2" Name="TimeSeriesPlot" IsTemplate="true" Title="Time Series Plot" ImportsString="TimeSeriesPlotNamespace&#xD;&#xA;ReportPluginFramework.Properties&#xD;&#xA;ReportPluginFramework&#xD;&#xA;ReportPluginFramework.ReportData&#xD;&#xA;System.Linq&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesComputedStatistics&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesData&#xD;&#xA;System.Collections.Generic&#xD;&#xA;System.Data&#xD;&#xA;Server.Services.PublishService.ServiceModel.RequestDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.ResponseDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.Dtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.Dtos.FieldVisit&#xD;&#xA;Server.Services.PublishService.ServiceModel.Dtos.FieldVisit.Enum&#xD;&#xA;System.Windows.Forms.DataVisualization.Charting&#xD;&#xA;" DocumentGuid="258f9163-1830-47ff-b11a-104436ac16f6" MetricUnit="Pixel" DoublePass="true" CommonScript="// Common functions, variables and defaults&#xD;&#xA;//&#xD;&#xA;&#xD;&#xA;public string ReportTitle = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;public void DrawChart(PerpetuumSoft.Reporting.MSChart.MicrosoftChart microsoftChart1, DataSet dataSet, DataRow groupRow)&#xD;&#xA;{ &#xD;&#xA;  microsoftChart1.Series.Clear();&#xD;&#xA;  ChartArea chartArea = microsoftChart1.ChartAreas[0];&#xD;&#xA;  Title chartTitle = microsoftChart1.Titles[0];&#xD;&#xA;  &#xD;&#xA;  DateTimeOffset startTime = (DateTimeOffset) groupRow[&quot;StartTime&quot;];&#xD;&#xA;  DateTimeOffset endTime = (DateTimeOffset) groupRow[&quot;EndTime&quot;];&#xD;&#xA;&#xD;&#xA;  string GroupBy = dataSet.Tables[&quot;ReportSettings&quot;].Rows[0][&quot;IntervalUnit&quot;].ToString();&#xD;&#xA;  Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;&#xD;&#xA;  bool isLogarithmic = common.GetParameterString(&quot;YAxisScale&quot;, &quot;Logarithmic&quot;) == &quot;Logarithmic&quot;;&#xD;&#xA;  int monthIntervalCount = common.GetParameterInt(&quot;IntervalCount&quot;, 1);&#xD;&#xA;  &#xD;&#xA;  string chartSubTitle = &quot;&quot;;&#xD;&#xA;  if (GroupBy == &quot;Month&quot;)&#xD;&#xA;  {&#xD;&#xA;    if( monthIntervalCount == 1)      &#xD;&#xA;    {&#xD;&#xA;      chartSubTitle = startTime.ToString(&quot;MMMM yyyy&quot;);&#xD;&#xA;      chartArea.AxisX.LabelStyle.Format = &quot;dd&quot;;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;      chartSubTitle = string.Format(&quot;{0} - {1}&quot;, &#xD;&#xA;        startTime.ToString(&quot;MMMM yyyy&quot;),&#xD;&#xA;        endTime.ToString(&quot;MMMM yyyy&quot;));&#xD;&#xA;      chartArea.AxisX.LabelStyle.Format = &quot;dd MMM&quot;;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    chartArea.AxisX.LabelStyle.IntervalType = DateTimeIntervalType.Days;&#xD;&#xA;    chartArea.AxisX.LabelStyle.Interval = monthIntervalCount;&#xD;&#xA;    chartArea.AxisX.LabelStyle.IntervalOffset = monthIntervalCount / 2;&#xD;&#xA;    chartArea.AxisX.LabelStyle.IntervalOffsetType = DateTimeIntervalType.Days;&#xD;&#xA;    &#xD;&#xA;    chartArea.AxisX.MajorTickMark.Interval = monthIntervalCount;&#xD;&#xA;    chartArea.AxisX.MajorTickMark.IntervalType = DateTimeIntervalType.Days;&#xD;&#xA;    chartArea.AxisX.MajorGrid.Interval = monthIntervalCount;&#xD;&#xA;    chartArea.AxisX.MajorGrid.IntervalType = DateTimeIntervalType.Days;&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    if (startTime.Year == endTime.Year)&#xD;&#xA;      chartSubTitle = startTime.ToString(&quot;MMMM&quot;) + &quot; - &quot; + endTime.ToString(&quot;MMMM yyyy&quot;);&#xD;&#xA;    else&#xD;&#xA;      chartSubTitle = startTime.ToString(&quot;MMMM yyyy&quot;) + &quot; - &quot; + endTime.ToString(&quot;MMMM yyyy&quot;);&#xD;&#xA;&#xD;&#xA;    chartArea.AxisX.LabelStyle.Format = &quot;MMM&quot;;&#xD;&#xA;    chartArea.AxisX.LabelStyle.IntervalOffset = 0.5;&#xD;&#xA;    chartArea.AxisX.LabelStyle.IntervalOffsetType = DateTimeIntervalType.Months;&#xD;&#xA;    chartArea.AxisX.MajorTickMark.Interval = 1;&#xD;&#xA;    chartArea.AxisX.MajorTickMark.IntervalType = DateTimeIntervalType.Months;&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  chartArea.AxisY.IsLogarithmic = isLogarithmic;&#xD;&#xA;  chartArea.AxisX.Minimum = startTime.DateTime.ToOADate();&#xD;&#xA;  chartArea.AxisX.Maximum = endTime.DateTime.ToOADate();&#xD;&#xA;  &#xD;&#xA;  chartArea.AxisY.IsStartedFromZero = false;&#xD;&#xA;  chartArea.AxisY.MinorTickMark.Enabled = chartArea.AxisY.IsLogarithmic;&#xD;&#xA;  chartArea.AxisY.MinorTickMark.LineColor = System.Drawing.Color.DarkGray;&#xD;&#xA;  chartArea.AxisY.MinorTickMark.Interval = 1;&#xD;&#xA;  chartArea.AxisY.MinorGrid.Enabled = chartArea.AxisY.IsLogarithmic;&#xD;&#xA;  chartArea.AxisY.MinorGrid.LineColor = System.Drawing.Color.DarkGray;&#xD;&#xA;  chartArea.AxisY.MinorGrid.Interval = 1;&#xD;&#xA; &#xD;&#xA;  double yAxisMinimum = common.GetParameterDouble(&quot;YAxisMinimum&quot;, double.NaN);&#xD;&#xA;  double yAxisMaximum = common.GetParameterDouble(&quot;YAxisMaximum&quot;, double.NaN);&#xD;&#xA;  if( !double.IsNaN( yAxisMinimum))&#xD;&#xA;    chartArea.AxisY.Minimum = yAxisMinimum;&#xD;&#xA;  if( !double.IsNaN(yAxisMaximum))&#xD;&#xA;    chartArea.AxisY.Maximum = yAxisMaximum;&#xD;&#xA;  &#xD;&#xA;  string parameter = dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;Parameter&quot;].ToString();&#xD;&#xA;  string unit = dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;UnitSymbol&quot;].ToString();&#xD;&#xA;  chartArea.AxisY.Title = parameter + &quot; (&quot; + unit + &quot;)&quot;;&#xD;&#xA;&#xD;&#xA;  chartTitle.Text = dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;TimeSeriesIdentifier&quot;].ToString();&#xD;&#xA;  if (ShowMeasurements(dataSet))&#xD;&#xA;  {&#xD;&#xA;    chartTitle.Text += &quot; and &quot; + parameter;&#xD;&#xA;    chartTitle.Text += &quot; &quot; + ((UseReadings(dataSet)) ? &quot;readings&quot; : &quot;measurements&quot;);&#xD;&#xA;  }&#xD;&#xA;  chartTitle.Text += Environment.NewLine + chartSubTitle;&#xD;&#xA;&#xD;&#xA;  Series points = microsoftChart1.Series.Add(&quot;Points&quot;);&#xD;&#xA;  points.IsVisibleInLegend = false;&#xD;&#xA;  points.XValueType = ChartValueType.DateTime;&#xD;&#xA;  points.ChartType = SeriesChartType.Line;&#xD;&#xA;  points.Color = System.Drawing.Color.FromArgb(33, 64, 154);&#xD;&#xA;  points.BorderWidth = 3;&#xD;&#xA;  points.MarkerStyle = MarkerStyle.None;&#xD;&#xA;  points.EmptyPointStyle.BorderWidth = 0;&#xD;&#xA;  points.EmptyPointStyle.MarkerStyle = MarkerStyle.None;&#xD;&#xA;&#xD;&#xA;  List&lt;Server.Services.PublishService.ServiceModel.Dtos.TimeSeriesPoint&gt; timeSeriesPoints = GetTimeSeriesPoints(dataSet, startTime, endTime);&#xD;&#xA;&#xD;&#xA;  DownSampleToDecimateSignalIntoSeries(timeSeriesPoints, isLogarithmic, points);&#xD;&#xA;  &#xD;&#xA;  int numberOfPoints = points.Points.Count;&#xD;&#xA;  Log.DebugFormat(&quot;Number of points in series = {0}&quot;, numberOfPoints);&#xD;&#xA;  &#xD;&#xA;  if (numberOfPoints == 0) &#xD;&#xA;  {&#xD;&#xA;    points.Points.AddXY(startTime.DateTime.ToOADate(), double.NaN);&#xD;&#xA;    points.Points.AddXY(endTime.DateTime.ToOADate(), double.NaN);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  if (ShowMeasurements(dataSet))&#xD;&#xA;  {&#xD;&#xA;    Series measurements = microsoftChart1.Series.Add(&quot;Measurements&quot;);&#xD;&#xA;    measurements.IsVisibleInLegend = false;&#xD;&#xA;    measurements.XValueType = ChartValueType.DateTime;&#xD;&#xA;    measurements.ChartType = SeriesChartType.ErrorBar;&#xD;&#xA;    measurements.Color = System.Drawing.Color.Red;&#xD;&#xA;    measurements.MarkerBorderWidth = 3;&#xD;&#xA;    measurements.MarkerBorderColor = System.Drawing.Color.Red;&#xD;&#xA;    measurements.MarkerColor = System.Drawing.Color.White;&#xD;&#xA;    measurements.MarkerSize = 20;&#xD;&#xA;    measurements.BorderWidth = 3;&#xD;&#xA;    measurements[&quot;ErrorBarStyle&quot;] = &quot;Both&quot;; &#xD;&#xA;    measurements[&quot;ErrorBarCenterMarkerStyle&quot;] = &quot;Circle&quot;;    &#xD;&#xA;    measurements[&quot;PixelPointWidth&quot;] = &quot;15.0&quot;;&#xD;&#xA;&#xD;&#xA;    DataRow[] measurementPoints = groupRow.GetChildRows(&quot;GroupByMeasurements&quot;);&#xD;&#xA;    foreach (DataRow measurementPointRow in measurementPoints)&#xD;&#xA;    {&#xD;&#xA;      double value = (double) measurementPointRow[&quot;Value&quot;];&#xD;&#xA;      double lowValue = (double) measurementPointRow[&quot;UpperBound&quot;];&#xD;&#xA;      double highValue = (double) measurementPointRow[&quot;LowerBound&quot;];&#xD;&#xA;    &#xD;&#xA;      if (!double.IsNaN(value))&#xD;&#xA;      {&#xD;&#xA;        if (isLogarithmic &amp;&amp; value &lt;= 0) continue;&#xD;&#xA;&#xD;&#xA;        double timestampDouble = (double) measurementPointRow[&quot;TimeStampDouble&quot;];&#xD;&#xA;        &#xD;&#xA;        DataPoint p = new DataPoint(timestampDouble, new double [] {value, lowValue, highValue});&#xD;&#xA;        measurements.Points.Add(p);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    if (measurements.Points.Count == 0) microsoftChart1.Series.Remove(measurements);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public List&lt;Server.Services.PublishService.ServiceModel.Dtos.TimeSeriesPoint&gt; GetTimeSeriesPoints(&#xD;&#xA;  DataSet dataSet, DateTimeOffset startTime, DateTimeOffset endTime)&#xD;&#xA;{&#xD;&#xA;  Guid timeSeriesUniqueId = (Guid) dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;UniqueId&quot;];&#xD;&#xA;  IPublishGateway publish = (IPublishGateway) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;Publish&quot;];&#xD;&#xA;&#xD;&#xA;  TimeSeriesDataCorrectedServiceRequest corrDataRequest = new TimeSeriesDataCorrectedServiceRequest();&#xD;&#xA;  corrDataRequest.GetParts = &quot;PointsOnly&quot;;&#xD;&#xA;  corrDataRequest.IncludeGapMarkers = true;&#xD;&#xA;  corrDataRequest.QueryFrom = startTime;&#xD;&#xA;  corrDataRequest.QueryTo = endTime;&#xD;&#xA;  corrDataRequest.TimeSeriesUniqueId = timeSeriesUniqueId;&#xD;&#xA;  &#xD;&#xA;  TimeSeriesDataServiceResponse corrDataResponse = publish.Get(corrDataRequest);&#xD;&#xA;  Log.DebugFormat(&quot;Fetched points: QueryFrom {0}, QueryTo = {1}, Number of points returned = {2}&quot;, &#xD;&#xA;    startTime, endTime, corrDataResponse.NumPoints);&#xD;&#xA;  &#xD;&#xA;  return corrDataResponse.Points;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double GetTimeSeriesPointValue(Server.Services.PublishService.ServiceModel.Dtos.TimeSeriesPoint point)&#xD;&#xA;{&#xD;&#xA;  return (point.Value.Numeric.HasValue)? point.Value.Numeric.Value : double.NaN;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double GetTimeSeriesPointTime(Server.Services.PublishService.ServiceModel.Dtos.TimeSeriesPoint point)&#xD;&#xA;{&#xD;&#xA;  return point.Timestamp.DateTimeOffset.DateTime.ToOADate();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddPointToSeries(Series series, bool isLogarithmic, double time, double value)&#xD;&#xA;{&#xD;&#xA;  if (isLogarithmic)&#xD;&#xA;  {&#xD;&#xA;    bool isNegativeValue = !double.IsNaN(value) &amp;&amp; (value &lt; 0.0001);&#xD;&#xA;    if (isNegativeValue) value = 0.0001;&#xD;&#xA;      series.Points.AddXY(time, value);&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    series.Points.AddXY(time, value);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void DownSampleToDecimateSignalIntoSeries(&#xD;&#xA;  List&lt;Server.Services.PublishService.ServiceModel.Dtos.TimeSeriesPoint&gt; timeSeriesPoints, &#xD;&#xA;  bool isLogarithmic, Series series)&#xD;&#xA;{&#xD;&#xA;  Log.DebugFormat(&quot;Number of points in timeSeries = {0}&quot;, timeSeriesPoints.Count);&#xD;&#xA;  &#xD;&#xA;  int len = timeSeriesPoints.Count;&#xD;&#xA;  &#xD;&#xA;  int maxDataPointsToShow = 10000;&#xD;&#xA;&#xD;&#xA;  int increment = (int) (2 * len / maxDataPointsToShow);&#xD;&#xA;&#xD;&#xA;  if (increment &lt;= 2)&#xD;&#xA;  {&#xD;&#xA;    for (int k = 0; k &lt; len; k++)&#xD;&#xA;    {&#xD;&#xA;      var point = timeSeriesPoints[k];&#xD;&#xA;      AddPointToSeries(series, isLogarithmic, GetTimeSeriesPointTime(point), GetTimeSeriesPointValue(point));&#xD;&#xA;    }&#xD;&#xA;    return;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  Log.DebugFormat(&quot;Downsample timeSeries with increment = {0}&quot;, increment);&#xD;&#xA;&#xD;&#xA;  // down-sample the signal to a smaller number of points&#xD;&#xA;  bool inGap = false;&#xD;&#xA;&#xD;&#xA;  int i = 0;&#xD;&#xA;  while (i &lt; len)&#xD;&#xA;  {&#xD;&#xA;    int segLength = increment;&#xD;&#xA;    if ((i + segLength) &gt; len)&#xD;&#xA;    {&#xD;&#xA;      segLength = len - i;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    double minValueInSeg = double.NaN;&#xD;&#xA;    double maxValueInSeg = double.NaN;&#xD;&#xA;&#xD;&#xA;    int j = 0;&#xD;&#xA;    for (; j &lt; segLength; j++)&#xD;&#xA;    {&#xD;&#xA;      int indx = i + j;&#xD;&#xA;      double curVal = GetTimeSeriesPointValue(timeSeriesPoints[indx]);&#xD;&#xA;&#xD;&#xA;      if (!double.IsNaN(curVal))&#xD;&#xA;      {&#xD;&#xA;        inGap = false;&#xD;&#xA;&#xD;&#xA;        if (double.IsNaN(minValueInSeg))&#xD;&#xA;          minValueInSeg = curVal;&#xD;&#xA;        else if (minValueInSeg &gt; curVal)&#xD;&#xA;          minValueInSeg = curVal;&#xD;&#xA;&#xD;&#xA;        if (double.IsNaN(maxValueInSeg))&#xD;&#xA;          maxValueInSeg = curVal;&#xD;&#xA;        else if (maxValueInSeg &lt; curVal)&#xD;&#xA;          maxValueInSeg = curVal;&#xD;&#xA;      }&#xD;&#xA;      else&#xD;&#xA;      {&#xD;&#xA;        // got a NaN, so plot current segment values, if any, then plot NaN for gap&#xD;&#xA;        if (j &gt; 0)&#xD;&#xA;        {&#xD;&#xA;          int half = (int) ((j + 1) / 2);&#xD;&#xA;          if (half &lt; 1)&#xD;&#xA;            half = 1;&#xD;&#xA;&#xD;&#xA;          AddPointToSeries(series, isLogarithmic, GetTimeSeriesPointTime(timeSeriesPoints[i]), minValueInSeg);&#xD;&#xA;&#xD;&#xA;          if ((i + half) &lt; len)&#xD;&#xA;          {&#xD;&#xA;            AddPointToSeries(series, isLogarithmic, GetTimeSeriesPointTime(timeSeriesPoints[i + half]), maxValueInSeg);&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (!inGap)&#xD;&#xA;        {&#xD;&#xA;          AddPointToSeries(series, isLogarithmic, GetTimeSeriesPointTime(timeSeriesPoints[indx]), double.NaN);&#xD;&#xA;          inGap = true;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        break;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (j == segLength)&#xD;&#xA;    {&#xD;&#xA;      // must not have seen any NaNs in this segment, so use old behavior&#xD;&#xA;      int half = (int) (increment / 2);&#xD;&#xA;      if (half &lt; 1)&#xD;&#xA;        half = 1;&#xD;&#xA;&#xD;&#xA;      AddPointToSeries(series, isLogarithmic, GetTimeSeriesPointTime(timeSeriesPoints[i]), minValueInSeg);&#xD;&#xA;&#xD;&#xA;      if ((i + half) &lt; len)&#xD;&#xA;      {&#xD;&#xA;        AddPointToSeries(series, isLogarithmic, GetTimeSeriesPointTime(timeSeriesPoints[i + half]), maxValueInSeg);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;      j++; // there was a NaN, now skip over it&#xD;&#xA;    }&#xD;&#xA;    i += j;&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public bool UseReadings(DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  string StageParameter = common.GetParameterString(&quot;StageParameter&quot;, &quot;Stage&quot;);&#xD;&#xA;  string DischargeParameter = common.GetParameterString(&quot;DischargeParameter&quot;, &quot;Discharge&quot;);&#xD;&#xA;  string timeSeriesParameter = dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;Parameter&quot;].ToString();&#xD;&#xA;  &#xD;&#xA;  if ((timeSeriesParameter != DischargeParameter) &amp;&amp; (timeSeriesParameter != StageParameter))&#xD;&#xA;    return true;&#xD;&#xA;  &#xD;&#xA;  return false;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public bool ShowMeasurements(DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  string showMeasurements = common.GetParameterString(&quot;ShowMeasurements&quot;, &quot;Show Measurements and Uncertainty&quot;);&#xD;&#xA;  if (showMeasurements.Contains(&quot;Exclude&quot;))&#xD;&#xA;    return false;&#xD;&#xA;  &#xD;&#xA;  return true;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddMeasurements(DataSet dataSet, IPublishGateway publish, &#xD;&#xA;  DateTimeOffset startTime, DateTimeOffset endTime)&#xD;&#xA;{&#xD;&#xA;  Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  string showMeasurements = common.GetParameterString(&quot;ShowMeasurements&quot;, &quot;Show Measurements and Uncertainty&quot;);&#xD;&#xA;  bool showUncertainty = showMeasurements == &quot;Show Measurements and Uncertainty&quot;;&#xD;&#xA;  string StageParameter = common.GetParameterString(&quot;StageParameter&quot;, &quot;Stage&quot;);&#xD;&#xA;  string DischargeParameter = common.GetParameterString(&quot;DischargeParameter&quot;, &quot;Discharge&quot;);&#xD;&#xA;&#xD;&#xA;  if (!ShowMeasurements(dataSet))&#xD;&#xA;    return;&#xD;&#xA;  &#xD;&#xA;  int waterYearMonth = common.GetWaterYearMonth();&#xD;&#xA;  DataTable measurementsTable = dataSet.Tables[&quot;Measurements&quot;];&#xD;&#xA;  &#xD;&#xA;  string timeSeriesParameter = dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;Parameter&quot;].ToString();&#xD;&#xA;  string timeSeriesUnitId = dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;Unit&quot;].ToString();&#xD;&#xA;  string locationIdentifier = dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;LocationIdentifier&quot;].ToString();&#xD;&#xA;  &#xD;&#xA;  FieldVisitDescriptionListServiceRequest request = new FieldVisitDescriptionListServiceRequest();&#xD;&#xA;  request.LocationIdentifier = locationIdentifier;&#xD;&#xA;  request.QueryFrom = startTime;&#xD;&#xA;  if (endTime &lt; DateTimeOffset.MaxValue) request.QueryTo = endTime;&#xD;&#xA;  &#xD;&#xA;  List&lt;FieldVisitDescription&gt; visits = publish.Get(request).FieldVisitDescriptions;&#xD;&#xA;        &#xD;&#xA;  foreach (FieldVisitDescription fvDesc in visits)&#xD;&#xA;  {&#xD;&#xA;    FieldVisitDataServiceRequest fvDataRequest = new FieldVisitDataServiceRequest();&#xD;&#xA;    fvDataRequest.FieldVisitIdentifier = fvDesc.Identifier;&#xD;&#xA;    &#xD;&#xA;    if (UseReadings(dataSet))&#xD;&#xA;    {&#xD;&#xA;      fvDataRequest.DiscreteMeasurementActivity = &quot;Inspection&quot;;&#xD;&#xA;      FieldVisitDataServiceResponse fvResponse = publish.Get(fvDataRequest);&#xD;&#xA;      &#xD;&#xA;      AddFieldVisitReading(dataSet, fvResponse.InspectionActivity);&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;      fvDataRequest.DiscreteMeasurementActivity = &quot;DischargeSummary&quot;;&#xD;&#xA;      FieldVisitDataServiceResponse fvResponse = publish.Get(fvDataRequest);&#xD;&#xA;      &#xD;&#xA;      foreach (DischargeActivity activity in fvResponse.DischargeActivities)&#xD;&#xA;      {&#xD;&#xA;        double? discharge = activity.DischargeSummary.Discharge.Numeric;&#xD;&#xA;        string dischargeUnit = activity.DischargeSummary.Discharge.Unit;&#xD;&#xA;        double? stage = activity.DischargeSummary.MeanGageHeight.Numeric;&#xD;&#xA;        string stageUnit = activity.DischargeSummary.MeanGageHeight.Unit;&#xD;&#xA;        string measurementId = activity.DischargeSummary.MeasurementId;&#xD;&#xA;        bool isPublish = activity.DischargeSummary.Publish;&#xD;&#xA;        bool isValid = activity.DischargeSummary.IsValid;&#xD;&#xA;        DischargeUncertainty dischargeUncertainty = activity.DischargeSummary.DischargeUncertainty;&#xD;&#xA;        double percentUncertainty = common.GetPercentUncertainty(dischargeUncertainty);&#xD;&#xA;        DateTimeOffset timestamp = activity.DischargeSummary.MeasurementTime;&#xD;&#xA;      &#xD;&#xA;        if (!isPublish || !isValid) continue;&#xD;&#xA;     &#xD;&#xA;        if ((timeSeriesParameter == DischargeParameter) &amp;&amp; !discharge.HasValue) continue;&#xD;&#xA;        if ((timeSeriesParameter == DischargeParameter) &amp;&amp; (dischargeUnit != timeSeriesUnitId)) continue;&#xD;&#xA;      &#xD;&#xA;        if ((timeSeriesParameter == StageParameter) &amp;&amp; !stage.HasValue) continue;&#xD;&#xA;        if ((timeSeriesParameter == StageParameter) &amp;&amp; (stageUnit != timeSeriesUnitId)) continue;&#xD;&#xA;      &#xD;&#xA;        double value = (timeSeriesParameter == DischargeParameter) ? discharge.Value : stage.Value;&#xD;&#xA;        double lowValue = value;&#xD;&#xA;        double highValue = value;&#xD;&#xA;        &#xD;&#xA;        if ((timeSeriesParameter == DischargeParameter) &amp;&amp; showUncertainty &amp;&amp; !double.IsNaN(percentUncertainty))&#xD;&#xA;        {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;            lowValue = (100 * discharge.Value) / (100 + percentUncertainty);&#xD;&#xA;          } catch {}&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;            highValue = (100 * discharge.Value) / (100 - percentUncertainty);          &#xD;&#xA;          } catch {}&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        AddMeasurementRow(measurementsTable, timestamp, waterYearMonth, value, lowValue, highValue);&#xD;&#xA;      &#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddMeasurementRow(DataTable measurementsTable, DateTimeOffset timestamp, int waterYearMonth, &#xD;&#xA;  double value, double lowValue, double highValue)&#xD;&#xA;{&#xD;&#xA;  DataRow row = measurementsTable.NewRow();&#xD;&#xA;  row[&quot;Year&quot;] = timestamp.Year;&#xD;&#xA;  row[&quot;WaterYear&quot;] = (timestamp.Month &gt;= waterYearMonth) ? timestamp.Year : timestamp.Year - 1;&#xD;&#xA;  row[&quot;Month&quot;] = timestamp.Month;&#xD;&#xA;  row[&quot;TimeStamp&quot;] = timestamp;&#xD;&#xA;  row[&quot;TimeStampDouble&quot;] = timestamp.DateTime.ToOADate();&#xD;&#xA;  row[&quot;Value&quot;] = value;&#xD;&#xA;  row[&quot;LowerBound&quot;] = lowValue;&#xD;&#xA;  row[&quot;UpperBound&quot;] = highValue;&#xD;&#xA;&#xD;&#xA;  measurementsTable.Rows.Add(row); &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddFieldVisitReading(DataSet dataSet, InspectionActivity activity)&#xD;&#xA;{&#xD;&#xA;  Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  string showMeasurements = common.GetParameterString(&quot;ShowMeasurements&quot;, &quot;Show Measurements and Uncertainty&quot;);&#xD;&#xA;&#xD;&#xA;  if (showMeasurements.Contains(&quot;Exclude&quot;))&#xD;&#xA;    return;&#xD;&#xA;  &#xD;&#xA;  int waterYearMonth = common.GetWaterYearMonth();&#xD;&#xA;  DataTable measurementsTable = dataSet.Tables[&quot;Measurements&quot;];&#xD;&#xA;  &#xD;&#xA;  string timeSeriesParameter = dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;Parameter&quot;].ToString();&#xD;&#xA;  string timeSeriesUnitId = dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;Unit&quot;].ToString();&#xD;&#xA;    &#xD;&#xA;  if ((activity == null) || (activity.Readings == null) || (activity.Readings.Count == 0))&#xD;&#xA;    return;&#xD;&#xA;  &#xD;&#xA;  foreach (Reading reading in activity.Readings)&#xD;&#xA;  {&#xD;&#xA;    if (!reading.IsValid) continue;&#xD;&#xA;        &#xD;&#xA;    if ((reading.Parameter == timeSeriesParameter) &amp;&amp; (reading.Unit == timeSeriesUnitId)&#xD;&#xA;      &amp;&amp; reading.Value.Numeric.HasValue &amp;&amp; reading.Time.HasValue)&#xD;&#xA;    {&#xD;&#xA;      double parameterValue = (reading.Value.Numeric.HasValue) ? reading.Value.Numeric.Value : double.NaN;&#xD;&#xA;      DateTimeOffset timestamp = reading.Time.Value;&#xD;&#xA;        &#xD;&#xA;      AddMeasurementRow(measurementsTable, timestamp, waterYearMonth, parameterValue, parameterValue, parameterValue);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}" ScriptLanguage="CSharp" GridStep="18.75" GenerateScript="if (Engine.IsSecondPass) return;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;Log.Debug(&quot;Begin Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  RunFileReportRequest runReportRequest = (RunFileReportRequest) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;RunReportRequest&quot;];&#xD;&#xA;  IPublishGateway publish = runReportRequest.Publish;&#xD;&#xA;  ReportTitle = (string) dataSet.Tables[&quot;ReportSettings&quot;].Rows[0][&quot;ReportTitle&quot;];&#xD;&#xA;  Guid timeSeriesUniqueId = (Guid) dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;UniqueId&quot;];&#xD;&#xA;  &#xD;&#xA;  string dllName = (string) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;];&#xD;&#xA;  Log.DebugFormat(&quot;{0} - Document GenerateScript input = {1}&quot;, dllName, timeSeriesUniqueId);&#xD;&#xA;  &#xD;&#xA;  Common common = (Common)dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  ///////////////////////////////////////////////////////////////&#xD;&#xA;  &#xD;&#xA;  string intervalUnit = common.GetParameterString(&quot;IntervalUnit&quot;, &quot;Month&quot;);&#xD;&#xA;  string yAxisScale = common.GetParameterString(&quot;YAxisScale&quot;, &quot;Logarithmic&quot;);&#xD;&#xA;  &#xD;&#xA;  string GroupBy = (intervalUnit == &quot;Month&quot;) ? &quot;Month&quot; : ((common.PeriodSelectedIsWaterYear()) ? &quot;WaterYear&quot; : &quot;Year&quot;);&#xD;&#xA;&#xD;&#xA;  DateTimeOffsetInterval adjustedInterval = (DateTimeOffsetInterval) dataSet.Tables[&quot;ReportPeriods&quot;].Rows[0][&quot;GroupBy&quot; + GroupBy];&#xD;&#xA;  &#xD;&#xA;  if (!dataSet.Tables.Contains(&quot;GroupBy&quot;)) &#xD;&#xA;  {&#xD;&#xA;    GroupByHandler groupByHandler = new GroupByHandler(common);&#xD;&#xA;    DataTable groupByTable = groupByHandler.GetGroupByTable(&quot;GroupBy&quot;);&#xD;&#xA;    groupByHandler.AddRowsToGroupBy(groupByTable, GroupBy, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    dataSet.Tables.Add(groupByTable);&#xD;&#xA;    &#xD;&#xA;    DataTable measurementsTable = dataSet.Tables.Add(&quot;Measurements&quot;);&#xD;&#xA;  &#xD;&#xA;    measurementsTable.Columns.Add(&quot;Year&quot;, typeof(int));&#xD;&#xA;    measurementsTable.Columns.Add(&quot;WaterYear&quot;, typeof(int));&#xD;&#xA;    measurementsTable.Columns.Add(&quot;Month&quot;, typeof(int));&#xD;&#xA;    measurementsTable.Columns.Add(&quot;TimeStamp&quot;, typeof(DateTimeOffset));&#xD;&#xA;    measurementsTable.Columns.Add(&quot;TimeStampDouble&quot;, typeof(double));&#xD;&#xA;    measurementsTable.Columns.Add(&quot;Value&quot;, typeof(double));&#xD;&#xA;    measurementsTable.Columns.Add(&quot;LowerBound&quot;, typeof(double));&#xD;&#xA;    measurementsTable.Columns.Add(&quot;UpperBound&quot;, typeof(double));&#xD;&#xA;    &#xD;&#xA;    AddMeasurements(dataSet, publish, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;    &#xD;&#xA;    groupByHandler.AddGroupRelation(GroupBy, &quot;GroupByMeasurements&quot;, dataSet.Tables[&quot;GroupBy&quot;], dataSet.Tables[&quot;Measurements&quot;]);&#xD;&#xA;&#xD;&#xA;  }&#xD;&#xA;    &#xD;&#xA;  Log.Debug(&quot;End Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception exp)&#xD;&#xA;{&#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  string dllName = (string) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;];&#xD;&#xA;  Log.Error(&quot;Document GenerateScript - &quot; + dllName, exp);&#xD;&#xA;  Log.Info(GetData(&quot;ReportTables.RunReportRequest.ReportInputInformation&quot;));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;"><Parameters type="PerpetuumSoft.Reporting.DOM.ParameterCollection" id="2" /><PageContent type="PerpetuumSoft.Reporting.DOM.Wrappers.ContentParametersDictionary" id="3" /><Pages type="PerpetuumSoft.Reporting.DOM.PageCollection" id="4"><Item type="PerpetuumSoft.Reporting.DOM.Page" id="5" Margins="75; 75; 150; 150" Size="3300;2550" StyleName="Normal" Name="page1" Location="0;0" PaperKind="Letter" Orientation="Landscape"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="6" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="7"><Item type="PerpetuumSoft.Reporting.DOM.PageHeader" id="8" StyleName="PageHeader" Location="0;75" Name="pageHeader" Size="3300;581.25"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="9" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="10"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="11" Location="112.5;0" Size="3037.5;112.5" Name="textBoxPageHeader1" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="12" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="13"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="14" Expression="GetData(&quot;ReportTables.ReportData.PageHeader1&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="15" value="Aquatic Informatics Data Management Software" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="16" Size="12" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="17" Location="112.5;75" Size="3037.5;75" Name="textBoxPageHeader2" StyleName="PageHeader" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="18" Color="0, 131, 215" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="19"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="20" Expression="GetData(&quot;ReportTables.ReportData.PageHeader2&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="21" value="Faster Analysis. Better Decisions." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="22" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Picture" id="23" Location="150;31.25" Size="643.75;187.5" Name="logo" StyleName="PageHeader" GenerateScript="var encodedImage = GetData(&quot;ReportTables.OrganizationIcon.EncodedImage&quot;) as string;&#xD;&#xA;var bytes = Convert.FromBase64String(encodedImage);&#xD;&#xA;&#xD;&#xA;using (var memoryStream = new System.IO.MemoryStream(bytes))&#xD;&#xA;{&#xD;&#xA;  logo.Image = new System.Drawing.Bitmap(&#xD;&#xA;    System.Drawing.Image.FromStream(memoryStream));&#xD;&#xA;}" ExportAsPictureInXaml="false"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="24"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="25" Expression="GetData(&quot;ReportTables.OrganizationIcon.SupportUrl&quot;)" PropertyName="Hyperlink" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="26" Location="0;281.25" Size="3300;118.11023712158203" Name="textBoxPageHeaderLine" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="27" TopLine="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="28" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="29" Location="150;300" Size="1500;75" Name="reportTitle" StyleName="PageHeader" GenerateScript="reportTitle.Document.Title = ReportTitle;" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="30" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="31"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="32" Expression="ReportTitle" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="33" value="Wind Rose" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="34" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="35" Location="150;356.25" Size="1500;56.25" Name="textBoxSubTitle" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="36" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="37"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="38" Expression="GetData(&quot;ReportTables.ReportData.ReportSubTitle&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="39" value="Title" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="40" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="41" Location="2418.75;300" Size="731.25;75" Name="textBoxPageNumber" StyleName="PageNumber" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="42" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="43"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="44" Expression="Now.ToString(&quot;MMM d, yyyy&quot;) + &quot; | &quot; + PageNumber.ToString() + &quot; &quot; + Resources.Of + &quot; &quot; + PageCount.ToString()" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="45" value="DISCLAIMER: The accuracy and reliability of this data is not guaranteed. Aquatic Informatics Inc. accepts no liability for its use in any way. It is the responsibility of the reader to establish the suitability of the information provided in this report for any purpose. No warranty expressed or implied is made regarding the accuracy, completeness, currency, relevance or suitability for any particular purpose of the information provided in this report." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="46" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="47" Location="1668.75;356.25" Size="1481.25;56.25" Name="textBoxPeriodSelected" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="48" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="49"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="50" Expression="GetData(&quot;ReportTables.ReportData.PeriodSelectedInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="51" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="52" Location="0;431.25" Size="3300;103.125" Name="textBoxGrayBackground" ExportAsPictureInXaml="false" TextAlign="TopLeft"><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="53" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="54" All="1 Solid 204, 204, 204" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="55" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="56" Location="150;431.25" Size="2606.25;56.25" Name="textBoxInformation1" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="57" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="58"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="59" Expression="Resources.SourceData + &quot;: &quot; + GetData(&quot;ReportTables.SourceData.TimeSeriesInformation&quot;).ToString()" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="60" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="61" Location="150;468.75" Size="2606.25;56.25" Name="textBoxInformation2" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="62" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="63"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="64" Expression="GetData(&quot;ReportTables.SourceData.TimeSeriesTimeRangeInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="65" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="66" Location="2737.5;431.25" Size="393.75;56.25" Name="textBoxUnitInformation" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="67" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="68"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="69" Expression="GetData(&quot;ReportTables.SourceData.UnitInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="70" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item><Item type="PerpetuumSoft.Reporting.DOM.PageFooter" id="71" StyleName="PageFooter" Location="0;2475" Name="pageFooter" Size="3300;150"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="72" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="73"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="74" Location="0;0" Size="3300;29.528125762939453" Name="textBoxPageFooterLine" ExportAsPictureInXaml="false"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="75" Color="110, 112, 110" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="27" TopLine="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="76" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="77" Location="168.75;0" Size="2981.25;131.25" CanGrow="true" Name="textBoxPageFooter1" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="BottomLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="78" Color="110, 112, 110" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="79"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="80" Expression="GetData(&quot;ReportTables.ReportData.FooterDisclaimer&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="81" value="DISCLAIMER - AQUARIUS is the leading software suite to acquire, process, model, and publish water data. Environmental monitoring agencies worldwide trust AQUARIUS to produce accurate water information in real-time. A modern design delivers the latest water science in an intuitive experience." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="82" Size="7" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item><Item type="PerpetuumSoft.Reporting.DOM.DataBand" id="83" Location="0;712.5" Size="3300;1706.25" Name="dataBand1" ColumnsGap="0" DataSource="ReportTables.GroupBy"><Sort type="PerpetuumSoft.Reporting.DOM.DataBandSortCollection" id="84" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="85"><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="86" Location="0;56.25" Size="3300;1593.75" Name="detail1"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="87" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="88"><Item type="PerpetuumSoft.Reporting.MSChart.MicrosoftChart" id="89" Location="150;-0" BorderlineColor="Silver" BorderlineDashStyle="Solid" Size="3000;1593.75" BorderlineWidth="2" BackColor="WhiteSmoke" StyleName="Normal" GenerateScript="if (!Engine.IsSecondPass) return;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;Log.Debug(&quot;Begin Chart GenerateScript for Time Series Plot&quot;);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{  &#xD;&#xA;  DataSet dataSet = (DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  DataRow groupRow = (DataRow) dataBand1.DataItem;&#xD;&#xA;  &#xD;&#xA;  DrawChart(microsoftChart1, dataSet, groupRow);&#xD;&#xA;&#xD;&#xA;} catch (Exception exp)&#xD;&#xA;{&#xD;&#xA;  Log.Error(&quot;Chart GenerateScript&quot;, exp);&#xD;&#xA;}" Name="microsoftChart1"><ChartAreas type="System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection" id="90"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea" id="91" Name="ChartArea1" BorderColor="Transparent" BackColor="White" BackImage=""><InnerPlotPosition type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="92" /><Area3DStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea3DStyle" id="93" /><CursorY type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="94" /><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="95" /><AxisX2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="96" Name="Secondary X axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="97" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="98" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DarkGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="99" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="100" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="101" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="102" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="103" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="104" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="105" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DarkGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="106" /></AxisX2><AxisY2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="107" Name="Secondary Y (Value) axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="108" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="109" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DarkGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="110" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="111" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="112" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="113" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="114" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="115" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="116" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DarkGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="117" /></AxisY2><AxisX type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="118" Name="X axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="119" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="120" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DimGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="121" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="122" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="123" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="124" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="125" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="126" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="127" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DimGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="128" /></AxisX><AxisY type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="129" Name="Y (Value) axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="130" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="131" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DarkGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="132" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="133" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="134" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="135" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="136" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="137" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="138" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DarkGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="139" /></AxisY><CursorX type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="140" /></Item></ChartAreas><BorderSkin type="PerpetuumSoft.Reporting.MSChart.ChartModel.BorderSkin" id="141" BackHatchStyle="None" BackImageAlignment="TopLeft" BorderDashStyle="NotSet" BackImageWrapMode="Tile" BackGradientStyle="None" SkinStyle="None" BackImage="" /><Legends type="System.Windows.Forms.DataVisualization.Charting.LegendCollection" id="142" /><Titles type="System.Windows.Forms.DataVisualization.Charting.TitleCollection" id="143"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Title" id="144" Name="Title1" ForeColor="51, 51, 51" Font="Calibri, 9.75pt" BackImage=""><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="145" /></Item></Titles><PaletteCustomColors type="System.Drawing.Color[]" id="146" elementtype="System.Drawing.Color" length="0" /><Images type="System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection" id="147" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="148" /><Series type="System.Windows.Forms.DataVisualization.Charting.SeriesCollection" id="149"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Series" id="150" MarkerStyle="Circle" Name="Series1" BackGradientStyle="None" LabelFormat="" BorderWidth="5" YValueMembers="Value" MarkerColor="Yellow" ChartTypeName="Line" BackHatchStyle="None" BorderColor="" XValueMember="TimeStampDouble" BackImageTransparentColor="" MarkerBorderColor="Blue" IsVisibleInLegend="true" Font="Microsoft Sans Serif, 8pt" MarkerBorderWidth="3" BackSecondaryColor="" MarkerImageTransparentColor="" Color="ForestGreen" LegendText="" BackImageAlignment="TopLeft" IsValueShownAsLabel="false" XValueType="DateTime" MarkerImage="" Label="" BackImage="" MarkerSize="8" LabelBorderWidth="1" LabelBorderDashStyle="Solid" BackImageWrapMode="Tile" ChartArea="ChartArea1" BorderDashStyle="Solid" LabelForeColor="Black" LabelAngle="0" ChartType="Line"><MyCustomProperties type="PerpetuumSoft.Reporting.MSChart.ChartModel.Design.CustomPropertiesExtender" id="151" /><SmartLabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.SmartLabelStyle" id="152" /><EmptyPointStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.DataPointCustomProperties" id="153" MarkerStyle="None" Label="" LabelBorderWidth="1" BackGradientStyle="None" LabelFormat="" ToolTip="" MarkerImageTransparentColor="" MarkerImage="" BackHatchStyle="None" BorderColor="" LegendText="" MarkerColor="" BackImageTransparentColor="" MarkerBorderColor="" IsVisibleInLegend="true" MarkerBorderWidth="1" Font="Microsoft Sans Serif, 8pt" BackSecondaryColor="" Color="Transparent" AxisLabel="" BackImageAlignment="TopLeft" IsValueShownAsLabel="false" LabelToolTip="" BorderWidth="0" MarkerSize="5" BackImageWrapMode="Tile" BackImage="" LabelBorderDashStyle="Solid" LegendToolTip="" BorderDashStyle="Solid" LabelForeColor="Black" LabelAngle="0"><CustomPropertiesExtended type="System.Windows.Forms.DataVisualization.Charting.CustomProperties" id="154" /></EmptyPointStyle><Points type="System.Windows.Forms.DataVisualization.Charting.DataPointCollection" id="155" /></Item></Series><Annotations type="System.Windows.Forms.DataVisualization.Charting.AnnotationCollection" id="156" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="157" /></Item></Controls><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="158" /><Totals type="PerpetuumSoft.Reporting.DOM.DataBandTotalCollection" id="159" /><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="160" /></Item></Controls></Item></Pages><DataSources type="PerpetuumSoft.Reporting.Data.DocumentDataSourceCollection" id="161" /><StyleSheet type="PerpetuumSoft.Reporting.DOM.StyleSheet" id="162"><Styles type="PerpetuumSoft.Reporting.DOM.StyleCollection" id="163"><Item type="PerpetuumSoft.Reporting.DOM.Style" id="164" Name="HeaderFooter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="165" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="166" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="167" Name="HeaderFooter1"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="168" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="169" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="170" Name="HeaderFooter2"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="171" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="172" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="173" Name="HeaderFooter3"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="174" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="175" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="176" Name="Even"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="177" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="178" Size="9" FamilyName="Calibri" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="179" Name="Odd"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="180" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="181" Size="9" FamilyName="Calibri" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="182" Color="Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="183" Name="Normal"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="184" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="185" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="186" Name="TableHeader"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="187" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="188" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="189" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="190" All="1 Solid Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="191" Name="TableCell"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="192" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="193" Size="8" FamilyName="Calibri" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="190" All="1 Solid Silver" /></Item></Styles></StyleSheet></root>