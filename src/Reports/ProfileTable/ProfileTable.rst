<?xml version="1.0" encoding="utf-8" standalone="yes"?><root type="PerpetuumSoft.Reporting.DOM.Document" id="1" version="2" Name="profileTable" IsTemplate="true" Title="Profile Table" ImportsString="ProfileTableNamespace&#xD;&#xA;ReportPluginFramework.Properties&#xD;&#xA;ReportPluginFramework.Beta&#xD;&#xA;ReportPluginFramework.Beta.ReportData&#xD;&#xA;System.Linq&#xD;&#xA;ReportPluginFramework.Beta.ReportData.TimeSeriesComputedStatistics&#xD;&#xA;ReportPluginFramework.Beta.ReportData.TimeSeriesData&#xD;&#xA;System.Collections.Generic&#xD;&#xA;System.Data&#xD;&#xA;Server.Services.PublishService.ServiceModel.RequestDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.ResponseDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.Dtos&#xD;&#xA;System.Drawing" DocumentGuid="f5485c04-3b5f-483d-9094-19482651582c" DoublePass="true" CommonScript="//&#xD;&#xA;// Functions for report generation&#xD;&#xA;//&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;void InitProfileTables(DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  if (dataSet.Tables.Contains(&quot;Profile&quot;)) &#xD;&#xA;  {&#xD;&#xA;    dataSet.Tables[&quot;Profile&quot;].Rows.Clear();&#xD;&#xA;    dataSet.Tables[&quot;GroupBy&quot;].Rows.Clear();&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    DataTable profile = dataSet.Tables.Add(&quot;Profile&quot;);&#xD;&#xA;&#xD;&#xA;    profile.Columns.Add(&quot;LocIdentifier&quot;, typeof(string));&#xD;&#xA;    profile.Columns.Add(&quot;HeightAboveFloor&quot;, typeof(string));&#xD;&#xA;    profile.Columns.Add(&quot;Depth&quot;, typeof(string));&#xD;&#xA;    profile.Columns.Add(&quot;Temp&quot;, typeof(string));&#xD;&#xA;    profile.Columns.Add(&quot;OxySat&quot;, typeof(string));&#xD;&#xA;    profile.Columns.Add(&quot;O2Dis&quot;, typeof(string));&#xD;&#xA;    profile.Columns.Add(&quot;Chloro&quot;, typeof(string));&#xD;&#xA;    profile.Columns.Add(&quot;Phyco&quot;, typeof(string));&#xD;&#xA;    profile.Columns.Add(&quot;Turb&quot;, typeof(string));&#xD;&#xA;    profile.Columns.Add(&quot;pH&quot;, typeof(string));&#xD;&#xA;    profile.Columns.Add(&quot;SpCond&quot;, typeof(string));&#xD;&#xA;    &#xD;&#xA;    DataTable groupBy = dataSet.Tables.Add(&quot;GroupBy&quot;);&#xD;&#xA;    groupBy.Columns.Add(&quot;LocIdentifier&quot;, typeof(string));&#xD;&#xA;    groupBy.Columns.Add(&quot;LocName&quot;, typeof(string));&#xD;&#xA;    groupBy.Columns.Add(&quot;DateTime&quot;, typeof(DateTimeOffset));&#xD;&#xA;    groupBy.Columns.Add(&quot;FullDepth&quot;, typeof(string));&#xD;&#xA;    groupBy.Columns.Add(&quot;DaysSince&quot;, typeof(string));&#xD;&#xA;    &#xD;&#xA;    dataSet.Relations.Add(&quot;GroupByProfile&quot;, groupBy.Columns[&quot;LocIdentifier&quot;], profile.Columns[&quot;LocIdentifier&quot;]);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddProfileRows(DataSet dataSet, string locIdentifier)&#xD;&#xA;{&#xD;&#xA;  Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  &#xD;&#xA;  DataTable groupBy = dataSet.Tables[&quot;GroupBy&quot;];&#xD;&#xA;  DataRow groupByRow = groupBy.NewRow();&#xD;&#xA;  groupByRow[&quot;LocIdentifier&quot;] = locIdentifier;&#xD;&#xA;  groupByRow[&quot;LocName&quot;] = GetLocationName(dataSet, locIdentifier);&#xD;&#xA;  groupByRow[&quot;FullDepth&quot;] = GetFullDepth(dataSet, locIdentifier);&#xD;&#xA;  groupBy.Rows.Add(groupByRow);&#xD;&#xA;&#xD;&#xA;  List&lt;TimeSeriesDescription&gt; timeSeriesDescriptions = GetTimeSeriesDescriptions(dataSet, locIdentifier);&#xD;&#xA;  &#xD;&#xA;  if (timeSeriesDescriptions.Count == 0)&#xD;&#xA;    return;&#xD;&#xA;  &#xD;&#xA;  TimeSeriesDescription[] descriptions = new TimeSeriesDescription[]{null, null, null, null, null, null, null, null, null, null};&#xD;&#xA;&#xD;&#xA;  foreach (TimeSeriesDescription tsDesc in timeSeriesDescriptions)&#xD;&#xA;  {&#xD;&#xA;    string parameter = tsDesc.Parameter;&#xD;&#xA;    string label = tsDesc.Label;&#xD;&#xA;          &#xD;&#xA;    if ((&quot;Depth&quot; == parameter) &amp;&amp; (&quot;Telemetry&quot; == label))&#xD;&#xA;      descriptions[0] = tsDesc;&#xD;&#xA;    else if ((&quot;Water Temp&quot; == parameter) &amp;&amp; (&quot;Telemetry&quot; == label))&#xD;&#xA;      descriptions[1] = tsDesc;&#xD;&#xA;    else if ((&quot;Dis Oxygen Sat&quot; == parameter) &amp;&amp; (&quot;Telemetry&quot; == label))&#xD;&#xA;      descriptions[2] = tsDesc;&#xD;&#xA;    else if ((&quot;O2 (Dis)&quot; == parameter) &amp;&amp; (&quot;Telemetry&quot; == label))&#xD;&#xA;      descriptions[3] = tsDesc;&#xD;&#xA;    else if ((&quot;BGA PC&quot; == parameter) &amp;&amp; (&quot;Telemetry(ug/L)&quot; == label))&#xD;&#xA;      descriptions[4] = tsDesc;&#xD;&#xA;    else if ((&quot;Chlorophyll&quot; == parameter) &amp;&amp; (&quot;Telemetry&quot; == label))&#xD;&#xA;      descriptions[5] = tsDesc;&#xD;&#xA;    else if ((&quot;Turbidity, Nephelom&quot; == parameter) &amp;&amp; (&quot;Telemetry&quot; == label))&#xD;&#xA;      descriptions[6] = tsDesc;&#xD;&#xA;    else if ((&quot;pH&quot; == parameter) &amp;&amp; (&quot;Telemetry&quot; == label))&#xD;&#xA;      descriptions[7] = tsDesc;&#xD;&#xA;    else if ((&quot;Sp Cond&quot; == parameter) &amp;&amp; (&quot;Telemetry&quot; == label))&#xD;&#xA;      descriptions[8] = tsDesc;      &#xD;&#xA;    else if ((&quot;Stage&quot; == parameter) &amp;&amp; (&quot;Telemetry&quot; == label))&#xD;&#xA;      descriptions[9] = tsDesc;      &#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  if (descriptions[0] == null)&#xD;&#xA;    return;&#xD;&#xA; &#xD;&#xA;  Log.Debug(&quot;Get Profile Times for &quot; + descriptions[0].Identifier);&#xD;&#xA;&#xD;&#xA;  bool includeGapMarkers = true;&#xD;&#xA;  TimeSeriesDataServiceResponse[] correctedData = new TimeSeriesDataServiceResponse[descriptions.Length];&#xD;&#xA;  correctedData[0] = GetTimeSeriesCorrectedPoints(dataSet, descriptions[0], includeGapMarkers);&#xD;&#xA;  List&lt;DateTimeOffset&gt; profileTimes = GetProfileTimes(correctedData[0]);&#xD;&#xA;&#xD;&#xA;  if (profileTimes.Count == 0)&#xD;&#xA;    return;&#xD;&#xA;  &#xD;&#xA;  groupByRow[&quot;DateTime&quot;] = profileTimes[0];&#xD;&#xA;  groupByRow[&quot;DaysSince&quot;] = GetDaysSince(profileTimes[0]);&#xD;&#xA;  &#xD;&#xA;  for (int i = 1; i &lt; descriptions.Length; i++)&#xD;&#xA;    correctedData[i] = GetTimeSeriesCorrectedPoints(dataSet, descriptions[i], !includeGapMarkers);&#xD;&#xA; &#xD;&#xA;  List&lt;double&gt; depthValues = GetProfileValues(profileTimes, correctedData[0]);&#xD;&#xA;  List&lt;double&gt; temperatureValues = GetProfileValues(profileTimes, correctedData[1]);&#xD;&#xA;  List&lt;double&gt; oxySatValues = GetProfileValues(profileTimes, correctedData[2]);&#xD;&#xA;  List&lt;double&gt; o2DisValues = GetProfileValues(profileTimes, correctedData[3]);&#xD;&#xA;  List&lt;double&gt; phycoValues = GetProfileValues(profileTimes, correctedData[4]);&#xD;&#xA;  List&lt;double&gt; chloroValues = GetProfileValues(profileTimes, correctedData[5]);&#xD;&#xA;  List&lt;double&gt; turbValues = GetProfileValues(profileTimes, correctedData[6]);&#xD;&#xA;  List&lt;double&gt; pHValues = GetProfileValues(profileTimes, correctedData[7]);&#xD;&#xA;  List&lt;double&gt; spCondValues = GetProfileValues(profileTimes, correctedData[8]);&#xD;&#xA;  List&lt;double&gt; stageValues = GetProfileValues(profileTimes, correctedData[9]);&#xD;&#xA;   &#xD;&#xA;  DataTable profileTable = dataSet.Tables[&quot;Profile&quot;]; &#xD;&#xA;  for (int i = 0; i &lt; profileTimes.Count; i++)&#xD;&#xA;  {&#xD;&#xA;    DataRow row = profileTable.NewRow();&#xD;&#xA;    &#xD;&#xA;    row[&quot;LocIdentifier&quot;] = locIdentifier;&#xD;&#xA;    &#xD;&#xA;    row[&quot;HeightAboveFloor&quot;] = (double.IsNaN(stageValues[i])) ? &quot;&quot; : stageValues[i].ToString(&quot;F1&quot;);&#xD;&#xA;    row[&quot;Depth&quot;] = (double.IsNaN(depthValues[i])) ? &quot;&quot; : depthValues[i].ToString(&quot;F1&quot;);&#xD;&#xA;    row[&quot;Temp&quot;] = (double.IsNaN(temperatureValues[i])) ? &quot;&quot; : temperatureValues[i].ToString(&quot;F1&quot;);&#xD;&#xA;    row[&quot;OxySat&quot;] = (double.IsNaN(oxySatValues[i])) ? &quot;&quot; : oxySatValues[i].ToString(&quot;F0&quot;);&#xD;&#xA;    row[&quot;O2Dis&quot;] = (double.IsNaN(o2DisValues[i])) ? &quot;&quot; : o2DisValues[i].ToString(&quot;F1&quot;);&#xD;&#xA;    row[&quot;Phyco&quot;] = (double.IsNaN(phycoValues[i])) ? &quot;&quot; : phycoValues[i].ToString(&quot;F1&quot;);&#xD;&#xA;    row[&quot;Chloro&quot;] = (double.IsNaN(chloroValues[i])) ? &quot;&quot; : chloroValues[i].ToString(&quot;F1&quot;);&#xD;&#xA;    row[&quot;Turb&quot;] = (double.IsNaN(turbValues[i])) ? &quot;&quot; : turbValues[i].ToString(&quot;F1&quot;);&#xD;&#xA;    row[&quot;pH&quot;] = (double.IsNaN(pHValues[i])) ? &quot;&quot; : pHValues[i].ToString(&quot;F1&quot;);&#xD;&#xA;    row[&quot;SpCond&quot;] = (double.IsNaN(spCondValues[i])) ? &quot;&quot; : spCondValues[i].ToString(&quot;F0&quot;);&#xD;&#xA;    &#xD;&#xA;    profileTable.Rows.Add(row);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string GetLocationName(DataSet dataSet, string locationIdentifier)&#xD;&#xA;{&#xD;&#xA;  Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;]; &#xD;&#xA;  string name = common.GetLocationName(locationIdentifier);&#xD;&#xA;  &#xD;&#xA;  if (string.IsNullOrEmpty(name))&#xD;&#xA;    return string.Format(&quot;No location found for location identifier '{0}'&quot;, locationIdentifier);&#xD;&#xA;  &#xD;&#xA;  return name;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string GetFullDepth(DataSet dataSet, string locationIdentifier)&#xD;&#xA;{&#xD;&#xA;  Log.DebugFormat(&quot;GetFullDepth for {0}&quot;, locationIdentifier);&#xD;&#xA;  try&#xD;&#xA;  {&#xD;&#xA;    Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;]; &#xD;&#xA;    List&lt;ExtendedAttribute&gt; attributes = common.GetLocationData(locationIdentifier).ExtendedAttributes;&#xD;&#xA;    foreach (ExtendedAttribute attribute in attributes)&#xD;&#xA;    {&#xD;&#xA;      Log.DebugFormat(&quot;location extended attribute name {0}, attribute value {1}&quot;, attribute.Name, attribute.Value);&#xD;&#xA;      if (&quot;fulldepth&quot; == attribute.Name.ToLower()) &#xD;&#xA;      {&#xD;&#xA;        if (attribute.Value != null) return (string) attribute.Value;&#xD;&#xA;        else return &quot;&quot;;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  } catch {};&#xD;&#xA;  return &quot;&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public List&lt;TimeSeriesDescription&gt; GetTimeSeriesDescriptions(DataSet dataSet, string locationIdentifier)&#xD;&#xA;{&#xD;&#xA;  try&#xD;&#xA;  {&#xD;&#xA;    IPublishGateway publish = (IPublishGateway) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;Publish&quot;];&#xD;&#xA;    var publishRequest = new TimeSeriesDescriptionServiceRequest();&#xD;&#xA;    publishRequest.LocationIdentifier = locationIdentifier;&#xD;&#xA;    &#xD;&#xA;    TimeSeriesDescriptionListServiceResponse publishResponse = publish.Get(publishRequest);&#xD;&#xA;&#xD;&#xA;    return publishResponse.TimeSeriesDescriptions;&#xD;&#xA;  }&#xD;&#xA;  catch {};&#xD;&#xA;  &#xD;&#xA;  return new List&lt;TimeSeriesDescription&gt;();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;List&lt;DateTimeOffset&gt; GetProfileTimes(TimeSeriesDataServiceResponse response)&#xD;&#xA;{&#xD;&#xA;  //&#xD;&#xA;  // ASSUMPTION: depth signal does not have any Empty values other than one GAP MARKER between complete profiles&#xD;&#xA;  //&#xD;&#xA;  &#xD;&#xA;  List&lt;DateTimeOffset&gt; profileTimes = new List&lt;DateTimeOffset&gt;();&#xD;&#xA;  &#xD;&#xA;  if (response == null)&#xD;&#xA;    return profileTimes;&#xD;&#xA;  &#xD;&#xA;  if (!response.NumPoints.HasValue || (response.NumPoints.Value == 0))&#xD;&#xA;    return profileTimes;&#xD;&#xA;  &#xD;&#xA;  int numPoints = (int) response.NumPoints.Value;  &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  bool inLastCompleteProfile = false;&#xD;&#xA;  int numPointsInCompleteProfile = 0;&#xD;&#xA;      &#xD;&#xA;  for (int i = numPoints - 1; i &gt;= 0; i--)&#xD;&#xA;  {&#xD;&#xA;    DateTimeOffset time = GetThePointTime(response, i);&#xD;&#xA;    double value = GetThePointValue(response, i);&#xD;&#xA;    &#xD;&#xA;    if (inLastCompleteProfile &amp;&amp; double.IsNaN(value))&#xD;&#xA;    {&#xD;&#xA;      break;&#xD;&#xA;    }&#xD;&#xA;    else if (inLastCompleteProfile)&#xD;&#xA;    {&#xD;&#xA;      numPointsInCompleteProfile++;&#xD;&#xA;    }&#xD;&#xA;    else if (!inLastCompleteProfile &amp;&amp; double.IsNaN(value))&#xD;&#xA;    {&#xD;&#xA;      inLastCompleteProfile = true;&#xD;&#xA;      //      i--; // skip back over adjacent gap marker&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;      &#xD;&#xA;  int afterLastGapCount = 0;&#xD;&#xA;  for (int i = numPoints - 1; i &gt;= 0; i--)&#xD;&#xA;  {&#xD;&#xA;    DateTimeOffset time = GetThePointTime(response, i);&#xD;&#xA;    double value = GetThePointValue(response, i);&#xD;&#xA;    &#xD;&#xA;    if (double.IsNaN(value))&#xD;&#xA;    {&#xD;&#xA;      break;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;      afterLastGapCount++;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;      &#xD;&#xA;  if (afterLastGapCount &lt; numPointsInCompleteProfile)&#xD;&#xA;  {&#xD;&#xA;    inLastCompleteProfile = false;&#xD;&#xA;    for (int i = numPoints - 1; i &gt;= 0; i--)&#xD;&#xA;    {&#xD;&#xA;      DateTimeOffset time = GetThePointTime(response, i);&#xD;&#xA;      double value = GetThePointValue(response, i);&#xD;&#xA;      &#xD;&#xA;      if (inLastCompleteProfile &amp;&amp; double.IsNaN(value))&#xD;&#xA;      {&#xD;&#xA;        break;&#xD;&#xA;      }&#xD;&#xA;      else if (inLastCompleteProfile)&#xD;&#xA;      {&#xD;&#xA;        profileTimes.Add(time);&#xD;&#xA;      }&#xD;&#xA;      else if (!inLastCompleteProfile &amp;&amp; double.IsNaN(value))&#xD;&#xA;      {&#xD;&#xA;        inLastCompleteProfile = true;&#xD;&#xA;        //        i--; // skip back over adjacent gap marker&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    for (int i = numPoints - 1; i &gt;= 0; i--)&#xD;&#xA;    {&#xD;&#xA;      DateTimeOffset time = GetThePointTime(response, i);&#xD;&#xA;      double value = GetThePointValue(response, i);&#xD;&#xA;        &#xD;&#xA;      if (double.IsNaN(value))&#xD;&#xA;      {&#xD;&#xA;        break;&#xD;&#xA;      }&#xD;&#xA;      else&#xD;&#xA;      {&#xD;&#xA;        profileTimes.Add(time);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  foreach (DateTimeOffset t in profileTimes)&#xD;&#xA;    Log.Debug(&quot;ProfileTime: &quot; + t.ToString(&quot;yyyy-MM-dd HH:mm:sszzz&quot;));&#xD;&#xA;  &#xD;&#xA;  return profileTimes;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public List&lt;double&gt; GetProfileValues(List&lt;DateTimeOffset&gt; profileTimes, TimeSeriesDataServiceResponse correctedData)&#xD;&#xA;{&#xD;&#xA;  List&lt;double&gt; profileValues = new List&lt;double&gt;();&#xD;&#xA;&#xD;&#xA;  foreach (DateTimeOffset dateTime in profileTimes)&#xD;&#xA;  {&#xD;&#xA;    profileValues.Add(GetValueAtTime(dateTime, correctedData));&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return profileValues;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public double GetValueAtTime(DateTimeOffset dateTime, TimeSeriesDataServiceResponse correctedDataResponse)&#xD;&#xA;{&#xD;&#xA;  if (correctedDataResponse == null) &#xD;&#xA;    return double.NaN;&#xD;&#xA;  &#xD;&#xA;  if (!correctedDataResponse.NumPoints.HasValue || (correctedDataResponse.NumPoints.Value == 0))&#xD;&#xA;    return double.NaN;&#xD;&#xA;    &#xD;&#xA;  int numPoints = (int) correctedDataResponse.NumPoints.Value;  &#xD;&#xA;    &#xD;&#xA;  for (int i = numPoints - 1; i &gt;= 0; i--)&#xD;&#xA;  {&#xD;&#xA;    DateTimeOffset dt = GetThePointTime(correctedDataResponse, i);&#xD;&#xA;        &#xD;&#xA;    if (dt &gt; dateTime) continue;&#xD;&#xA;    if (dt &lt; dateTime) break;&#xD;&#xA;    if (dt == dateTime) return GetThePointValue(correctedDataResponse, i);&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return double.NaN;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;DateTimeOffset GetThePointTime(TimeSeriesDataServiceResponse response, int i)&#xD;&#xA;{&#xD;&#xA;  return response.Points[i].Timestamp.DateTimeOffset;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;double GetThePointValue(TimeSeriesDataServiceResponse response, int i)&#xD;&#xA;{&#xD;&#xA;  return (response.Points[i].Value.Numeric.HasValue) ? response.Points[i].Value.Numeric.Value : double.NaN;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public TimeSeriesDataServiceResponse GetTimeSeriesCorrectedPoints(DataSet dataSet, &#xD;&#xA;  TimeSeriesDescription tsDesc, bool includeGapMarkers)&#xD;&#xA;{&#xD;&#xA;  if (tsDesc == null)&#xD;&#xA;    return null;&#xD;&#xA;  &#xD;&#xA;  IPublishGateway publish = (IPublishGateway) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;Publish&quot;];&#xD;&#xA;  TimeSeriesDataCorrectedServiceRequest request = new TimeSeriesDataCorrectedServiceRequest();&#xD;&#xA;  request.ApplyRounding = false;&#xD;&#xA;  request.GetParts = &quot;PointsOnly&quot;;&#xD;&#xA;  request.IncludeGapMarkers = includeGapMarkers;&#xD;&#xA;  request.TimeSeriesUniqueId = tsDesc.UniqueId;&#xD;&#xA;  &#xD;&#xA;  return publish.Get(request);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string GetDaysSinceString(string numberOfDaysString)&#xD;&#xA;{&#xD;&#xA;  return numberOfDaysString + &quot; Day(s) ago since last profile&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string GetDaysSince(DateTimeOffset dateTime)&#xD;&#xA;{&#xD;&#xA;  TimeSpan span = DateTimeOffset.Now - dateTime;&#xD;&#xA;  double totalNumberOfDays = span.TotalDays;&#xD;&#xA;  &#xD;&#xA;  if (totalNumberOfDays &lt; 1.0)&#xD;&#xA;    return GetDaysSinceString(&quot;&lt;1&quot;);&#xD;&#xA;  &#xD;&#xA;  int integerNumberOfDays = (int) Math.Round(totalNumberOfDays, 0);&#xD;&#xA;  &#xD;&#xA;  return GetDaysSinceString(integerNumberOfDays.ToString());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;SolidFill TemperatureFillColor(object value)&#xD;&#xA;{&#xD;&#xA;  double lowValue = 0.0;&#xD;&#xA;  double midValue = 15.0;&#xD;&#xA;  double highValue = 30.0;&#xD;&#xA;  &#xD;&#xA;  Color lowColor = Color.FromArgb(0, 176, 240);&#xD;&#xA;  Color midColor = Color.FromArgb(255, 235, 132);&#xD;&#xA;  Color highColor = Color.FromArgb(248, 105, 107); &#xD;&#xA;&#xD;&#xA;  return CalcColor(value, lowValue, midValue, highValue, lowColor, midColor, highColor);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;SolidFill OxySatFillColor(object value)&#xD;&#xA;{&#xD;&#xA;  double lowValue = 0.0;&#xD;&#xA;  double midValue = 100.0;&#xD;&#xA;  double highValue = 200.0;&#xD;&#xA;  &#xD;&#xA;  Color lowColor = Color.FromArgb(248, 105, 107);&#xD;&#xA;  Color midColor = Color.FromArgb(183, 222, 232);&#xD;&#xA;  Color highColor = Color.FromArgb(0, 176, 240); &#xD;&#xA;&#xD;&#xA;  return CalcColor(value, lowValue, midValue, highValue, lowColor, midColor, highColor);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;SolidFill O2DisFillColor(object value)&#xD;&#xA;{&#xD;&#xA;  double lowValue = 0.0;&#xD;&#xA;  double midValue = 7.5;&#xD;&#xA;  double highValue = 25.0;&#xD;&#xA;  &#xD;&#xA;  Color lowColor = Color.FromArgb(248, 105, 107);&#xD;&#xA;  Color midColor = Color.FromArgb(183, 222, 232);&#xD;&#xA;  Color highColor = Color.FromArgb(0, 176, 240); &#xD;&#xA;&#xD;&#xA;  return CalcColor(value, lowValue, midValue, highValue, lowColor, midColor, highColor);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;SolidFill ChloroFillColor(object value)&#xD;&#xA;{&#xD;&#xA;  double lowValue = 0.0;&#xD;&#xA;  double midValue = 5.0;&#xD;&#xA;  double highValue = 10.0;&#xD;&#xA;  &#xD;&#xA;  Color lowColor = Color.FromArgb(235, 241, 222);&#xD;&#xA;  Color midColor = Color.FromArgb(146, 208, 80);&#xD;&#xA;  Color highColor = Color.FromArgb(0, 176, 80); &#xD;&#xA;&#xD;&#xA;  return CalcColor(value, lowValue, midValue, highValue, lowColor, midColor, highColor);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;SolidFill PhycoFillColor(object value)&#xD;&#xA;{&#xD;&#xA;  double lowValue = 0.0;&#xD;&#xA;  double midValue = 0.5;&#xD;&#xA;  double highValue = 2.0;&#xD;&#xA;  &#xD;&#xA;  Color lowColor = Color.FromArgb(235, 241, 222);&#xD;&#xA;  Color midColor = Color.FromArgb(146, 208, 80);&#xD;&#xA;  Color highColor = Color.FromArgb(0, 176, 80); &#xD;&#xA;&#xD;&#xA;  return CalcColor(value, lowValue, midValue, highValue, lowColor, midColor, highColor);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;SolidFill TurbidityFillColor(object value)&#xD;&#xA;{&#xD;&#xA;  double lowValue = 0.0;&#xD;&#xA;  double midValue = 10.0;&#xD;&#xA;  double highValue = 12.0;&#xD;&#xA;  &#xD;&#xA;  Color lowColor = Color.FromArgb(255, 255, 255);&#xD;&#xA;  Color midColor = Color.FromArgb(196, 189, 151);&#xD;&#xA;  Color highColor = Color.FromArgb(148, 138, 84); &#xD;&#xA;&#xD;&#xA;  return CalcColor(value, lowValue, midValue, highValue, lowColor, midColor, highColor);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;SolidFill pHFillColor(object value)&#xD;&#xA;{&#xD;&#xA;  double lowValue = 6.99999;&#xD;&#xA;  double midValue = 7.0;&#xD;&#xA;  double highValue = 8.5;&#xD;&#xA;  &#xD;&#xA;  Color lowColor = Color.FromArgb(218, 150, 148);&#xD;&#xA;  Color midColor = Color.FromArgb(146, 208, 80);&#xD;&#xA;  Color highColor = Color.FromArgb(218, 150, 148); &#xD;&#xA;&#xD;&#xA;  return CalcColor(value, lowValue, midValue, highValue, lowColor, midColor, highColor);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;SolidFill CalcColor(object value, &#xD;&#xA;  double lowValue, double midValue, double highValue, &#xD;&#xA;  Color lowColor, Color midColor, Color highColor)&#xD;&#xA;{&#xD;&#xA;  double valueDouble = 0.0;&#xD;&#xA;  bool isDouble = double.TryParse(value.ToString(), out valueDouble);&#xD;&#xA;  &#xD;&#xA;  if (!isDouble) return new SolidFill(Color.White);&#xD;&#xA;&#xD;&#xA;  Color color = Color.White;&#xD;&#xA;  &#xD;&#xA;  if ((lowValue &lt;= valueDouble) &amp;&amp; (valueDouble &lt;= midValue))&#xD;&#xA;  {&#xD;&#xA;    color = InterpolateColor(valueDouble, lowValue, midValue, lowColor, midColor);&#xD;&#xA;  }&#xD;&#xA;  else if ((midValue &lt; valueDouble) &amp;&amp; (valueDouble &lt;= highValue))&#xD;&#xA;  {&#xD;&#xA;    color = InterpolateColor(valueDouble, midValue, highValue, midColor, highColor);&#xD;&#xA;  }&#xD;&#xA;  else if (valueDouble &gt; highValue)&#xD;&#xA;  {&#xD;&#xA;    color = highColor;&#xD;&#xA;  }&#xD;&#xA;    &#xD;&#xA;  return new SolidFill(color);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Color InterpolateColor(double value, &#xD;&#xA;  double lowValue, double highValue, &#xD;&#xA;  Color lowColor, Color highColor)&#xD;&#xA;{&#xD;&#xA;  double factor = ((value - lowValue) / (highValue - lowValue));&#xD;&#xA;  &#xD;&#xA;  double red = factor * (highColor.R - lowColor.R) + lowColor.R;&#xD;&#xA;  double green = factor * (highColor.G - lowColor.G) + lowColor.G;&#xD;&#xA;  double blue = factor * (highColor.B - lowColor.B) + lowColor.B;&#xD;&#xA;  &#xD;&#xA;  return Color.FromArgb((int) Math.Round(red), (int) Math.Round(green), (int) Math.Round(blue));&#xD;&#xA;}&#xD;&#xA;" ScriptLanguage="CSharp" GridStep="59.055118110236222" GenerateScript="if (Engine.IsSecondPass) return;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;Log.Debug(&quot;Begin Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;  RunFileReportRequest runReportRequest = (RunFileReportRequest) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;RunReportRequest&quot;];&#xD;&#xA;  IPublishGateway publish = runReportRequest.Publish;&#xD;&#xA;  Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;    &#xD;&#xA;  string dllName = dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;].ToString();&#xD;&#xA;  Log.DebugFormat(&quot;{0} - Document GenerateScript&quot;, dllName);&#xD;&#xA;  &#xD;&#xA;  InitProfileTables(dataSet);&#xD;&#xA;&#xD;&#xA;  string locationIdentifiers = common.GetParameterString(&quot;LocationIdentifiers&quot;, &quot;&quot;);&#xD;&#xA;&#xD;&#xA;  string [] locations = locationIdentifiers.Split(new string[]{&quot;,&quot;}, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;&#xD;&#xA;  foreach (string location in locations)&#xD;&#xA;    AddProfileRows(dataSet, location.Trim());&#xD;&#xA;&#xD;&#xA;  Log.Debug(&quot;End Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception exp)&#xD;&#xA;{&#xD;&#xA;  string dllName = dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;].ToString();&#xD;&#xA;  Log.Error(&quot;Document GenerateScript - &quot; + dllName, exp);&#xD;&#xA;  Log.Info(dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;ReportInputInformation&quot;]);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;"><Parameters type="PerpetuumSoft.Reporting.DOM.ParameterCollection" id="2" /><PageContent type="PerpetuumSoft.Reporting.DOM.Wrappers.ContentParametersDictionary" id="3" /><Pages type="PerpetuumSoft.Reporting.DOM.PageCollection" id="4"><Item type="PerpetuumSoft.Reporting.DOM.Page" id="5" Margins="118.110237121582; 141.732284545898; 177.16535949707; 177.165354330709" Size="3300;2550" StyleName="Normal" Name="page1" Location="0;0" PaperKind="Letter" Orientation="Landscape"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="6" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="7"><Item type="PerpetuumSoft.Reporting.DOM.PageHeader" id="8" StyleName="PageHeader" Location="0;177.16535949707031" Name="pageHeader" Size="3300;118.11023712158203"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="9" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="10"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="11" Location="1830.7086181640625;0" Size="1299.212646484375;59.055118560791016" CanShrink="true" CanGrow="true" Name="pageNumber" StyleName="PageNumber" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="12"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="13" Expression="&quot;Page &quot; + PageNumber.ToString() + &quot; &quot; + Resources.Of + &quot; &quot; + PageCount.ToString()" PropertyName="Value" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="14" Expression="PageCount &gt; 1" PropertyName="Visible" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="15" Size="11" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item><Item type="PerpetuumSoft.Reporting.DOM.DataBand" id="16" Location="0;413.38583374023437" Size="3300;649.6063232421875" Name="dataBand1" ColumnsGap="0" DataSource="ReportTables.GroupBy"><Sort type="PerpetuumSoft.Reporting.DOM.DataBandSortCollection" id="17" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="18"><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="19" Location="0;59.055118560791016" NewPageBefore="true" Size="3300;295.27560424804687" Name="detail2"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="20" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="21"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="22" Location="177.16535949707031;0" Size="1476.3779296875;59.055118560791016" Name="textBox7" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="24"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="25" Expression="dataBand1[&quot;LocName&quot;]" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="26" Location="1653.5433349609375;0" Size="590.55120849609375;59.055118560791016" Name="textBox8" ExportAsPictureInXaml="false" TextAlign="TopCenter"><TextFormat type="PerpetuumSoft.Framework.Text.TextFormat" id="27" FormatMask="dd/MM/yyyy HH:mm" UseCultureSettings="true" FormatStyle="Custom" FormatStringMask="dd/MM/yyyy HH:mm" UseGroupSeparator="true" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="28"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="29" Expression="dataBand1[&quot;DateTime&quot;]" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="30" Location="177.16535949707031;59.055118560791016" Size="590.55120849609375;118.11023712158203" Name="textBox9" Text="Full Depth" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="31"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="32" Expression="&quot;Full Depth &quot; + dataBand1[&quot;FullDepth&quot;].ToString()" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="33" value="Full Depth" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="34" Location="177.16535949707031;177.16535949707031" Size="295.27560424804687;118.11023712158203" Name="textBox10" Text="Height above&#xD;&#xA;floor m" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="35" /><RawValue type="System.String" id="36" value="Height above&#xD;&#xA;floor m" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="37" Location="472.44094848632812;177.16535949707031" Size="295.27560424804687;118.11023712158203" Name="textBox11" Text="Depth m" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="38" /><RawValue type="System.String" id="39" value="Depth m" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="40" Location="767.716552734375;177.16535949707031" Size="295.27560424804687;118.11023712158203" Name="textBox12" Text="°C" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="41" /><RawValue type="System.String" id="42" value="°C" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="43" Location="1062.9920654296875;177.16535949707031" Size="295.27560424804687;118.11023712158203" Name="textBox13" Text="%" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="44" /><RawValue type="System.String" id="45" value="%" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="46" Location="1358.2677001953125;177.16535949707031" Size="295.27560424804687;118.11023712158203" Name="textBox14" Text="mg/l" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="47" /><RawValue type="System.String" id="48" value="mg/l" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="49" Location="1653.5433349609375;177.16535949707031" Size="295.27560424804687;118.11023712158203" Name="textBox15" Text="μg/l" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="50" /><RawValue type="System.String" id="51" value="μg/l" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="52" Location="2244.094482421875;177.16535949707031" Size="295.27560424804687;118.11023712158203" Name="textBox16" Text="NTU" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="53" /><RawValue type="System.String" id="54" value="NTU" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="55" Location="2539.3701171875;177.16535949707031" Size="295.27560424804687;118.11023712158203" Name="textBox17" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="56" /><RawValue type="System.String" id="54" value="NTU" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="57" Location="2834.645751953125;177.16535949707031" Size="295.27560424804687;118.11023712158203" Name="textBox18" Text="μS/cm" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="58" /><RawValue type="System.String" id="59" value="μS/cm" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="60" Location="767.716552734375;59.055118560791016" Size="295.27560424804687;118.11023712158203" Name="textBox19" Text="Temperature" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="61" /><RawValue type="System.String" id="62" value="Temperature" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="63" Location="1653.5433349609375;59.055118560791016" Size="295.27560424804687;118.11023712158203" Name="textBox20" Text="Chlorophyll" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="64" /><RawValue type="System.String" id="65" value="Chlorophyll" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="66" Location="2244.094482421875;59.055118560791016" Size="295.27560424804687;118.11023712158203" Name="textBox21" Text="Turbidity" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="67" /><RawValue type="System.String" id="68" value="Turbidity" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="69" Location="2539.3701171875;59.055118560791016" Size="295.27560424804687;118.11023712158203" Name="textBox22" Text="pH" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="70" /><RawValue type="System.String" id="71" value="pH" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="72" Location="1062.9920654296875;59.055118560791016" Size="295.27560424804687;118.11023712158203" Name="textBox23" Text="Dissolved Oxygen" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="73" /><RawValue type="System.String" id="74" value="Dissolved Oxygen" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="75" Location="1948.81884765625;59.055118560791016" Size="295.27560424804687;118.11023712158203" Name="textBox24" Text="Phycocyanin" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="76" /><RawValue type="System.String" id="77" value="Phycocyanin" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="78" Location="1358.2677001953125;59.055118560791016" Size="295.27560424804687;118.11023712158203" Name="textBox25" Text="Dissolved Oxygen" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="79" /><RawValue type="System.String" id="74" value="Dissolved Oxygen" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="80" Location="1948.81884765625;177.16535949707031" Size="295.27560424804687;118.11023712158203" Name="textBox26" Text="μg/l" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="81" /><RawValue type="System.String" id="51" value="μg/l" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="82" Location="2834.645751953125;59.055118560791016" Size="295.27560424804687;118.11023712158203" Name="textBox27" Text="Conductivity" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="83" /><RawValue type="System.String" id="84" value="Conductivity" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="85" Location="2244.094482421875;0" Size="885.8267822265625;59.055118560791016" Name="textBox28" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="86"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="87" Expression="dataBand1[&quot;DaysSince&quot;]" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="88" value="Days since" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="89" /></Item><Item type="PerpetuumSoft.Reporting.DOM.DataBand" id="90" Location="0;413.38583374023437" Size="3300;177.16535949707031" Name="dataBand2" ColumnsGap="0" StyleName="Normal" DataSource="ReportTables.GroupBy.GroupByProfile"><Sort type="PerpetuumSoft.Reporting.DOM.DataBandSortCollection" id="91" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="92"><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="93" Location="0;59.055118560791016" Size="3300;59.055118560791016" Name="detail3"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="94" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="95"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="96" Location="177.16535949707031;0" Size="295.27560424804687;59.055118560791016" Name="textBox29" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="97"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="98" Expression="dataBand2[&quot;HeightAboveFloor&quot;]" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="99" Location="472.44094848632812;0" Size="295.27560424804687;59.055118560791016" Name="textBox30" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="100"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="101" Expression="dataBand2[&quot;Depth&quot;]" PropertyName="Value" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="102" Location="767.716552734375;0" Size="295.27560424804687;59.055118560791016" Name="textBox31" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="103"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="104" Expression="dataBand2[&quot;Temp&quot;]" PropertyName="Value" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="105" Expression="TemperatureFillColor(dataBand2[&quot;Temp&quot;])" PropertyName="Fill" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="106" Location="1062.9920654296875;0" Size="295.27560424804687;59.055118560791016" Name="textBox32" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="107"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="108" Expression="dataBand2[&quot;OxySat&quot;]" PropertyName="Value" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="109" Expression="OxySatFillColor(dataBand2[&quot;OxySat&quot;])" PropertyName="Fill" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="110" Location="1358.2677001953125;0" Size="295.27560424804687;59.055118560791016" Name="textBox33" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="111"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="112" Expression="dataBand2[&quot;O2Dis&quot;]" PropertyName="Value" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="113" Expression="O2DisFillColor(dataBand2[&quot;O2Dis&quot;])" PropertyName="Fill" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="114" Location="1653.5433349609375;0" Size="295.27560424804687;59.055118560791016" Name="textBox34" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="115"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="116" Expression="dataBand2[&quot;Chloro&quot;]" PropertyName="Value" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="117" Expression="ChloroFillColor(dataBand2[&quot;Chloro&quot;])" PropertyName="Fill" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="118" Location="1948.81884765625;0" Size="295.27560424804687;59.055118560791016" Name="textBox35" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="119"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="120" Expression="dataBand2[&quot;Phyco&quot;]" PropertyName="Value" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="121" Expression="PhycoFillColor(dataBand2[&quot;Phyco&quot;])" PropertyName="Fill" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="122" Location="2244.094482421875;0" Size="295.27560424804687;59.055118560791016" Name="textBox36" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="123"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="124" Expression="dataBand2[&quot;Turb&quot;]" PropertyName="Value" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="125" Expression="TurbidityFillColor(dataBand2[&quot;Turb&quot;])" PropertyName="Fill" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="126" Location="2539.3701171875;0" Size="295.27560424804687;59.055118560791016" Name="textBox37" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="127"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="128" Expression="dataBand2[&quot;pH&quot;]" PropertyName="Value" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="129" Expression="pHFillColor(dataBand2[&quot;pH&quot;])" PropertyName="Fill" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="130" Location="2834.645751953125;0" Size="295.27560424804687;59.055118560791016" Name="textBox38" ExportAsPictureInXaml="false" TextAlign="TopCenter"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="23" All="1 Solid Black" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="131"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="132" Expression="dataBand2[&quot;SpCond&quot;]" PropertyName="Value" /></DataBindings></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="133" /></Item></Controls><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="134" /><Totals type="PerpetuumSoft.Reporting.DOM.DataBandTotalCollection" id="135" /><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="136" /></Item></Controls><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="137" /><Totals type="PerpetuumSoft.Reporting.DOM.DataBandTotalCollection" id="138" /><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="139" /></Item><Item type="PerpetuumSoft.Reporting.DOM.PageFooter" id="140" StyleName="PageFooter" Location="0;1122.0472412109375" Name="pageFooter1" Size="3300;118.11023712158203"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="141" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="142"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="143" Location="177.16535949707031;0" Size="1299.212646484375;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox1" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="144"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="145" Expression="&quot;Report generated at &quot; + Now.ToUniversalTime().ToString(&quot;dd/MM/yyyy HH:mm&quot;);" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="146" Size="8.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item></Controls></Item></Pages><DataSources type="PerpetuumSoft.Reporting.Data.DocumentDataSourceCollection" id="147" /><StyleSheet type="PerpetuumSoft.Reporting.DOM.StyleSheet" id="148"><Styles type="PerpetuumSoft.Reporting.DOM.StyleCollection" id="149"><Item type="PerpetuumSoft.Reporting.DOM.Style" id="150" Name="HeaderFooter"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="151" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="152" Name="HeaderFooter1"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="153" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="154" Name="HeaderFooter2"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="155" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="156" Name="HeaderFooter3"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="157" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="158" Name="Even"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="159" Size="9" FamilyName="Calibri" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="160" Name="Odd"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="161" Size="9" FamilyName="Calibri" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="162" Color="Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="163" Name="Normal"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="164" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Styles></StyleSheet></root>
