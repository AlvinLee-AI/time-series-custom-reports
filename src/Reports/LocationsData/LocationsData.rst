<?xml version="1.0" encoding="utf-8" standalone="yes"?><root type="PerpetuumSoft.Reporting.DOM.Document" id="1" version="2" Name="LocationsData" IsTemplate="true" Title="Locations Data" ImportsString="LocationsDataNamespace&#xD;&#xA;ReportPluginFramework.Properties&#xD;&#xA;ReportPluginFramework&#xD;&#xA;System.Linq&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesComputedStatistics&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesData&#xD;&#xA;System.Collections.Generic&#xD;&#xA;System.Data&#xD;&#xA;Server.Services.PublishService.ServiceModel.RequestDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.ResponseDtos&#xD;&#xA;Server.Services.PublishService.ServiceModel.Dtos" DocumentGuid="b66088a4-5863-4a29-acbf-91d830b877cc" DoublePass="true" CommonScript="// Common functions, variables and defaults&#xD;&#xA;//&#xD;&#xA;&#xD;&#xA;public Common CommonLibrary = null;&#xD;&#xA;public string ReportTitle = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;public double RegularColumnWidth = 2.5; // width in cm&#xD;&#xA;public double WideColumnWidth = 10; // width in cm&#xD;&#xA;public double RegularHeight = 2.0; // height of each row in cm&#xD;&#xA;public double ShortHeight = 1.0; // height of header row in cm&#xD;&#xA;&#xD;&#xA;public int FirstLocationNoteColumn = -1;&#xD;&#xA;public int NumberOfStaticColumns = 10;&#xD;&#xA;&#xD;&#xA;public int DescriptionIndex = 2; // third column therefore index is 2&#xD;&#xA;&#xD;&#xA;public double PageHeight = 20.0; // page height in cm&#xD;&#xA;&#xD;&#xA;public PerpetuumSoft.Framework.Drawing.Vector GetSize(bool adjustHeight, int linenumber, int columnIndex)&#xD;&#xA;{&#xD;&#xA;  double height = RegularHeight;&#xD;&#xA;  &#xD;&#xA;  if (adjustHeight) &#xD;&#xA;  {  &#xD;&#xA;    // a textbox in main table&#xD;&#xA;    DataTable table = (DataTable) Engine.Objects[&quot;ReportTables.Locations&quot;];&#xD;&#xA;    int maxLen = 0;&#xD;&#xA;    int maxNewLines = 0;&#xD;&#xA;    foreach (object item in table.Rows[linenumber - 1].ItemArray)&#xD;&#xA;    {&#xD;&#xA;      int len = item.ToString().Length;&#xD;&#xA;      if (maxLen &lt; len) maxLen = len;&#xD;&#xA;      int countNewLines = item.ToString().Split('\n').Length - 1;&#xD;&#xA;      if (maxNewLines &lt; countNewLines) maxNewLines = countNewLines;&#xD;&#xA;      &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if (maxLen &gt; 400) height = 2 * RegularHeight;&#xD;&#xA;    if (maxNewLines &gt; 10) height = 3 * RegularHeight;&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    // header table&#xD;&#xA;    height = ShortHeight;&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  if (columnIndex == DescriptionIndex)&#xD;&#xA;  {&#xD;&#xA;    return new PerpetuumSoft.Framework.Drawing.Vector(WideColumnWidth, height).ConvertUnits(Unit.Centimeter, Unit.InternalUnit);&#xD;&#xA;  }&#xD;&#xA;  else if ((FirstLocationNoteColumn &gt; 0) &amp;&amp; (columnIndex &gt;= FirstLocationNoteColumn))&#xD;&#xA;  {&#xD;&#xA;    return new PerpetuumSoft.Framework.Drawing.Vector(WideColumnWidth, height).ConvertUnits(Unit.Centimeter, Unit.InternalUnit);&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    return new PerpetuumSoft.Framework.Drawing.Vector(RegularColumnWidth, height).ConvertUnits(Unit.Centimeter, Unit.InternalUnit);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AdjustPageSize(int numberOfColumns)&#xD;&#xA;{ &#xD;&#xA;  if ((FirstLocationNoteColumn &gt; 0) &amp;&amp; (numberOfColumns &gt; FirstLocationNoteColumn))&#xD;&#xA;  {&#xD;&#xA;    // make page wider to fit the columns&#xD;&#xA;    int numberOfNotes = numberOfColumns - FirstLocationNoteColumn;    &#xD;&#xA;    int numberOfRegular = numberOfColumns - numberOfNotes - 1;&#xD;&#xA;    int numberOfWide = numberOfColumns - numberOfRegular;&#xD;&#xA;    &#xD;&#xA;    page1.CustomSize = new PerpetuumSoft.Framework.Drawing.Vector((numberOfWide * WideColumnWidth) +&#xD;&#xA;      (numberOfRegular * RegularColumnWidth) + 0.1, PageHeight).ConvertUnits(Unit.Centimeter, Unit.InternalUnit);&#xD;&#xA;  }&#xD;&#xA;  else if (numberOfColumns &gt; NumberOfStaticColumns)&#xD;&#xA;  {&#xD;&#xA;    // make page wider to fit the columns&#xD;&#xA;    page1.CustomSize = new PerpetuumSoft.Framework.Drawing.Vector(WideColumnWidth +&#xD;&#xA;      ((numberOfColumns - 1) * RegularColumnWidth) + 0.1, PageHeight).ConvertUnits(Unit.Centimeter, Unit.InternalUnit);&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    page1.CustomSize = new PerpetuumSoft.Framework.Drawing.Vector(WideColumnWidth +&#xD;&#xA;      ((NumberOfStaticColumns - 1) * RegularColumnWidth) + 0.1, PageHeight).ConvertUnits(Unit.Centimeter, Unit.InternalUnit);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public List&lt;string&gt; SkipAttributes()&#xD;&#xA;{&#xD;&#xA;  List&lt;string&gt; attributesToSkip = new List&lt;string&gt;();&#xD;&#xA;  string skip = (string) GetData(&quot;ReportTables.ReportSettings.SkipAttributes&quot;);&#xD;&#xA;  if (!string.IsNullOrEmpty(skip))&#xD;&#xA;  {&#xD;&#xA;    string [] attrs = skip.Split(new string[]{&quot;,&quot;}, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    foreach (string attr in attrs)&#xD;&#xA;    {&#xD;&#xA;      attributesToSkip.Add(attr.Trim());&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return attributesToSkip;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public bool ShouldIgnoreColumn(string columnCaption)&#xD;&#xA;{&#xD;&#xA;  foreach (string name in SkipAttributes())&#xD;&#xA;  {&#xD;&#xA;    if (name == columnCaption)&#xD;&#xA;      return true;&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  return false;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string FilterDescriptionString()&#xD;&#xA;{&#xD;&#xA;  string idFilter = LocationIdentifierFilterString();&#xD;&#xA;  string nameFilter = LocationNameFilterString();&#xD;&#xA;  string folderFilter = PrimaryFolderFilterString();&#xD;&#xA;  string tagFilter = LocationTagFilterString();&#xD;&#xA;  &#xD;&#xA;  string spaces = &quot;,  &quot;;&#xD;&#xA;    &#xD;&#xA;  return string.Format(&quot;{0}{1}{2}{1}{3}{1}{4}&quot;, idFilter, spaces, nameFilter, folderFilter, tagFilter);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string LocationIdentifierFilterString()&#xD;&#xA;{&#xD;&#xA;  return Resources.LocationIdentifierFilter + &quot;: &quot; + GetData(&quot;ReportTables.ReportSettings.LocationIdentifierFilterPartialName&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string LocationNameFilterString()&#xD;&#xA;{&#xD;&#xA;  return Resources.LocationNameFilter + &quot;: &quot; + GetData(&quot;ReportTables.ReportSettings.LocationNameFilterPartialName&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string PrimaryFolderFilterString()&#xD;&#xA;{&#xD;&#xA;  return Resources.PrimaryFolderFilter + &quot;: &quot; + GetData(&quot;ReportTables.ReportSettings.PrimaryFolderFilterPartialName&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public string LocationTagFilterString()&#xD;&#xA;{&#xD;&#xA;  return &quot;Location Tag Filter&quot; + &quot;: &quot; + GetData(&quot;ReportTables.ReportSettings.LocationTagFilterPartialName&quot;);&#xD;&#xA;}&#xD;&#xA;  " ScriptLanguage="CSharp" GridStep="59.055118110236222" GenerateScript="if (Engine.IsSecondPass) return;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;Log.Debug(&quot;Begin Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  RunFileReportRequest runReportRequest = (RunFileReportRequest) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;RunReportRequest&quot;];&#xD;&#xA;  ReportPluginFramework.ReportData.IPublishGateway publish = runReportRequest.Publish;&#xD;&#xA;  CommonLibrary = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  ReportTitle = (string) dataSet.Tables[&quot;ReportSettings&quot;].Rows[0][&quot;ReportTitle&quot;];&#xD;&#xA;  &#xD;&#xA;  string dllName = (string) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;];&#xD;&#xA;  &#xD;&#xA;  ///////////////////////////////////////////////////////////////&#xD;&#xA;  &#xD;&#xA;  string locationIdentifierFilter = CommonLibrary.GetParameterString(&quot;LocationIdentifierFilterPartialName&quot;, &quot;&quot;);&#xD;&#xA;  string locationNameFilter = CommonLibrary.GetParameterString(&quot;LocationNameFilterPartialName&quot;, &quot;&quot;);&#xD;&#xA;  string primaryFolderFilter = CommonLibrary.GetParameterString(&quot;PrimaryFolderFilterPartialName&quot;, &quot;&quot;);&#xD;&#xA;  string locationTagFilters = CommonLibrary.GetParameterString(&quot;LocationTagFilterPartialName&quot;, &quot;&quot;);&#xD;&#xA;&#xD;&#xA;  List&lt;string&gt; trimmedLocationTagFilterList = new List&lt;string&gt;();&#xD;&#xA;&#xD;&#xA;  if (!string.IsNullOrEmpty(locationTagFilters))&#xD;&#xA;  {&#xD;&#xA;    string[] tagFilterArray = locationTagFilters.Split(new string[] { &quot;+&quot; }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;    foreach (string tagFilter in tagFilterArray) trimmedLocationTagFilterList.Add(tagFilter.Trim());&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  string sortOn = CommonLibrary.GetParameterString(&quot;SortOn&quot;, &quot;LocationIdentifier&quot;);&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;LocationsCaptions&quot;))&#xD;&#xA;  {&#xD;&#xA;    dataSet.Tables[&quot;LocationsCaptions&quot;].Rows.Clear();&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    DataTable locationsCaptionsTable = new DataTable(&quot;LocationsCaptions&quot;);&#xD;&#xA;    locationsCaptionsTable.Columns.Add(&quot;Caption&quot;, typeof(string));&#xD;&#xA;    dataSet.Tables.Add(locationsCaptionsTable);&#xD;&#xA;  }&#xD;&#xA;  DataTable locationCaptions = dataSet.Tables[&quot;LocationsCaptions&quot;];&#xD;&#xA;&#xD;&#xA;  if (dataSet.Tables.Contains(&quot;Locations&quot;))&#xD;&#xA;  {&#xD;&#xA;    dataSet.Tables[&quot;Locations&quot;].Rows.Clear();&#xD;&#xA;    dataSet.Tables[&quot;Locations&quot;].Columns.Add(&quot;LocationDataServiceResponse&quot;, typeof(object));&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    DataTable locationsTable = new DataTable(&quot;Locations&quot;);&#xD;&#xA;    locationsTable.Columns.Add(&quot;Identifier&quot;, typeof(string));&#xD;&#xA;    locationsTable.Columns.Add(&quot;Name&quot;, typeof(string));&#xD;&#xA;    locationsTable.Columns.Add(&quot;Description&quot;, typeof(string));&#xD;&#xA;    locationsTable.Columns.Add(&quot;UTCOffset&quot;, typeof(string));&#xD;&#xA;    locationsTable.Columns.Add(&quot;Type&quot;, typeof(string));&#xD;&#xA;    locationsTable.Columns.Add(&quot;Elevation&quot;, typeof(string));&#xD;&#xA;    locationsTable.Columns.Add(&quot;Units&quot;, typeof(string));&#xD;&#xA;    locationsTable.Columns.Add(&quot;Latitude&quot;, typeof(string));&#xD;&#xA;    locationsTable.Columns.Add(&quot;Longitude&quot;, typeof(string));&#xD;&#xA;    locationsTable.Columns.Add(&quot;PrimaryFolder&quot;, typeof(string));&#xD;&#xA;    &#xD;&#xA;    NumberOfStaticColumns = locationsTable.Columns.Count;&#xD;&#xA;&#xD;&#xA;    locationsTable.Columns.Add(&quot;LocationDataServiceResponse&quot;, typeof(object));&#xD;&#xA;    dataSet.Tables.Add(locationsTable);    &#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  DataTable locations = dataSet.Tables[&quot;Locations&quot;];&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;LocationData&quot;))&#xD;&#xA;  {&#xD;&#xA;    dataSet.Tables[&quot;LocationData&quot;].Rows.Clear();&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    DataTable locationsDataTable = new DataTable(&quot;LocationData&quot;);&#xD;&#xA;    locationsDataTable.Columns.Add(&quot;Identifier&quot;, typeof(string));&#xD;&#xA;    locationsDataTable.Columns.Add(&quot;Value&quot;, typeof(string));&#xD;&#xA;    dataSet.Tables.Add(locationsDataTable);&#xD;&#xA;  }&#xD;&#xA;  DataTable locationData = dataSet.Tables[&quot;LocationData&quot;];&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;GroupBy&quot;))&#xD;&#xA;  {&#xD;&#xA;    dataSet.Tables[&quot;GroupBy&quot;].Rows.Clear();&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    DataTable groupByTable = new DataTable(&quot;GroupBy&quot;);&#xD;&#xA;    groupByTable.Columns.Add(&quot;Identifier&quot;, typeof(string));&#xD;&#xA;    dataSet.Tables.Add(groupByTable);&#xD;&#xA;    &#xD;&#xA;    dataSet.Relations.Add(&quot;GroupByLocationData&quot;, dataSet.Tables[&quot;GroupBy&quot;].Columns[&quot;Identifier&quot;], dataSet.Tables[&quot;LocationData&quot;].Columns[&quot;Identifier&quot;]);&#xD;&#xA;  }&#xD;&#xA;  DataTable groupBy = dataSet.Tables[&quot;GroupBy&quot;];&#xD;&#xA;  &#xD;&#xA;  LocationDescriptionListServiceRequest locationDescriptionRequest = new LocationDescriptionListServiceRequest();&#xD;&#xA;&#xD;&#xA;  if (!string.IsNullOrEmpty(locationIdentifierFilter)) locationDescriptionRequest.LocationIdentifier = locationIdentifierFilter;&#xD;&#xA;  if (!string.IsNullOrEmpty(locationNameFilter)) locationDescriptionRequest.LocationName = locationNameFilter;&#xD;&#xA;  if (!string.IsNullOrEmpty(primaryFolderFilter)) locationDescriptionRequest.LocationFolder = primaryFolderFilter;&#xD;&#xA;&#xD;&#xA;  if (trimmedLocationTagFilterList.Count &gt; 0) locationDescriptionRequest.TagKeys = trimmedLocationTagFilterList;&#xD;&#xA;&#xD;&#xA;  List&lt;LocationDescription&gt; locationDescriptions = new List&lt;LocationDescription&gt;();&#xD;&#xA;&#xD;&#xA;  try&#xD;&#xA;  {&#xD;&#xA;    LocationDescriptionListServiceResponse locResponse = publish.Get(locationDescriptionRequest);&#xD;&#xA;    locationDescriptions = locResponse.LocationDescriptions;&#xD;&#xA;  }&#xD;&#xA;  catch (Exception exp)&#xD;&#xA;  {&#xD;&#xA;    // avoid report failing due to error thrown when primaryFolderFilter does not exist&#xD;&#xA;    string errorMessage = exp.Message;&#xD;&#xA;    if (errorMessage != string.Format(&quot;Folder {0} does not exist in the system.&quot;, primaryFolderFilter))&#xD;&#xA;      throw exp;&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  if (sortOn == &quot;LocationName&quot;)&#xD;&#xA;    locationDescriptions.Sort((x, y) =&gt; x.Name.CompareTo(y.Name));&#xD;&#xA;  else if (sortOn == &quot;PrimaryFolder&quot;)&#xD;&#xA;    locationDescriptions.Sort((x, y) =&gt; x.PrimaryFolder.CompareTo(y.PrimaryFolder));&#xD;&#xA;  else&#xD;&#xA;    locationDescriptions.Sort((x, y) =&gt; x.Identifier.CompareTo(y.Identifier));&#xD;&#xA;&#xD;&#xA;  foreach (LocationDescription locationDescription in locationDescriptions)&#xD;&#xA;  {                &#xD;&#xA;    DataRow locRow = locations.NewRow();&#xD;&#xA;    locRow[&quot;Identifier&quot;] = locationDescription.Identifier;&#xD;&#xA;    locRow[&quot;Name&quot;] = locationDescription.Name;&#xD;&#xA;    locRow[&quot;PrimaryFolder&quot;] = locationDescription.PrimaryFolder;&#xD;&#xA;&#xD;&#xA;    LocationDataServiceRequest locDataRequest = new LocationDataServiceRequest();&#xD;&#xA;    locDataRequest.LocationIdentifier = locationDescription.Identifier;&#xD;&#xA;    LocationDataServiceResponse locationDataResponse = publish.Get(locDataRequest);&#xD;&#xA;&#xD;&#xA;    locRow[&quot;Description&quot;] = locationDataResponse.Description;&#xD;&#xA;    locRow[&quot;Latitude&quot;] = locationDataResponse.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture);&#xD;&#xA;    locRow[&quot;Longitude&quot;] = locationDataResponse.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture);&#xD;&#xA;    locRow[&quot;Elevation&quot;] = locationDataResponse.Elevation.ToString(System.Globalization.CultureInfo.InvariantCulture);&#xD;&#xA;    locRow[&quot;Units&quot;] = locationDataResponse.ElevationUnits;&#xD;&#xA;    locRow[&quot;UTCOffset&quot;] = CommonLibrary.GetOffsetString(locationDataResponse.UtcOffset);&#xD;&#xA;    locRow[&quot;Type&quot;] = locationDataResponse.LocationType;&#xD;&#xA;    locRow[&quot;LocationDataServiceResponse&quot;] = locationDataResponse;&#xD;&#xA;    &#xD;&#xA;    locations.Rows.Add(locRow);&#xD;&#xA;    &#xD;&#xA;    List&lt;ExtendedAttribute&gt; attributes = locationDataResponse.ExtendedAttributes;&#xD;&#xA;    if (attributes != null)&#xD;&#xA;    {&#xD;&#xA;      foreach (ExtendedAttribute attribute in attributes)&#xD;&#xA;      {&#xD;&#xA;        if (ShouldIgnoreColumn(attribute.Name)) continue;&#xD;&#xA;        try&#xD;&#xA;        {&#xD;&#xA;          if (!locations.Columns.Contains(attribute.Name)) locations.Columns.Add(attribute.Name, typeof(string));&#xD;&#xA;        &#xD;&#xA;          locRow[attribute.Name] = ((attribute.Value != null) ?&#xD;&#xA;            ((attribute.Type == &quot;Double&quot;) ?&#xD;&#xA;            ((double) attribute.Value).ToString(System.Globalization.CultureInfo.InvariantCulture)&#xD;&#xA;            : attribute.Value.ToString()) : &quot;&quot;);&#xD;&#xA;        }&#xD;&#xA;        catch (Exception exp)&#xD;&#xA;        {&#xD;&#xA;          Log.Error(string.Format(&quot;Exception adding column for attribute '{0}'&quot;, attribute.Name), exp);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  foreach (LocationDescription locationDescription in locationDescriptions)&#xD;&#xA;  { &#xD;&#xA;    DataRow locRow = null;&#xD;&#xA;    foreach (DataRow row in locations.Rows)&#xD;&#xA;    {&#xD;&#xA;      if (row[&quot;Identifier&quot;].ToString() == locationDescription.Identifier)&#xD;&#xA;      {&#xD;&#xA;        locRow = row;&#xD;&#xA;        break;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if (locRow == null) continue;&#xD;&#xA;    &#xD;&#xA;    LocationDataServiceResponse locationDataResponse = (LocationDataServiceResponse) locRow[&quot;LocationDataServiceResponse&quot;];&#xD;&#xA;    &#xD;&#xA;    string dateFormat = &quot;yyyy-MM-dd&quot;;&#xD;&#xA;    TimeSpan locationOffset = TimeSpan.FromHours(locationDataResponse.UtcOffset);&#xD;&#xA;    int noteNumber = 0;&#xD;&#xA;&#xD;&#xA;    List&lt;LocationNote&gt; notes = locationDataResponse.LocationNotes;&#xD;&#xA;    if (notes != null &amp;&amp; notes.Count &gt; 0)&#xD;&#xA;    {&#xD;&#xA;      foreach (LocationNote note in notes)&#xD;&#xA;      {&#xD;&#xA;        noteNumber++;&#xD;&#xA;        string details = note.Details;&#xD;&#xA;        string user = note.LastModifiedByUser;&#xD;&#xA;        string lastModifiedDate = note.LastModifiedUtc.ToString(dateFormat);&#xD;&#xA;        string fromTime = (note.FromTimeUtc.HasValue) ? note.FromTimeUtc.Value.ToOffset(locationOffset).ToString(dateFormat) : &quot;&quot;;&#xD;&#xA;        string toTime = (note.ToTimeUtc.HasValue) ? note.FromTimeUtc.Value.ToOffset(locationOffset).ToString(dateFormat) : &quot;&quot;;&#xD;&#xA;        string tagString = &quot;&quot;;&#xD;&#xA;        foreach (TagMetadata data in note.Tags)&#xD;&#xA;        {&#xD;&#xA;          tagString += ((!string.IsNullOrEmpty(tagString)) ? &quot;, &quot; : &quot;&quot;) + &#xD;&#xA;            ((string.IsNullOrEmpty(data.Value)) ? data.Key : data.Key + &quot;:&quot; + data.Value);&#xD;&#xA;        }&#xD;&#xA;      &#xD;&#xA;        string columnName = &quot;Note&quot; + noteNumber.ToString();&#xD;&#xA;        if (!locations.Columns.Contains(columnName)) locations.Columns.Add(columnName, typeof(string));&#xD;&#xA;        if (columnName == &quot;Note1&quot;) FirstLocationNoteColumn = locations.Columns.IndexOf(&quot;Note1&quot;) - 1;&#xD;&#xA;        &#xD;&#xA;        locRow[columnName] = string.Format(&quot;From Date: {0} - To Date: {1}, Last Modified By: {2}, Tags: {3}{4}{5}&quot;, &#xD;&#xA;          fromTime, toTime, user, tagString, System.Environment.NewLine, details);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  locations.Columns.Remove(&quot;LocationDataServiceResponse&quot;);&#xD;&#xA;  &#xD;&#xA;  foreach (DataRow locationsRow in locations.Rows)&#xD;&#xA;  {&#xD;&#xA;    DataRow groupByRow = groupBy.NewRow();&#xD;&#xA;    groupByRow[&quot;Identifier&quot;] = locationsRow[&quot;Identifier&quot;];&#xD;&#xA;    groupBy.Rows.Add(groupByRow);&#xD;&#xA;    &#xD;&#xA;    foreach (DataColumn locationsColumn in locations.Columns)&#xD;&#xA;    {      &#xD;&#xA;      DataRow locationDataRow = locationData.NewRow();&#xD;&#xA;      locationDataRow[&quot;Identifier&quot;] = locationsRow[&quot;Identifier&quot;];&#xD;&#xA;      locationDataRow[&quot;Value&quot;] = locationsRow[locationsColumn];&#xD;&#xA;      locationData.Rows.Add(locationDataRow);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  foreach (DataColumn column in locations.Columns)&#xD;&#xA;  {&#xD;&#xA;    DataRow captionRow = locationCaptions.NewRow();&#xD;&#xA;    captionRow[&quot;Caption&quot;] = column.ColumnName;&#xD;&#xA;    locationCaptions.Rows.Add(captionRow);&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  Log.Debug(&quot;End Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception exp)&#xD;&#xA;{&#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  string dllName = (string) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;];&#xD;&#xA;  Log.Error(&quot;Document GenerateScript - &quot; + dllName, exp);&#xD;&#xA;  Log.Info(GetData(&quot;ReportTables.RunReportRequest.ReportInputInformation&quot;));&#xD;&#xA;}&#xD;&#xA;"><Parameters type="PerpetuumSoft.Reporting.DOM.ParameterCollection" id="2" /><PageContent type="PerpetuumSoft.Reporting.DOM.Wrappers.ContentParametersDictionary" id="3" /><Pages type="PerpetuumSoft.Reporting.DOM.PageCollection" id="4"><Item type="PerpetuumSoft.Reporting.DOM.Page" id="5" Margins="0; 0; 0; 0" Size="4381.889763779528;2362.2047244094488" GenerateScript="System.Data.DataTable locData = (System.Data.DataTable) Engine.Objects[&quot;ReportTables.Locations&quot;];&#xD;&#xA;&#xD;&#xA;int numColumns = locData.Columns.Count;&#xD;&#xA;&#xD;&#xA;AdjustPageSize(numColumns);" StyleName="Normal" CustomSize="4381.889763779528;2362.2047244094488" Name="page1" Location="0;0" PaperKind="Custom"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="6" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="7"><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="8" Location="0;0" Size="4381.889763779528;236.22047424316406" Name="detail1"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="9" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="10"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="11" Location="0;0" Size="2952.755859375;118.11023712158203" Name="textBox2" Text="Locations Data" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="12" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="13" /><RawValue type="System.String" id="14" value="Locations Data" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="15" Size="18" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="16" Location="2952.7559055118113;59.055118560791016" Size="885.8267822265625;59.055118560791016" CanShrink="true" CanGrow="true" Name="textBox3" StyleName="PageNumber" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="17" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="18"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="19" Expression="&quot;Page &quot; + PageNumber.ToString() + &quot; of &quot; + PageCount.ToString()" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="20" Size="11" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="21" Location="2952.7559055118113;118.11023622047244" Size="885.8267822265625;59.055118560791016" Name="textBox5" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="22" Color="110, 112, 110" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="23"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="24" Expression="&quot;Date Processed: &quot; + Now.ToString(&quot;MMMM d, yyyy HH:mm&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="25" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="26" Location="0;118.11023712158203" Size="2952.755859375;118.11023712158203" Name="textBox1" ExportAsPictureInXaml="false" TextAlign="TopLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="27" Color="110, 112, 110" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="28"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="29" Expression="FilterDescriptionString()" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="30" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="31" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="32" Location="0;354.33071899414063" CanGrow="true" Size="4381.889763779528;236.22047424316406" CanShrink="true" Name="detail2"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="33" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="34"><Item type="PerpetuumSoft.Reporting.DOM.CrossBand" id="35" CanGrow="true" DataSource="ReportTables.LocationsCaptions" CanShrink="true" Location="0;0" Name="crossBand1" Size="295.27560424804687;236.22047424316406"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="36"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="37" Expression="GetSize(false, 0, crossBand1.Count)" PropertyName="Size" /></DataBindings><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="38"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="39" Location="0;0" Size="295.27560424804687;236.22047424316406" Margins="0; 0; 17.7165354330709; 0" Name="textBox6" ExportAsPictureInXaml="false" TextAlign="TopLeft"><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="40" Color="33, 64, 154" /><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="41" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="42" All="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="43"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="44" Expression="GetSize(false, 0, crossBand1.Count)" PropertyName="Size" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="45" Expression="(GetData(&quot;ReportTables.LocationsCaptions.Caption&quot;).ToString().StartsWith(&quot;Note&quot;))?&#xD;&#xA;  &quot;Location Note&quot; : GetData(&quot;ReportTables.LocationsCaptions.Caption&quot;).ToString()" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="46" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="47" /></Item><Item type="PerpetuumSoft.Reporting.DOM.DataBand" id="48" Location="0;708.66143798828125" Size="4381.889763779528;354.33071899414063" Name="dataBand1" ColumnsGap="0" DataSource="ReportTables.GroupBy"><Sort type="PerpetuumSoft.Reporting.DOM.DataBandSortCollection" id="49" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="50"><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="51" Location="0;59.055118560791016" CanGrow="true" Size="4381.889763779528;236.22047424316406" CanShrink="true" Name="detail3"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="52" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="53"><Item type="PerpetuumSoft.Reporting.DOM.CrossBand" id="54" CanGrow="true" DataSource="ReportTables.GroupBy.GroupByLocationData" CanShrink="true" Location="0;0" Name="crossBand2" Size="295.27560424804687;236.22047424316406"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="55"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="56" Expression="GetSize(true, dataBand1.LineNumber, crossBand2.Count)" PropertyName="Size" /></DataBindings><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="57"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="58" Location="0;0" Size="295.27560424804687;236.22047244094489" Margins="0; 0; 17.7165354330709; 0" Name="textBox7" StyleName="Normal" StringTrimming="EllipsisCharacter" ExportAsPictureInXaml="false" TextAlign="TopLeft"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="42" All="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="59"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="60" Expression="GetSize(true, dataBand1.LineNumber, crossBand2.Count)" PropertyName="Size" /><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="61" Expression="GetData(&quot;ReportTables.GroupBy.GroupByLocationData.Value&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="62" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="63" /></Item></Controls><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="64" /><Totals type="PerpetuumSoft.Reporting.DOM.DataBandTotalCollection" id="65" /><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="66" /></Item></Controls></Item></Pages><DataSources type="PerpetuumSoft.Reporting.Data.DocumentDataSourceCollection" id="67" /><StyleSheet type="PerpetuumSoft.Reporting.DOM.StyleSheet" id="68"><Styles type="PerpetuumSoft.Reporting.DOM.StyleCollection" id="69"><Item type="PerpetuumSoft.Reporting.DOM.Style" id="70" Name="HeaderFooter"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="71" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="72" Name="HeaderFooter1"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="73" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="74" Name="HeaderFooter2"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="75" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="76" Name="HeaderFooter3"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="77" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="78" Name="Even"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="79" Size="9" FamilyName="Calibri" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="80" Name="Odd"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="81" Size="9" FamilyName="Calibri" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="82" Color="Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="83" Name="Normal"><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="84" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Styles></StyleSheet></root>