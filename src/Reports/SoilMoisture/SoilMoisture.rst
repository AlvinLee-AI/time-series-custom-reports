<?xml version="1.0" encoding="utf-8" standalone="yes"?><root type="PerpetuumSoft.Reporting.DOM.Document" id="1" version="2" Name="SoilMoisture" IsTemplate="true" Title="Report Title" ImportsString="SoilMoistureNamespace&#xD;&#xA;ReportPluginFramework.Properties&#xD;&#xA;ReportPluginFramework&#xD;&#xA;ReportPluginFramework.ReportData&#xD;&#xA;System.Linq&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesComputedStatistics&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesData&#xD;&#xA;ReportPluginFramework.ReportData.TimeSeriesDescription&#xD;&#xA;System.Collections.Generic&#xD;&#xA;System.Windows.Forms.DataVisualization.Charting&#xD;&#xA;System.Data&#xD;&#xA;" DocumentGuid="6551801d-52ff-489f-a58e-e387fc865381" MetricUnit="Pixel" DoublePass="true" CommonScript="// Common functions, variables and defaults&#xD;&#xA;//&#xD;&#xA;&#xD;&#xA;public string ReportTitle = &quot;&quot;;&#xD;&#xA;public string CoverageSetting = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;public int ChartYear = 2000; // choose any year to map a year's values&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;public void DrawChart(PerpetuumSoft.Reporting.MSChart.MicrosoftChart microsoftChart1, DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  InitChart(microsoftChart1, dataSet); &#xD;&#xA;  AddDailyLines(microsoftChart1, dataSet); &#xD;&#xA;  AddPrecipColumns(microsoftChart1, dataSet); &#xD;&#xA;  AddStripLines(microsoftChart1, dataSet); &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void InitChart(PerpetuumSoft.Reporting.MSChart.MicrosoftChart microsoftChart1, DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  microsoftChart1.Series.Clear();&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisY.StripLines.Clear();&#xD;&#xA;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.LabelStyle.Format = &quot;MMM&quot;;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.MajorTickMark.Interval = 1;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.MajorTickMark.IntervalType = DateTimeIntervalType.Months;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.IntervalType = DateTimeIntervalType.Months;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.Interval = 1;&#xD;&#xA;  &#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.MajorGrid.Interval = 1;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.MajorGrid.IntervalType = DateTimeIntervalType.Months;&#xD;&#xA;  &#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisY.Title = &quot;Soil Moisture 250mm Root Zone (mm)&quot;;  &#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisY2.LabelStyle.Enabled = false;&#xD;&#xA;  &#xD;&#xA;  Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  string Station = (string) dataSet.Tables[&quot;ReportSettings&quot;].Rows[0][&quot;Station&quot;];&#xD;&#xA;&#xD;&#xA;  double yAxisMin = common.GetParameterDouble(Station + &quot;-YAxis-Minimum&quot;, 0);&#xD;&#xA;  double yAxisMax = common.GetParameterDouble(Station + &quot;-YAxis-Maximum&quot;, 150);&#xD;&#xA;  double secondaryYAxisMax = common.GetParameterDouble(Station + &quot;-SecondaryYAxis-Maximum&quot;, 1000);&#xD;&#xA;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisY.Minimum = yAxisMin;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisY.Maximum = yAxisMax;&#xD;&#xA; &#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisY2.Minimum = 0;&#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisY2.Maximum = secondaryYAxisMax; &#xD;&#xA;  &#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisX.Title = Station;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddDailyLines(PerpetuumSoft.Reporting.MSChart.MicrosoftChart microsoftChart1, DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  DataTable groupBy = dataSet.Tables[&quot;GroupBy&quot;];&#xD;&#xA;  int numGroups = groupBy.Rows.Count;&#xD;&#xA;&#xD;&#xA;  double[] total = new double[12];&#xD;&#xA;  double[] cnt = new double[12];&#xD;&#xA;  for (int i = 0; i &lt; 12; i++)&#xD;&#xA;  {&#xD;&#xA;    total[i] = 0;&#xD;&#xA;    cnt[i] = 0;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  foreach (System.Data.DataRow groupRow in groupBy.Rows)&#xD;&#xA;  {&#xD;&#xA;    System.Data.DataRow[] groupPoints = groupRow.GetChildRows(&quot;GroupByDailyStatistic&quot;);  &#xD;&#xA;    foreach (System.Data.DataRow groupPoint in groupPoints)&#xD;&#xA;    {&#xD;&#xA;      int mon = (int) groupPoint[&quot;Month&quot;];   &#xD;&#xA;      double value = (double) groupPoint[&quot;Value&quot;];&#xD;&#xA;      &#xD;&#xA;      if (!double.IsNaN(value))&#xD;&#xA;      {&#xD;&#xA;        total[mon - 1] += value;&#xD;&#xA;        cnt[mon - 1] += 1;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  System.Drawing.Color avgColor = System.Drawing.Color.Black;&#xD;&#xA;  &#xD;&#xA;  Series srsAvg = AddSeries(microsoftChart1, &quot;Historical Monthly Average&quot;, avgColor);&#xD;&#xA;  srsAvg.ChartType = SeriesChartType.Spline;  &#xD;&#xA;  srsAvg.BorderWidth = 6;&#xD;&#xA;  &#xD;&#xA;  double startEndAvg = (((cnt[0] &gt; 0) ? total[0] / cnt[0] : 0)&#xD;&#xA;    + ((cnt[11] &gt; 0) ? total[11] / cnt[11] : 0)) / 2.0;&#xD;&#xA;&#xD;&#xA;  for (int i = 0; i &lt; 12; i++)&#xD;&#xA;  {&#xD;&#xA;    double shift = DateTime.DaysInMonth(ChartYear, i + 1) / 2.0;&#xD;&#xA;    double mon = (new DateTime(ChartYear, i + 1, 1)).ToOADate() + shift;&#xD;&#xA;   &#xD;&#xA;    double avg = (cnt[i] &gt; 0) ? total[i] / cnt[i] : double.NaN;&#xD;&#xA;    DataPoint dp = new DataPoint(mon, avg);&#xD;&#xA;  &#xD;&#xA;   &#xD;&#xA;    if (double.IsNaN(avg)) dp.IsEmpty = true;&#xD;&#xA;  &#xD;&#xA;    if (i == 0)&#xD;&#xA;    {&#xD;&#xA;      srsAvg.Points.Add(new DataPoint(mon - shift, startEndAvg));&#xD;&#xA;    }&#xD;&#xA;  &#xD;&#xA;    srsAvg.Points.Add(dp);&#xD;&#xA;  &#xD;&#xA;    if (i == 11)&#xD;&#xA;    {&#xD;&#xA;      srsAvg.Points.Add(new DataPoint(mon + shift, startEndAvg));&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  System.Drawing.Color prevYearColor = System.Drawing.Color.Blue;&#xD;&#xA;  System.Drawing.Color currYearColor = System.Drawing.Color.Red;&#xD;&#xA;&#xD;&#xA;  for (int i = numGroups - 2; i &lt; numGroups; i++)&#xD;&#xA;  {&#xD;&#xA;    DataRow[] groupPoints = groupBy.Rows[i].GetChildRows(&quot;GroupByDailyStatistic&quot;);&#xD;&#xA;&#xD;&#xA;    System.Drawing.Color yearColor = (i == (numGroups - 1)) ? currYearColor : prevYearColor;&#xD;&#xA;    int groupYear = (int) groupBy.Rows[i][&quot;Year&quot;];&#xD;&#xA;  &#xD;&#xA;    Series series = AddSeries(microsoftChart1, groupYear.ToString(), yearColor);&#xD;&#xA;    series.ChartType = SeriesChartType.Spline;  &#xD;&#xA;    series.BorderWidth = 6;&#xD;&#xA;  &#xD;&#xA;    foreach (DataRow groupPoint in groupPoints)&#xD;&#xA;    {&#xD;&#xA;      int month = (int) groupPoint[&quot;Month&quot;];&#xD;&#xA;      int day = (int) groupPoint[&quot;Day&quot;];&#xD;&#xA;      double chartTime = (new DateTime(ChartYear, month, day)).ToOADate();&#xD;&#xA;      double value = (double) groupPoint[&quot;Value&quot;];  &#xD;&#xA;      DataPoint dp = new DataPoint(chartTime, value);     &#xD;&#xA;      series.Points.Add(dp);&#xD;&#xA;      if (double.IsNaN(value)) dp.IsEmpty = true;    &#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;public void AddPrecipColumns(PerpetuumSoft.Reporting.MSChart.MicrosoftChart microsoftChart1, DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  // Calculate the Historical Average from values in the DataTable&#xD;&#xA;  string unit = (string) GetData(&quot;ReportTables.PrecipitationData.Unit&quot;);&#xD;&#xA;  &#xD;&#xA;  // Calculate the Historical Average from values in the DataTable  &#xD;&#xA;  DataTable groupBy = dataSet.Tables[&quot;GroupBy&quot;];&#xD;&#xA;  int numGroups = groupBy.Rows.Count;&#xD;&#xA;&#xD;&#xA;  double[] total = new double[12];&#xD;&#xA;  double[] cnt = new double[12];&#xD;&#xA;  for (int i = 0; i &lt; 12; i++)&#xD;&#xA;  {&#xD;&#xA;    total[i] = 0;&#xD;&#xA;    cnt[i] = 0;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  foreach (DataRow groupRow in groupBy.Rows)&#xD;&#xA;  {&#xD;&#xA;    DataRow[] groupPoints = groupRow.GetChildRows(&quot;GroupByMonthlyStatistic&quot;);&#xD;&#xA;    foreach (DataRow groupPoint in groupPoints)&#xD;&#xA;    {&#xD;&#xA;      int mon = (int) groupPoint[&quot;Month&quot;];    &#xD;&#xA;      double value = (double) groupPoint[&quot;Value&quot;];&#xD;&#xA;      &#xD;&#xA;      if (!double.IsNaN(value))&#xD;&#xA;      {&#xD;&#xA;        total[mon - 1] += (double) value;&#xD;&#xA;        cnt[mon - 1] += 1;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  System.Drawing.Color avgColor = System.Drawing.Color.FromArgb(128, 128, 128);&#xD;&#xA;  System.Drawing.Color prevYearColor = System.Drawing.Color.FromArgb(173, 216, 230);&#xD;&#xA;  System.Drawing.Color currYearColor = System.Drawing.Color.FromArgb(205, 92, 92);&#xD;&#xA;&#xD;&#xA;  Series srsAvg = microsoftChart1.Series.Add(&quot;Historical Average&quot;);&#xD;&#xA;  srsAvg.Color = avgColor;&#xD;&#xA;  srsAvg.SmartLabelStyle.Enabled = false;&#xD;&#xA;  srsAvg.YAxisType = AxisType.Secondary;&#xD;&#xA;  &#xD;&#xA;  for (int i = 0; i &lt; 12; i++)&#xD;&#xA;  {&#xD;&#xA;    double mon = (new DateTime(ChartYear, i + 1, 15)).ToOADate();  &#xD;&#xA;    double avg = (cnt[i] &gt; 0) ? total[i] / cnt[i] : double.NaN;&#xD;&#xA;    &#xD;&#xA;    AddPrecipPoint(srsAvg, mon, avg, avg.ToString((unit == &quot;mm&quot;) ? &quot;F0&quot; : &quot;F1&quot;));&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  for (int i = numGroups - 2; i &lt; numGroups; i++)&#xD;&#xA;  {&#xD;&#xA;    DataRow[] groupPoints = groupBy.Rows[i].GetChildRows(&quot;GroupByMonthlyStatistic&quot;);&#xD;&#xA;    &#xD;&#xA;    System.Drawing.Color yearColor = (i == numGroups - 1) ? currYearColor : prevYearColor;&#xD;&#xA;    int year = (int) groupBy.Rows[i][&quot;Year&quot;];&#xD;&#xA;  &#xD;&#xA;    Series series = AddSeries(microsoftChart1, year.ToString() + &quot; Rain&quot;, yearColor);&#xD;&#xA;    series.ChartType = SeriesChartType.Column;&#xD;&#xA;    series.YAxisType = AxisType.Secondary;&#xD;&#xA;&#xD;&#xA;    foreach (System.Data.DataRow groupPoint in groupPoints)&#xD;&#xA;    {&#xD;&#xA;      int month = (int) groupPoint[&quot;Month&quot;];&#xD;&#xA;      double chartTime = (new DateTime(ChartYear, month, 15)).ToOADate();&#xD;&#xA;      double value = (double) groupPoint[&quot;Value&quot;];  &#xD;&#xA;      &#xD;&#xA;      AddPrecipPoint(series, chartTime, value, value.ToString((unit == &quot;mm&quot;) ? &quot;F0&quot; : &quot;F1&quot;));&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public Series AddSeries(PerpetuumSoft.Reporting.MSChart.MicrosoftChart microsoftChart1, string name, System.Drawing.Color color)&#xD;&#xA;{&#xD;&#xA;  Series series = microsoftChart1.Series.Add(name);&#xD;&#xA;  series.Color = color;&#xD;&#xA;  series.MarkerStyle = MarkerStyle.None;  &#xD;&#xA;  series.EmptyPointStyle.BorderWidth = 0;&#xD;&#xA;  series.EmptyPointStyle.MarkerStyle = MarkerStyle.None;&#xD;&#xA;  series.XValueType = ChartValueType.DateTime;&#xD;&#xA;  series.SmartLabelStyle.Enabled = false;&#xD;&#xA;  &#xD;&#xA;  return series;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddPrecipPoint(Series series, double chartTime, double value, string label)&#xD;&#xA;{&#xD;&#xA;  if (!double.IsNaN(value))&#xD;&#xA;  {&#xD;&#xA;    DataPoint dp = new DataPoint(chartTime, value);&#xD;&#xA;    dp.Label = label;&#xD;&#xA;    dp.Font = new System.Drawing.Font(&quot;Calibri&quot;, 8);&#xD;&#xA;    dp.LabelAngle = -45;&#xD;&#xA;    series.Points.Add(dp);&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    DataPoint dp = new DataPoint(chartTime, double.NaN);&#xD;&#xA;    dp.IsEmpty = true;&#xD;&#xA;    series.Points.Add(dp);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddStripLines(PerpetuumSoft.Reporting.MSChart.MicrosoftChart microsoftChart1, DataSet dataSet)&#xD;&#xA;{&#xD;&#xA;  string[] striplines = new string[]{&quot;Permanent Wilting Point&quot;, &quot;Stress Point&quot;, &quot;Field Capacity&quot;, &quot;Saturation Point&quot;};&#xD;&#xA;  Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  string Station = (string) dataSet.Tables[&quot;ReportSettings&quot;].Rows[0][&quot;Station&quot;];&#xD;&#xA;  &#xD;&#xA;  foreach (string striplineName in striplines)&#xD;&#xA;  {&#xD;&#xA;    double lowerLimit = common.GetParameterDouble(Station + &quot;-&quot; + striplineName + &quot;-LowerLimit&quot;, -1.0);&#xD;&#xA;    double upperLimit = common.GetParameterDouble(Station + &quot;-&quot; + striplineName + &quot;-UpperLimit&quot;, -1.0);&#xD;&#xA;    &#xD;&#xA;    if ((lowerLimit &gt; -1) &amp;&amp; (upperLimit &gt; -1) &amp;&amp; (upperLimit &gt;= lowerLimit)) &#xD;&#xA;      AddStripLine(microsoftChart1, striplineName, lowerLimit, upperLimit);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddStripLine(PerpetuumSoft.Reporting.MSChart.MicrosoftChart microsoftChart1, string name, double lowerLimit, double upperLimit)&#xD;&#xA;{&#xD;&#xA;  StripLine stripline = AddStripLineToChart(microsoftChart1, name, lowerLimit, upperLimit);&#xD;&#xA;  switch(name)&#xD;&#xA;  {&#xD;&#xA;    case &quot;Permanent Wilting Point&quot;:&#xD;&#xA;      stripline.BackColor = System.Drawing.Color.Empty;&#xD;&#xA;      stripline.TextAlignment = System.Drawing.StringAlignment.Far;&#xD;&#xA;      AddStripLineBorder(microsoftChart1, upperLimit);&#xD;&#xA;      break;&#xD;&#xA;    case &quot;Stress Point&quot;:&#xD;&#xA;      stripline.BackColor = System.Drawing.Color.FromArgb(50, 255, 165, 0);&#xD;&#xA;      stripline.TextAlignment = System.Drawing.StringAlignment.Center;&#xD;&#xA;      AddStripLineBorder(microsoftChart1, upperLimit);&#xD;&#xA;      break;&#xD;&#xA;    case &quot;Field Capacity&quot;:&#xD;&#xA;      stripline.BackColor = System.Drawing.Color.FromArgb(50, 40, 170, 0);&#xD;&#xA;      stripline.TextAlignment = System.Drawing.StringAlignment.Near;&#xD;&#xA;      AddStripLineBorder(microsoftChart1, upperLimit);&#xD;&#xA;      break;&#xD;&#xA;    case &quot;Saturation Point&quot;:&#xD;&#xA;      stripline.BackColor = System.Drawing.Color.LightBlue;&#xD;&#xA;      stripline.TextAlignment = System.Drawing.StringAlignment.Near;&#xD;&#xA;      break;&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public StripLine AddStripLineToChart(PerpetuumSoft.Reporting.MSChart.MicrosoftChart microsoftChart1, string name, double lowerLimit, double upperLimit)&#xD;&#xA;{&#xD;&#xA;  StripLine stripline = new StripLine();&#xD;&#xA;  stripline.Font = new System.Drawing.Font(&quot;Calibri&quot;, 10);&#xD;&#xA;  stripline.Interval = 0;&#xD;&#xA;  stripline.IntervalOffset = lowerLimit;&#xD;&#xA;  stripline.StripWidth = upperLimit - lowerLimit;&#xD;&#xA;  stripline.Text = name;&#xD;&#xA;  &#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisY.StripLines.Add(stripline);&#xD;&#xA;  &#xD;&#xA;  return stripline;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public void AddStripLineBorder(PerpetuumSoft.Reporting.MSChart.MicrosoftChart microsoftChart1, double offset)&#xD;&#xA;{&#xD;&#xA;  StripLine stripline = new StripLine();&#xD;&#xA;  stripline.Interval = 0;&#xD;&#xA;  stripline.IntervalOffset = offset;&#xD;&#xA;  stripline.StripWidth = 0;&#xD;&#xA;  stripline.BorderColor = System.Drawing.Color.Black;&#xD;&#xA;  stripline.BorderDashStyle = ChartDashStyle.Dash;&#xD;&#xA;  stripline.BorderWidth = 6;  &#xD;&#xA;  &#xD;&#xA;  microsoftChart1.ChartAreas[0].AxisY.StripLines.Add(stripline);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;public void DrawChart()&#xD;&#xA;{&#xD;&#xA;  // Calculate the Historical Average from values in the DataTable&#xD;&#xA;&#xD;&#xA;  aquariusChart1.Chart.Series.Clear();&#xD;&#xA;  aquariusChart1.Chart.ChartAreas[0].AxisX.LabelStyle.Format = &quot;MMM&quot;;&#xD;&#xA;  aquariusChart1.Chart.ChartAreas[0].AxisX.IntervalType = Dundas.Charting.WinControl.DateTimeIntervalType.Months;&#xD;&#xA;  aquariusChart1.Chart.ChartAreas[0].AxisX.Interval = 1;&#xD;&#xA;  aquariusChart1.YAxisTitle = &quot;Soil Moisture 250mm Root Zone (mm)&quot;;  &#xD;&#xA; &#xD;&#xA;  aquariusChart1.Chart.ChartAreas[0].AxisY2.LabelStyle.Enabled = false;&#xD;&#xA;&#xD;&#xA;  System.Data.DataTable groupBy = (System.Data.DataTable) Engine.Objects[&quot;TimeSeries1.GroupBy&quot;];&#xD;&#xA;  int numGroups = groupBy.Rows.Count;&#xD;&#xA;&#xD;&#xA;  int chartYear = 2000; // choose any year to map a year's values&#xD;&#xA;&#xD;&#xA;  double[] total = new double[12];&#xD;&#xA;  double[] cnt = new double[12];&#xD;&#xA;  for (int i = 0; i &lt; 12; i++)&#xD;&#xA;  {&#xD;&#xA;    total[i] = 0;&#xD;&#xA;    cnt[i] = 0;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  foreach (System.Data.DataRow groupRow in groupBy.Rows)&#xD;&#xA;  {&#xD;&#xA;    System.Data.DataRow[] groupPoints = groupRow.GetChildRows(&quot;GroupByAggregateData&quot;);  &#xD;&#xA;    foreach (System.Data.DataRow groupPoint in groupPoints)&#xD;&#xA;    {&#xD;&#xA;      DateTime time = (DateTime) groupPoint[&quot;TimeStamp&quot;];&#xD;&#xA;      int mon = time.Month;&#xD;&#xA;    &#xD;&#xA;      object aggr = groupPoint[&quot;Aggr&quot;];&#xD;&#xA;      if (aggr is double)&#xD;&#xA;      {&#xD;&#xA;        total[mon - 1] += (double) aggr;&#xD;&#xA;        cnt[mon - 1] += 1;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  System.Drawing.Color avgColor = System.Drawing.Color.Black;&#xD;&#xA;  System.Drawing.Color prevYearColor = System.Drawing.Color.Blue;&#xD;&#xA;  System.Drawing.Color currYearColor = System.Drawing.Color.Red;&#xD;&#xA;&#xD;&#xA;  Dundas.Charting.WinControl.Series srsAvg = aquariusChart1.Chart.Series.Add(&quot;Historical Monthly Average&quot;);&#xD;&#xA;  srsAvg.Color = avgColor;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  Dundas.Charting.WinControl.StripLine stripline = new Dundas.Charting.WinControl.StripLine();&#xD;&#xA;  stripline.Interval = 0;&#xD;&#xA;  stripline.IntervalOffset = 0;&#xD;&#xA;  stripline.StripWidth = 31.9;&#xD;&#xA;  stripline.BackColor = System.Drawing.Color.Empty;&#xD;&#xA;  stripline.Title = &quot;Permanent Wilting Point&quot;;&#xD;&#xA;  stripline.TitleAlignment = System.Drawing.StringAlignment.Far;&#xD;&#xA;  aquariusChart1.Chart.ChartAreas[0].AxisY.StripLines.Add(stripline);&#xD;&#xA;&#xD;&#xA;  Dundas.Charting.WinControl.StripLine stripline2 = new Dundas.Charting.WinControl.StripLine();&#xD;&#xA;  stripline2.Interval = 0;&#xD;&#xA;  stripline2.IntervalOffset = 65.2;&#xD;&#xA;  stripline2.StripWidth = 31.8;&#xD;&#xA;  stripline2.BackColor = System.Drawing.Color.FromArgb(150, 40, 170, 0);&#xD;&#xA;&#xD;&#xA;  stripline2.Title = &quot;Field Capacity&quot;;&#xD;&#xA;  stripline2.TitleAlignment = System.Drawing.StringAlignment.Near;&#xD;&#xA;  aquariusChart1.Chart.ChartAreas[0].AxisY.StripLines.Add(stripline2);&#xD;&#xA;&#xD;&#xA;  Dundas.Charting.WinControl.StripLine stripline3 = new Dundas.Charting.WinControl.StripLine();&#xD;&#xA;  stripline3.Interval = 0;&#xD;&#xA;  stripline3.IntervalOffset = 97.5;&#xD;&#xA;  stripline3.StripWidth = 52.5;&#xD;&#xA;  stripline3.BackColor = System.Drawing.Color.LightBlue;&#xD;&#xA;  stripline3.Title = &quot;Saturation Point&quot;;&#xD;&#xA;  stripline3.TitleAlignment = System.Drawing.StringAlignment.Near;&#xD;&#xA;  aquariusChart1.Chart.ChartAreas[0].AxisY.StripLines.Add(stripline3);&#xD;&#xA;&#xD;&#xA;  Dundas.Charting.WinControl.StripLine stripline6 = new Dundas.Charting.WinControl.StripLine();&#xD;&#xA;  stripline6.Interval = 0;&#xD;&#xA;  stripline6.IntervalOffset = 31.9;&#xD;&#xA;  stripline6.StripWidth = 33.3;&#xD;&#xA;  stripline6.BackColor = System.Drawing.Color.FromArgb(150, 255, 165, 0);&#xD;&#xA;  stripline6.TitleAlignment = System.Drawing.StringAlignment.Near;&#xD;&#xA;  aquariusChart1.Chart.ChartAreas[0].AxisY.StripLines.Add(stripline6);&#xD;&#xA;&#xD;&#xA;  Dundas.Charting.WinControl.StripLine stripline4 = new Dundas.Charting.WinControl.StripLine();&#xD;&#xA;  stripline4.Interval = 0;&#xD;&#xA;  stripline4.IntervalOffset = 65.2;&#xD;&#xA;  stripline4.StripWidth = 0;&#xD;&#xA;  stripline4.BorderColor = System.Drawing.Color.Black;&#xD;&#xA;  stripline4.Title = &quot;Stress Point&quot;;&#xD;&#xA;  stripline4.TitleAlignment = System.Drawing.StringAlignment.Center;&#xD;&#xA;  stripline4.BorderStyle = Dundas.Charting.WinControl.ChartDashStyle.Dash;&#xD;&#xA;  stripline4.BorderWidth = 6;&#xD;&#xA;  aquariusChart1.Chart.ChartAreas[0].AxisY.StripLines.Add(stripline4);&#xD;&#xA;&#xD;&#xA;  Dundas.Charting.WinControl.StripLine stripline5 = new Dundas.Charting.WinControl.StripLine();&#xD;&#xA;  stripline5.Interval = 0;&#xD;&#xA;  stripline5.IntervalOffset = 31.9;&#xD;&#xA;  stripline5.StripWidth = 0;&#xD;&#xA;  stripline5.BorderColor = System.Drawing.Color.Black;&#xD;&#xA;  stripline5.BorderStyle = Dundas.Charting.WinControl.ChartDashStyle.Dash;&#xD;&#xA;  stripline5.BorderWidth = 6;&#xD;&#xA;  aquariusChart1.Chart.ChartAreas[0].AxisY.StripLines.Add(stripline5);&#xD;&#xA;&#xD;&#xA;  Dundas.Charting.WinControl.StripLine stripline7 = new Dundas.Charting.WinControl.StripLine();&#xD;&#xA;  stripline7.Interval = 0;&#xD;&#xA;  stripline7.IntervalOffset = 97.5;&#xD;&#xA;  stripline7.StripWidth = 0;&#xD;&#xA;  stripline7.BorderColor = System.Drawing.Color.Black;&#xD;&#xA;  stripline7.BorderStyle = Dundas.Charting.WinControl.ChartDashStyle.Dash;&#xD;&#xA;  stripline7.BorderWidth = 6;&#xD;&#xA;  aquariusChart1.Chart.ChartAreas[0].AxisY.StripLines.Add(stripline7);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  double startEndAvg = (((cnt[0] &gt; 0) ? total[0] / cnt[0] : 0)&#xD;&#xA;    + ((cnt[11] &gt; 0) ? total[11] / cnt[11] : 0)) / 2.0;&#xD;&#xA;&#xD;&#xA;  for (int i = 0; i &lt; 12; i++)&#xD;&#xA;  {&#xD;&#xA;    double shift = DateTime.DaysInMonth(chartYear, i + 1) / 2.0;&#xD;&#xA;    double mon = (new DateTime(chartYear, i + 1, 1)).ToOADate() + shift;&#xD;&#xA;   &#xD;&#xA;    double avg = (cnt[i] &gt; 0) ? total[i] / cnt[i] : double.NaN;&#xD;&#xA;    Dundas.Charting.WinControl.DataPoint dp = new Dundas.Charting.WinControl.DataPoint(mon, avg);&#xD;&#xA;  &#xD;&#xA;   &#xD;&#xA;    if (double.IsNaN(avg)) dp.Empty = true;&#xD;&#xA;  &#xD;&#xA;    if (i == 0)&#xD;&#xA;    {&#xD;&#xA;      srsAvg.Points.Add(new Dundas.Charting.WinControl.DataPoint(mon - shift, startEndAvg));&#xD;&#xA;    }&#xD;&#xA;  &#xD;&#xA;    srsAvg.Points.Add(dp);&#xD;&#xA;  &#xD;&#xA;    if (i == 11)&#xD;&#xA;    {&#xD;&#xA;      srsAvg.Points.Add(new Dundas.Charting.WinControl.DataPoint(mon + shift, startEndAvg));&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  foreach (System.Data.DataRow groupRow in groupBy.Rows)&#xD;&#xA;  {&#xD;&#xA;    System.Data.DataRow[] groupPoints = groupRow.GetChildRows(&quot;GroupByAggregateData&quot;);&#xD;&#xA;    int groupNumber = (int) groupRow[&quot;GroupBy&quot;];&#xD;&#xA;    if (groupNumber &lt; (numGroups - 1)) continue;&#xD;&#xA;    System.Drawing.Color yearColor = (groupNumber == numGroups) ? currYearColor : prevYearColor;&#xD;&#xA;    DateTime groupTime = (DateTime) groupRow[&quot;TimeStamp&quot;];&#xD;&#xA;  &#xD;&#xA;    Dundas.Charting.WinControl.Series series3 = aquariusChart1.Chart.Series.Add(groupTime.ToString(&quot;yyyy&quot;));&#xD;&#xA;    series3.Color = yearColor;&#xD;&#xA;  &#xD;&#xA;    series3.Type = Dundas.Charting.WinControl.SeriesChartType.Spline;&#xD;&#xA;    &#xD;&#xA;    series3.MarkerStyle = Dundas.Charting.WinControl.MarkerStyle.None;&#xD;&#xA;    series3.BorderWidth = 6;&#xD;&#xA;    series3.EmptyPointStyle.BorderWidth = 0;&#xD;&#xA;    series3.EmptyPointStyle.MarkerStyle = Dundas.Charting.WinControl.MarkerStyle.None;&#xD;&#xA;    series3.XValueType = Dundas.Charting.WinControl.ChartValueTypes.DateTime;&#xD;&#xA;  &#xD;&#xA;    foreach (System.Data.DataRow groupPoint in groupPoints)&#xD;&#xA;    {&#xD;&#xA;      DateTime time = (DateTime) groupPoint[&quot;TimeStamp&quot;];&#xD;&#xA;      double chartTime = (new DateTime(chartYear, time.Month, time.Day)).ToOADate();&#xD;&#xA;      object aggr = groupPoint[&quot;Aggr&quot;];  &#xD;&#xA;      if (aggr is double)&#xD;&#xA;      {&#xD;&#xA;        Dundas.Charting.WinControl.DataPoint dp = new Dundas.Charting.WinControl.DataPoint(chartTime, (double) aggr);&#xD;&#xA;      &#xD;&#xA;        series3.Points.Add(dp);&#xD;&#xA;      }&#xD;&#xA;      else&#xD;&#xA;      {&#xD;&#xA;        Dundas.Charting.WinControl.DataPoint dp = new Dundas.Charting.WinControl.DataPoint(chartTime, double.NaN);&#xD;&#xA;        dp.Empty = true;&#xD;&#xA;        series3.Points.Add(dp);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  srsAvg.Type = Dundas.Charting.WinControl.SeriesChartType.Spline;&#xD;&#xA;  &#xD;&#xA;  srsAvg.MarkerStyle = Dundas.Charting.WinControl.MarkerStyle.None;&#xD;&#xA;  srsAvg.BorderWidth = 6;&#xD;&#xA;  srsAvg.EmptyPointStyle.BorderWidth = 0;&#xD;&#xA;  srsAvg.EmptyPointStyle.MarkerStyle = Dundas.Charting.WinControl.MarkerStyle.None;&#xD;&#xA;  srsAvg.XValueType = Dundas.Charting.WinControl.ChartValueTypes.DateTime;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  // Calculate the Historical Average from values in the DataTable&#xD;&#xA;&#xD;&#xA;  System.Data.DataTable groupBy2 = (System.Data.DataTable) Engine.Objects[&quot;Set2_TimeSeries2.GroupBy&quot;];&#xD;&#xA;  int numGroups2 = groupBy2.Rows.Count;&#xD;&#xA;&#xD;&#xA;  int chartYear2 = 2000; // choose any year to map a year's values&#xD;&#xA;&#xD;&#xA;  double[] total2 = new double[12];&#xD;&#xA;  double[] cnt2 = new double[12];&#xD;&#xA;  for (int i2 = 0; i2 &lt; 12; i2++)&#xD;&#xA;  {&#xD;&#xA;    total2[i2] = 0;&#xD;&#xA;    cnt2[i2] = 0;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  foreach (System.Data.DataRow groupRow2 in groupBy2.Rows)&#xD;&#xA;  {&#xD;&#xA;    System.Data.DataRow[] groupPoints2 = groupRow2.GetChildRows(&quot;GroupByAggregateData&quot;);  &#xD;&#xA;    foreach (System.Data.DataRow groupPoint2 in groupPoints2)&#xD;&#xA;    {&#xD;&#xA;      DateTime time2 = (DateTime) groupPoint2[&quot;TimeStamp&quot;];&#xD;&#xA;      int mon2 = time2.Month;&#xD;&#xA;    &#xD;&#xA;      object aggr2 = groupPoint2[&quot;Aggr&quot;];&#xD;&#xA;      if (aggr2 is double)&#xD;&#xA;      {&#xD;&#xA;        total2[mon2 - 1] += (double) aggr2;&#xD;&#xA;        cnt2[mon2 - 1] += 1;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  System.Drawing.Color avgColor2 = System.Drawing.Color.FromArgb(128, 128, 128);&#xD;&#xA;  System.Drawing.Color prevYearColor2 = System.Drawing.Color.FromArgb(173, 216, 230);&#xD;&#xA;  System.Drawing.Color currYearColor2 = System.Drawing.Color.FromArgb(205, 92, 92);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  Dundas.Charting.WinControl.Series srsAvg2 = aquariusChart1.Chart.Series.Add(&quot;Historical Average&quot;);&#xD;&#xA;  srsAvg2.Color = avgColor2;&#xD;&#xA;  srsAvg2.YAxisType = Dundas.Charting.WinControl.AxisType.Secondary;&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;  for (int i2 = 0; i2 &lt; 12; i2++)&#xD;&#xA;  {&#xD;&#xA;    double mon2 = (new DateTime(chartYear, i2 + 1, 15)).ToOADate();&#xD;&#xA;   &#xD;&#xA;    double avg2 = (cnt2[i2] &gt; 0) ? total2[i2] / cnt2[i2] : double.NaN;&#xD;&#xA;    Dundas.Charting.WinControl.DataPoint dp2 = new Dundas.Charting.WinControl.DataPoint(mon2, avg2);&#xD;&#xA;    dp2.Label = avg2.ToString(&quot;F0&quot;);&#xD;&#xA;    dp2.FontColor = System.Drawing.Color.Black;&#xD;&#xA;    dp2.FontAngle = -45;&#xD;&#xA;    if (double.IsNaN(avg2)) dp2.Empty = true;&#xD;&#xA;    srsAvg2.Points.Add(dp2);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  foreach (System.Data.DataRow groupRow2 in groupBy2.Rows)&#xD;&#xA;  {&#xD;&#xA;    System.Data.DataRow[] groupPoints2 = groupRow2.GetChildRows(&quot;GroupByAggregateData&quot;);&#xD;&#xA;    int groupNumber2 = (int) groupRow2[&quot;GroupBy&quot;];&#xD;&#xA;    if (groupNumber2 &lt; (numGroups2 - 1)) continue;&#xD;&#xA;    System.Drawing.Color yearColor2 = (groupNumber2 == numGroups2) ? currYearColor2 : prevYearColor2;&#xD;&#xA;    DateTime groupTime = (DateTime) groupRow2[&quot;TimeStamp&quot;];&#xD;&#xA;  &#xD;&#xA;    Dundas.Charting.WinControl.Series series2 = aquariusChart1.Chart.Series.Add(groupTime.ToString(&quot;yyyy Rain&quot;));&#xD;&#xA;    series2.Color = yearColor2;&#xD;&#xA;    series2.YAxisType = Dundas.Charting.WinControl.AxisType.Secondary;&#xD;&#xA;  &#xD;&#xA; &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;    foreach (System.Data.DataRow groupPoint2 in groupPoints2)&#xD;&#xA;    {&#xD;&#xA;      DateTime time2 = (DateTime) groupPoint2[&quot;TimeStamp&quot;];&#xD;&#xA;      double chartTime2 = (new DateTime(chartYear, time2.Month, 15)).ToOADate();&#xD;&#xA;      object aggr2 = groupPoint2[&quot;Aggr&quot;];  &#xD;&#xA;      if (aggr2 is double)&#xD;&#xA;      {&#xD;&#xA;        Dundas.Charting.WinControl.DataPoint dp2 = new Dundas.Charting.WinControl.DataPoint(chartTime2, (double) aggr2);&#xD;&#xA;        dp2.Label = ((double) aggr2).ToString(&quot;F0&quot;);&#xD;&#xA;        dp2.FontColor = System.Drawing.Color.Black;&#xD;&#xA;        dp2.FontAngle = -45;&#xD;&#xA;        series2.Points.Add(dp2);&#xD;&#xA;      }&#xD;&#xA;      else&#xD;&#xA;      {&#xD;&#xA;        Dundas.Charting.WinControl.DataPoint dp2 = new Dundas.Charting.WinControl.DataPoint(chartTime2, double.NaN);&#xD;&#xA;        dp2.Empty = true;&#xD;&#xA;        series2.Points.Add(dp2);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    series2.Type = Dundas.Charting.WinControl.SeriesChartType.Column;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  srsAvg2.Type = Dundas.Charting.WinControl.SeriesChartType.Column;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;*/&#xD;&#xA; " ScriptLanguage="CSharp" GridStep="18.75" GenerateScript="if (Engine.IsSecondPass) return;&#xD;&#xA;&#xD;&#xA;ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;&#xD;&#xA;Log.Debug(&quot;Begin Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  RunFileReportRequest runReportRequest = (RunFileReportRequest) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;RunReportRequest&quot;];&#xD;&#xA;  ReportTitle = (string) dataSet.Tables[&quot;ReportSettings&quot;].Rows[0][&quot;ReportTitle&quot;];&#xD;&#xA;  &#xD;&#xA;  Guid timeSeriesUniqueId = (Guid) dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;UniqueId&quot;];&#xD;&#xA;  Guid precipitationUniqueId = (Guid) dataSet.Tables[&quot;PrecipitationData&quot;].Rows[0][&quot;UniqueId&quot;];&#xD;&#xA;  &#xD;&#xA;  string dllName = (string) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;];&#xD;&#xA;  Log.DebugFormat(&quot;{0} - Document GenerateScript input = {1}&quot;, dllName, timeSeriesUniqueId);&#xD;&#xA;&#xD;&#xA;  string GroupBy = &quot;Year&quot;;&#xD;&#xA;    &#xD;&#xA;  Common common = (Common) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;CommonLibrary&quot;];&#xD;&#xA;  &#xD;&#xA;  CoverageOptions coverageOptions = common.GetCoverageOptions();&#xD;&#xA;&#xD;&#xA;  InterpolationType interpolationType = (InterpolationType) dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;InterpolationType&quot;];&#xD;&#xA;  if (interpolationType == InterpolationType.DiscreteValues) coverageOptions.RequiresMinimumCoverage = false;&#xD;&#xA;&#xD;&#xA;  CoverageSetting = common.GetCoverageString(coverageOptions);&#xD;&#xA;    &#xD;&#xA;  DateTimeOffsetInterval timeseriesTimeRange = (DateTimeOffsetInterval) dataSet.Tables[&quot;SourceData&quot;].Rows[0][&quot;TimeSeriesInterval&quot;];&#xD;&#xA;  DateTimeOffsetInterval adjustedInterval = (DateTimeOffsetInterval) dataSet.Tables[&quot;ReportPeriods&quot;].Rows[0][&quot;GroupBy&quot; + GroupBy];&#xD;&#xA;&#xD;&#xA;  Log.InfoFormat(&quot;period selected = {0}, timeseries timerange = {1}, adjusted timerange = {2} for GroupBy = {3}&quot;,&#xD;&#xA;    common.TimeRangeString(runReportRequest.Interval), common.TimeRangeString(timeseriesTimeRange), common.TimeRangeString(adjustedInterval), GroupBy);&#xD;&#xA;&#xD;&#xA;  //&#xD;&#xA;  if (dataSet.Tables.Contains(&quot;MonthlyStatistic&quot;))dataSet.Tables[&quot;MonthlyStatistic&quot;].Rows.Clear();&#xD;&#xA;  if (dataSet.Tables.Contains(&quot;DailyStatistic&quot;))dataSet.Tables[&quot;DailyStatistic&quot;].Rows.Clear();&#xD;&#xA;  if (dataSet.Tables.Contains(&quot;GroupBy&quot;)) dataSet.Tables[&quot;GroupBy&quot;].Rows.Clear();&#xD;&#xA;  &#xD;&#xA;  if (dataSet.Relations.Contains(&quot;GroupByMonthlyStatistic&quot;)) dataSet.Relations.Remove(&quot;GroupByMonthlyStatistic&quot;);&#xD;&#xA;  if (dataSet.Relations.Contains(&quot;GroupByDailyStatistic&quot;)) dataSet.Relations.Remove(&quot;GroupByDailyStatistic&quot;);&#xD;&#xA;  if (dataSet.Tables.Contains(&quot;MonthlyStatistic&quot;)) dataSet.Tables[&quot;MonthlyStatistic&quot;].Constraints.Remove(&quot;GroupByMonthlyStatistic&quot;);&#xD;&#xA;  if (dataSet.Tables.Contains(&quot;DailyStatistic&quot;)) dataSet.Tables[&quot;DailyStatistic&quot;].Constraints.Remove(&quot;GroupByDailyStatistic&quot;);&#xD;&#xA;    &#xD;&#xA;  if (dataSet.Tables.Contains(&quot;MonthlyStatistic&quot;))dataSet.Tables.Remove(&quot;MonthlyStatistic&quot;);&#xD;&#xA;  if (dataSet.Tables.Contains(&quot;DailyStatistic&quot;))dataSet.Tables.Remove(&quot;DailyStatistic&quot;);&#xD;&#xA;  if (dataSet.Tables.Contains(&quot;GroupBy&quot;)) dataSet.Tables.Remove(&quot;GroupBy&quot;);&#xD;&#xA;  //&#xD;&#xA;  &#xD;&#xA;  // Make and add tables to DataSet&#xD;&#xA;  &#xD;&#xA;  GroupByHandler groupByHandler = new GroupByHandler(common);&#xD;&#xA;  System.Data.DataTable groupByTable = groupByHandler.GetGroupByTable(&quot;GroupBy&quot;);&#xD;&#xA;  dataSet.Tables.Add(groupByTable);&#xD;&#xA;    &#xD;&#xA;  groupByHandler.AddRowsToGroupBy(groupByTable, &quot;Year&quot;, adjustedInterval.Start.Value, adjustedInterval.End.Value);&#xD;&#xA;  &#xD;&#xA;  System.Data.DataTable dailyStatsTable = new System.Data.DataTable(&quot;DailyStatistic&quot;);&#xD;&#xA;  dailyStatsTable.Columns.Add(&quot;Year&quot;, typeof(int));&#xD;&#xA;  dailyStatsTable.Columns.Add(&quot;Month&quot;, typeof(int));&#xD;&#xA;  dailyStatsTable.Columns.Add(&quot;Day&quot;, typeof(int));&#xD;&#xA;  dailyStatsTable.Columns.Add(&quot;Value&quot;, typeof(double));&#xD;&#xA;    &#xD;&#xA;  dataSet.Tables.Add(dailyStatsTable);   &#xD;&#xA;  dataSet.Relations.Add(&quot;GroupByDailyStatistic&quot;, groupByTable.Columns[&quot;Year&quot;], dailyStatsTable.Columns[&quot;Year&quot;]);&#xD;&#xA;   &#xD;&#xA;  System.Data.DataTable statsTable = new System.Data.DataTable(&quot;MonthlyStatistic&quot;);&#xD;&#xA;  statsTable.Columns.Add(&quot;Year&quot;, typeof(int));&#xD;&#xA;  statsTable.Columns.Add(&quot;Month&quot;, typeof(int));&#xD;&#xA;  statsTable.Columns.Add(&quot;Value&quot;, typeof(double));&#xD;&#xA;    &#xD;&#xA;  dataSet.Tables.Add(statsTable);   &#xD;&#xA;  dataSet.Relations.Add(&quot;GroupByMonthlyStatistic&quot;, groupByTable.Columns[&quot;Year&quot;], statsTable.Columns[&quot;Year&quot;]);&#xD;&#xA;  &#xD;&#xA;  // Calculate the Monthy Sum statistics over the adjusted interval&#xD;&#xA;&#xD;&#xA;  List&lt;TimeSeriesPoint&gt; monthlyStatistics = common.GetComputedStatisticsPoints(precipitationUniqueId,&#xD;&#xA;    adjustedInterval.Start, adjustedInterval.End,&#xD;&#xA;    StatisticType.Sum, StatisticPeriod.Monthly, coverageOptions.RequiresMinimumCoverage, coverageOptions.CoverageThreshold);&#xD;&#xA;    &#xD;&#xA;  if (monthlyStatistics.Count &gt; 0)&#xD;&#xA;  {&#xD;&#xA;    int binAdjust = common.GetBinAdjustment(precipitationUniqueId); // Since Precip put on EndBin might adjust timestamp&#xD;&#xA;&#xD;&#xA;    foreach (TimeSeriesPoint point in monthlyStatistics)&#xD;&#xA;    {&#xD;&#xA;      DataRow row = statsTable.NewRow();&#xD;&#xA;      &#xD;&#xA;      DateTimeOffset pointTimestamp = point.Timestamp.AddMonths(binAdjust);&#xD;&#xA;    &#xD;&#xA;      row[&quot;Year&quot;] = pointTimestamp.Year;&#xD;&#xA;      row[&quot;Month&quot;] = pointTimestamp.Month;&#xD;&#xA;      row[&quot;Value&quot;] = (point.Value.HasValue) ? point.Value.Value : double.NaN;&#xD;&#xA;      &#xD;&#xA;      statsTable.Rows.Add(row);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  // Calculate the Daily Mean statistics over the adjusted interval&#xD;&#xA;&#xD;&#xA;  List&lt;TimeSeriesPoint&gt; dailyStatistics = common.GetComputedStatisticsPoints(timeSeriesUniqueId,&#xD;&#xA;    adjustedInterval.Start, adjustedInterval.End,&#xD;&#xA;    StatisticType.Mean, StatisticPeriod.Daily, coverageOptions.RequiresMinimumCoverage, coverageOptions.CoverageThreshold);&#xD;&#xA;    &#xD;&#xA;  if (dailyStatistics.Count &gt; 0)&#xD;&#xA;  {&#xD;&#xA;    int binAdjust = common.GetBinAdjustment(timeSeriesUniqueId); // Since Precip put on EndBin might adjust timestamp&#xD;&#xA;&#xD;&#xA;    foreach (TimeSeriesPoint point in dailyStatistics)&#xD;&#xA;    {&#xD;&#xA;      DataRow row = dailyStatsTable.NewRow();&#xD;&#xA;      &#xD;&#xA;      DateTimeOffset pointTimestamp = point.Timestamp.AddDays(binAdjust);&#xD;&#xA;    &#xD;&#xA;      row[&quot;Year&quot;] = pointTimestamp.Year;&#xD;&#xA;      row[&quot;Month&quot;] = pointTimestamp.Month;&#xD;&#xA;      row[&quot;Day&quot;] = pointTimestamp.Day;&#xD;&#xA;      row[&quot;Value&quot;] = (point.Value.HasValue) ? point.Value.Value : double.NaN;&#xD;&#xA;      &#xD;&#xA;      dailyStatsTable.Rows.Add(row);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  Log.Debug(&quot;End Document GenerateScript !!!!!!!!!!!!!!**********************************************************&quot;);&#xD;&#xA;}&#xD;&#xA;catch (Exception exp)&#xD;&#xA;{&#xD;&#xA;  System.Data.DataSet dataSet = (System.Data.DataSet) Engine.Objects[&quot;ReportTables&quot;];&#xD;&#xA;  string dllName = (string) dataSet.Tables[&quot;RunReportRequest&quot;].Rows[0][&quot;DllName&quot;];&#xD;&#xA;  Log.Error(&quot;Document GenerateScript - &quot; + dllName, exp);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;"><Parameters type="PerpetuumSoft.Reporting.DOM.ParameterCollection" id="2" /><PageContent type="PerpetuumSoft.Reporting.DOM.Wrappers.ContentParametersDictionary" id="3" /><Pages type="PerpetuumSoft.Reporting.DOM.PageCollection" id="4"><Item type="PerpetuumSoft.Reporting.DOM.Page" id="5" Margins="75; 75; 150; 150" Size="3300;2550" StyleName="Normal" Name="page1" Location="0;0" PaperKind="Letter" Orientation="Landscape"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="6" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="7"><Item type="PerpetuumSoft.Reporting.DOM.PageHeader" id="8" StyleName="PageHeader" Location="0;75" Name="pageHeader" Size="3300;656.25"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="9" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="10"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="11" Location="112.5;0" Size="3037.5;112.5" Name="textBoxPageHeader1" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="12" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="13"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="14" Expression="GetData(&quot;ReportTables.ReportData.PageHeader1&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="15" value="Aquatic Informatics Data Management Software" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="16" Size="12" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="17" Location="112.5;75" Size="3037.5;75" Name="textBoxPageHeader2" StyleName="PageHeader" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="18" Color="0, 131, 215" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="19"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="20" Expression="GetData(&quot;ReportTables.ReportData.PageHeader2&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="21" value="Faster Analysis. Better Decisions." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="22" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Picture" id="23" Location="150;31.25" Size="643.75;187.5" SizeMode="Uniform" Name="logo" StyleName="PageHeader" GenerateScript="var encodedImage = GetData(&quot;ReportTables.OrganizationIcon.EncodedImage&quot;) as string;&#xD;&#xA;var bytes = Convert.FromBase64String(encodedImage);&#xD;&#xA;&#xD;&#xA;using (var memoryStream = new System.IO.MemoryStream(bytes))&#xD;&#xA;{&#xD;&#xA;  logo.Image = new System.Drawing.Bitmap(&#xD;&#xA;    System.Drawing.Image.FromStream(memoryStream));&#xD;&#xA;}" ExportAsPictureInXaml="false"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="24"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="25" Expression="GetData(&quot;ReportTables.OrganizationIcon.SupportUrl&quot;)" PropertyName="Hyperlink" /></DataBindings></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="26" Location="0;281.25" Size="3300;118.11023712158203" Name="textBoxPageHeaderLine" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><Border type="PerpetuumSoft.Framework.Drawing.Border" id="27" TopLine="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="28" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="29" Location="150;300" Size="1500;75" Name="reportTitle" StyleName="PageHeader" GenerateScript="reportTitle.Document.Title = ReportTitle;" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="30" Color="33, 64, 154" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="31"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="32" Expression="ReportTitle" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="33" value="Wind Rose" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="34" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="35" Location="150;356.25" Size="1500;56.25" Name="textBoxSubTitle" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="36" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="37"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="38" Expression="GetData(&quot;ReportTables.ReportData.ReportSubTitle&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="39" value="Title" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="40" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="41" Location="2418.75;300" Size="731.25;75" Name="textBox32" StyleName="PageNumber" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="42" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="43"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="44" Expression="Now.ToString(&quot;MMM d, yyyy&quot;) + &quot; | &quot; + PageNumber.ToString() + &quot; &quot; + Resources.Of + &quot; &quot; + PageCount.ToString()" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="45" value="DISCLAIMER: The accuracy and reliability of this data is not guaranteed. Aquatic Informatics Inc. accepts no liability for its use in any way. It is the responsibility of the reader to establish the suitability of the information provided in this report for any purpose. No warranty expressed or implied is made regarding the accuracy, completeness, currency, relevance or suitability for any particular purpose of the information provided in this report." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="46" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="47" Location="1668.75;356.25" Size="1481.25;56.25" Name="textBox27" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="48" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="49"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="50" Expression="GetData(&quot;ReportTables.ReportData.PeriodSelectedInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="51" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="52" Location="0;431.25" Size="3300;196.875" Name="textBox12" ExportAsPictureInXaml="false" TextAlign="TopLeft"><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="53" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="54" All="1 Solid 204, 204, 204" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="55" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="56" Location="150;431.25" Size="2606.25;56.25" Name="textBox13" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="57" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="58"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="59" Expression="&quot;Soil Moisture: &quot; + GetData(&quot;ReportTables.SourceData.TimeSeriesInformation&quot;).ToString()" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="60" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="61" Location="150;468.75" Size="2606.25;56.25" Name="textBox14" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="62" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="63"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="64" Expression="GetData(&quot;ReportTables.SourceData.TimeSeriesTimeRangeInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="65" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="66" Location="150;525" Size="2606.25;56.25" Name="textBox11" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="67" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="68"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="69" Expression="&quot;Precipitation: &quot; + GetData(&quot;ReportTables.PrecipitationData.TimeSeriesInformation&quot;).ToString()" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="70" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="71" Location="2756.25;431.25" Size="393.75;56.25" Name="textBox31" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="72" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="73"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="74" Expression="GetData(&quot;ReportTables.SourceData.UnitInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="75" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="76" Location="2756.25;525" Size="393.75;56.25" Name="textBox16" ExportAsPictureInXaml="false" TextAlign="MiddleRight"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="77" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="78"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="79" Expression="GetData(&quot;ReportTables.PrecipitationData.UnitInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="80" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="81" Location="150;562.5" Size="2606.25;56.25" Name="textBox17" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="MiddleLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="82" Color="51, 51, 51" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="83"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="84" Expression="GetData(&quot;ReportTables.PrecipitationData.TimeSeriesTimeRangeInformation&quot;)" PropertyName="Value" /></DataBindings><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="85" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item><Item type="PerpetuumSoft.Reporting.DOM.Detail" id="86" Location="0;787.5" Size="3300;1637.5" Name="detail1"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="87" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="88"><Item type="PerpetuumSoft.Reporting.MSChart.MicrosoftChart" id="89" Location="150;0" BorderlineColor="Silver" BorderlineDashStyle="Solid" Size="3000;1575" BorderlineWidth="2" BackColor="WhiteSmoke" StyleName="Normal" GenerateScript="ServiceStack.Logging.ILog Log = ServiceStack.Logging.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);&#xD;&#xA;Log.Debug(&quot;Begin Chart GenerateScript for SoilMoisture&quot;);&#xD;&#xA;&#xD;&#xA;try&#xD;&#xA;{&#xD;&#xA;  microsoftChart1.Series.Clear();&#xD;&#xA;  &#xD;&#xA;  DrawChart(microsoftChart1, (DataSet) Engine.Objects[&quot;ReportTables&quot;]);&#xD;&#xA;&#xD;&#xA; &#xD;&#xA;} catch (Exception exp)&#xD;&#xA;{&#xD;&#xA;  Log.Error(&quot;Chart GenerateScript&quot;, exp);&#xD;&#xA;}" Name="microsoftChart1"><ChartAreas type="System.Windows.Forms.DataVisualization.Charting.ChartAreaCollection" id="90"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea" id="91" Name="ChartArea1" BorderColor="Transparent" BackColor="White" BackImage=""><InnerPlotPosition type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="92" /><Area3DStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.ChartArea3DStyle" id="93" /><CursorY type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="94" /><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="95" /><AxisX2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="96" Name="Secondary X axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="97" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="98" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DarkGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="99" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="100" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="101" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="102" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="103" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="104" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="105" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DarkGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="106" /></AxisX2><AxisY2 type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="107" Name="Secondary Y (Value) axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="108" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="109" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DarkGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="110" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="111" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="112" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="113" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="114" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="115" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="116" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DarkGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="117" /></AxisY2><AxisX type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="118" Name="X axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" IsStartedFromZero="false" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="119" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="120" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DimGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="121" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="122" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="123" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="124" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="125" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="126" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="127" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DimGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="128" /></AxisX><AxisY type="PerpetuumSoft.Reporting.MSChart.ChartModel.Axis" id="129" Name="Y (Value) axis" TitleForeColor="51, 51, 51" LineColor="DarkGray" TitleFont="Calibri, 8.25pt" IsStartedFromZero="false" LabelAutoFitStyle="DecreaseFont, StaggeredLabels, LabelsAngleStep30, WordWrap"><MajorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="130" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" Interval="NaN" IntervalOffset="NaN" LineColor="DarkGray" /><MinorTickMark type="PerpetuumSoft.Reporting.MSChart.ChartModel.TickMark" id="131" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" Interval="0" IntervalOffset="0" LineColor="DarkGray" /><ScaleView type="System.Windows.Forms.DataVisualization.Charting.AxisScaleView" id="132" /><ScaleBreakStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.AxisScaleBreakStyle" id="133" /><LabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.LabelStyle" id="134" ForeColor="51, 51, 51" Font="Calibri, 8.25pt" /><MajorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="135" Enabled="true" IntervalOffsetType="NotSet" IntervalType="Auto" IntervalOffset="NaN" LineColor="DarkGray" Interval="NaN" /><ScrollBar type="System.Windows.Forms.DataVisualization.Charting.AxisScrollBar" id="136" /><StripLines type="System.Windows.Forms.DataVisualization.Charting.StripLinesCollection" id="137" /><MinorGrid type="PerpetuumSoft.Reporting.MSChart.ChartModel.Grid" id="138" Enabled="false" IntervalOffsetType="Auto" IntervalType="Auto" IntervalOffset="0" LineColor="DarkGray" Interval="0" /><CustomLabels type="System.Windows.Forms.DataVisualization.Charting.CustomLabelsCollection" id="139" /></AxisY><CursorX type="System.Windows.Forms.DataVisualization.Charting.Cursor" id="140" /></Item></ChartAreas><BorderSkin type="PerpetuumSoft.Reporting.MSChart.ChartModel.BorderSkin" id="141" BackHatchStyle="None" BackImageAlignment="TopLeft" BorderDashStyle="NotSet" BackImageWrapMode="Tile" BackGradientStyle="None" SkinStyle="None" BackImage="" /><Legends type="System.Windows.Forms.DataVisualization.Charting.LegendCollection" id="142"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Legend" id="143" IsTextAutoFit="false" Font="Calibri, 8.25pt" Docking="Top" BackImage="" ForeColor="51, 51, 51" Name="Legend1"><Position type="PerpetuumSoft.Reporting.MSChart.ChartModel.ElementPosition" id="144" /><CellColumns type="System.Windows.Forms.DataVisualization.Charting.LegendCellColumnCollection" id="145" /><CustomItems type="System.Windows.Forms.DataVisualization.Charting.LegendItemsCollection" id="146" /></Item></Legends><Titles type="System.Windows.Forms.DataVisualization.Charting.TitleCollection" id="147" /><PaletteCustomColors type="System.Drawing.Color[]" id="148" elementtype="System.Drawing.Color" length="0" /><Images type="System.Windows.Forms.DataVisualization.Charting.NamedImagesCollection" id="149" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="150" /><Series type="System.Windows.Forms.DataVisualization.Charting.SeriesCollection" id="151"><Item type="PerpetuumSoft.Reporting.MSChart.ChartModel.Series" id="152" MarkerStyle="Circle" Name="Series1" BackGradientStyle="None" LabelFormat="" BorderWidth="5" YValueMembers="Value" Legend="Legend1" MarkerColor="Yellow" ChartTypeName="Line" BackHatchStyle="None" BorderColor="" XValueMember="TimeStampDouble" BackImageTransparentColor="" MarkerBorderColor="Blue" IsVisibleInLegend="true" Font="Microsoft Sans Serif, 8pt" MarkerBorderWidth="3" BackSecondaryColor="" MarkerImageTransparentColor="" Color="ForestGreen" LegendText="" BackImageAlignment="TopLeft" IsValueShownAsLabel="false" XValueType="DateTime" MarkerImage="" Label="" BackImage="" MarkerSize="8" LabelBorderWidth="1" LabelBorderDashStyle="Solid" BackImageWrapMode="Tile" ChartArea="ChartArea1" BorderDashStyle="Solid" LabelForeColor="Black" LabelAngle="0" ChartType="Line"><MyCustomProperties type="PerpetuumSoft.Reporting.MSChart.ChartModel.Design.CustomPropertiesExtender" id="153" /><SmartLabelStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.SmartLabelStyle" id="154" /><EmptyPointStyle type="PerpetuumSoft.Reporting.MSChart.ChartModel.DataPointCustomProperties" id="155" MarkerStyle="None" Label="" LabelBorderWidth="1" BackGradientStyle="None" LabelFormat="" ToolTip="" MarkerImageTransparentColor="" MarkerImage="" BackHatchStyle="None" BorderColor="" LegendText="" MarkerColor="" BackImageTransparentColor="" MarkerBorderColor="" IsVisibleInLegend="true" MarkerBorderWidth="1" Font="Microsoft Sans Serif, 8pt" BackSecondaryColor="" Color="Transparent" AxisLabel="" BackImageAlignment="TopLeft" IsValueShownAsLabel="false" LabelToolTip="" BorderWidth="0" MarkerSize="5" BackImageWrapMode="Tile" BackImage="" LabelBorderDashStyle="Solid" LegendToolTip="" BorderDashStyle="Solid" LabelForeColor="Black" LabelAngle="0"><CustomPropertiesExtended type="System.Windows.Forms.DataVisualization.Charting.CustomProperties" id="156" /></EmptyPointStyle><Points type="System.Windows.Forms.DataVisualization.Charting.DataPointCollection" id="157" /></Item></Series><Annotations type="System.Windows.Forms.DataVisualization.Charting.AnnotationCollection" id="158" /></Item></Controls><Aggregates type="PerpetuumSoft.Reporting.DOM.AggregateCollection" id="159" /></Item><Item type="PerpetuumSoft.Reporting.DOM.PageFooter" id="160" StyleName="PageFooter" Location="0;2493.75" Name="pageFooter" Size="3300;150"><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="161" /><Controls type="PerpetuumSoft.Reporting.DOM.ReportControlCollection" id="162"><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="163" Location="0;0" Size="3300;29.528125762939453" Name="textBoxPageFooterLine" ExportAsPictureInXaml="false"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="164" Color="110, 112, 110" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="27" TopLine="1 Solid Silver" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="165" /></Item><Item type="PerpetuumSoft.Reporting.DOM.TextBox" id="166" Location="168.75;0" Size="2981.25;131.25" CanGrow="true" Name="textBoxPageFooter1" StyleName="Normal" ExportAsPictureInXaml="false" TextAlign="BottomLeft"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="167" Color="110, 112, 110" /><DataBindings type="PerpetuumSoft.Reporting.DOM.ReportDataBindingCollection" id="168"><Item type="PerpetuumSoft.Reporting.DOM.ReportDataBinding" id="169" Expression="GetData(&quot;ReportTables.ReportData.FooterDisclaimer&quot;)" PropertyName="Value" /></DataBindings><RawValue type="System.String" id="170" value="DISCLAIMER - AQUARIUS is the leading software suite to acquire, process, model, and publish water data. Environmental monitoring agencies worldwide trust AQUARIUS to produce accurate water information in real-time. A modern design delivers the latest water science in an intuitive experience." /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="171" Size="7" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item></Controls></Item></Controls></Item></Pages><DataSources type="PerpetuumSoft.Reporting.Data.DocumentDataSourceCollection" id="172" /><StyleSheet type="PerpetuumSoft.Reporting.DOM.StyleSheet" id="173"><Styles type="PerpetuumSoft.Reporting.DOM.StyleCollection" id="174"><Item type="PerpetuumSoft.Reporting.DOM.Style" id="175" Name="HeaderFooter"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="176" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="177" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="178" Name="HeaderFooter1"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="179" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="180" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="181" Name="HeaderFooter2"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="182" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="183" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="184" Name="HeaderFooter3"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="185" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="186" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="187" Name="Even"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="188" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="189" Size="9" FamilyName="Calibri" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="190" Name="Odd"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="191" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="192" Size="9" FamilyName="Calibri" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="193" Color="Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="194" Name="Normal"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="195" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="196" Size="9.75" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="197" Name="TableHeader"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="198" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="199" Size="8" Strikeout="Off" Italic="Off" Bold="Off" FamilyName="Calibri" Underline="Off" /><Fill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="200" Color="230, 230, 230" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="201" All="1 Solid Silver" /></Item><Item type="PerpetuumSoft.Reporting.DOM.Style" id="202" Name="TableCell"><TextFill type="PerpetuumSoft.Framework.Drawing.SolidFill" id="203" Color="51, 51, 51" /><Font type="PerpetuumSoft.Framework.Drawing.FontDescriptor" id="204" Size="8" FamilyName="Calibri" /><Border type="PerpetuumSoft.Framework.Drawing.Border" id="201" All="1 Solid Silver" /></Item></Styles></StyleSheet></root>
